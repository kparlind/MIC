'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.4984
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsReport"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsReport
    Inherits Global.System.Data.DataSet
    
    Private tabledtReportQuestionnaire As dtReportQuestionnaireDataTable
    
    Private tabledtReportOrderPabrikasi As dtReportOrderPabrikasiDataTable
    
    Private tabledtRetrieve_Report_ProspekOrder As dtRetrieve_Report_ProspekOrderDataTable
    
    Private tabledtManifoldData As dtManifoldDataDataTable
    
    Private tabledtPipeToKitchen As dtPipeToKitchenDataTable
    
    Private tabledtSupportingMaterial As dtSupportingMaterialDataTable
    
    Private tabledtTitikApi As dtTitikApiDataTable
    
    Private tableTrans_MoU As Trans_MoUDataTable
    
    Private tablesp_retrieve_DPPbyID As sp_retrieve_DPPbyIDDataTable
    
    Private tabledtInvoicePiutang As dtInvoicePiutangDataTable
    
    Private tabledtDaftarPelunasanHutang As dtDaftarPelunasanHutangDataTable
    
    Private tabledtGLDetail As dtGLDetailDataTable
    
    Private tabledtReportPO As dtReportPODataTable
    
    Private tabledtPembayaranKartuHutangDS As dtPembayaranKartuHutangDSDataTable
    
    Private tabledtReportOrderMaintenance As dtReportOrderMaintenanceDataTable
    
    Private tabledtReportBPB As dtReportBPBDataTable
    
    Private tabledtRetrieveReportRekapPemakaianBahanPerSPK As dtRetrieveReportRekapPemakaianBahanPerSPKDataTable
    
    Private tabledtRetrieveReportRekapPemakaianBahanPerProject As dtRetrieveReportRekapPemakaianBahanPerProjectDataTable
    
    Private tabledtPOItemByPONo As dtPOItemByPONoDataTable
    
    Private tabledtPOJasaByPONo As dtPOJasaByPONoDataTable
    
    Private tabledtRetrieveReportSPKForm As dtRetrieveReportSPKFormDataTable
    
    Private tabledtRetrieveReportProgressProjectPerSPK As dtRetrieveReportProgressProjectPerSPKDataTable
    
    Private tabledtRetrieveReportRekapProject As dtRetrieveReportRekapProjectDataTable
    
    Private tabledtRetrieveReportRekapProgressProjectPerSPK As dtRetrieveReportRekapProgressProjectPerSPKDataTable
    
    Private tablesp_getPembelianItem As sp_getPembelianItemDataTable
    
    Private tabledtPOPendingBasedOnTerimaBarang As dtPOPendingBasedOnTerimaBarangDataTable
    
    Private tablesp_GetCustomerReceivableAging As sp_GetCustomerReceivableAgingDataTable
    
    Private tabledtRetrieveReportFormPenawaranMarketingHdr As dtRetrieveReportFormPenawaranMarketingHdrDataTable
    
    Private tabledtRetrieveReportFormPenawaranMarketingDtl As dtRetrieveReportFormPenawaranMarketingDtlDataTable
    
    Private tabledtRetrieveReportFormPenawaranMarketingJasa As dtRetrieveReportFormPenawaranMarketingJasaDataTable
    
    Private tabledtPersediaanBarang As dtPersediaanBarangDataTable
    
    Private tabledtPenjualanTokoPerBarangDaily As dtPenjualanTokoPerBarangDailyDataTable
    
    Private tabledtPenjualanTokoPerBarangMonthly As dtPenjualanTokoPerBarangMonthlyDataTable
    
    Private tabledtPenjualanTokoPerCustomerDaily As dtPenjualanTokoPerCustomerDailyDataTable
    
    Private tabledtPenjualanTokoPerCustomerMonthly As dtPenjualanTokoPerCustomerMonthlyDataTable
    
    Private tabledtPenjualanInstalasiDaily As dtPenjualanInstalasiDailyDataTable
    
    Private tabledtPenjualanInstalasiMonthly As dtPenjualanInstalasiMonthlyDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("dtReportQuestionnaire")) Is Nothing) Then
                MyBase.Tables.Add(New dtReportQuestionnaireDataTable(ds.Tables("dtReportQuestionnaire")))
            End If
            If (Not (ds.Tables("dtReportOrderPabrikasi")) Is Nothing) Then
                MyBase.Tables.Add(New dtReportOrderPabrikasiDataTable(ds.Tables("dtReportOrderPabrikasi")))
            End If
            If (Not (ds.Tables("dtRetrieve_Report_ProspekOrder")) Is Nothing) Then
                MyBase.Tables.Add(New dtRetrieve_Report_ProspekOrderDataTable(ds.Tables("dtRetrieve_Report_ProspekOrder")))
            End If
            If (Not (ds.Tables("dtManifoldData")) Is Nothing) Then
                MyBase.Tables.Add(New dtManifoldDataDataTable(ds.Tables("dtManifoldData")))
            End If
            If (Not (ds.Tables("dtPipeToKitchen")) Is Nothing) Then
                MyBase.Tables.Add(New dtPipeToKitchenDataTable(ds.Tables("dtPipeToKitchen")))
            End If
            If (Not (ds.Tables("dtSupportingMaterial")) Is Nothing) Then
                MyBase.Tables.Add(New dtSupportingMaterialDataTable(ds.Tables("dtSupportingMaterial")))
            End If
            If (Not (ds.Tables("dtTitikApi")) Is Nothing) Then
                MyBase.Tables.Add(New dtTitikApiDataTable(ds.Tables("dtTitikApi")))
            End If
            If (Not (ds.Tables("Trans_MoU")) Is Nothing) Then
                MyBase.Tables.Add(New Trans_MoUDataTable(ds.Tables("Trans_MoU")))
            End If
            If (Not (ds.Tables("sp_retrieve_DPPbyID")) Is Nothing) Then
                MyBase.Tables.Add(New sp_retrieve_DPPbyIDDataTable(ds.Tables("sp_retrieve_DPPbyID")))
            End If
            If (Not (ds.Tables("dtInvoicePiutang")) Is Nothing) Then
                MyBase.Tables.Add(New dtInvoicePiutangDataTable(ds.Tables("dtInvoicePiutang")))
            End If
            If (Not (ds.Tables("dtDaftarPelunasanHutang")) Is Nothing) Then
                MyBase.Tables.Add(New dtDaftarPelunasanHutangDataTable(ds.Tables("dtDaftarPelunasanHutang")))
            End If
            If (Not (ds.Tables("dtGLDetail")) Is Nothing) Then
                MyBase.Tables.Add(New dtGLDetailDataTable(ds.Tables("dtGLDetail")))
            End If
            If (Not (ds.Tables("dtReportPO")) Is Nothing) Then
                MyBase.Tables.Add(New dtReportPODataTable(ds.Tables("dtReportPO")))
            End If
            If (Not (ds.Tables("dtPembayaranKartuHutangDS")) Is Nothing) Then
                MyBase.Tables.Add(New dtPembayaranKartuHutangDSDataTable(ds.Tables("dtPembayaranKartuHutangDS")))
            End If
            If (Not (ds.Tables("dtReportOrderMaintenance")) Is Nothing) Then
                MyBase.Tables.Add(New dtReportOrderMaintenanceDataTable(ds.Tables("dtReportOrderMaintenance")))
            End If
            If (Not (ds.Tables("dtReportBPB")) Is Nothing) Then
                MyBase.Tables.Add(New dtReportBPBDataTable(ds.Tables("dtReportBPB")))
            End If
            If (Not (ds.Tables("dtRetrieveReportRekapPemakaianBahanPerSPK")) Is Nothing) Then
                MyBase.Tables.Add(New dtRetrieveReportRekapPemakaianBahanPerSPKDataTable(ds.Tables("dtRetrieveReportRekapPemakaianBahanPerSPK")))
            End If
            If (Not (ds.Tables("dtRetrieveReportRekapPemakaianBahanPerProject")) Is Nothing) Then
                MyBase.Tables.Add(New dtRetrieveReportRekapPemakaianBahanPerProjectDataTable(ds.Tables("dtRetrieveReportRekapPemakaianBahanPerProject")))
            End If
            If (Not (ds.Tables("dtPOItemByPONo")) Is Nothing) Then
                MyBase.Tables.Add(New dtPOItemByPONoDataTable(ds.Tables("dtPOItemByPONo")))
            End If
            If (Not (ds.Tables("dtPOJasaByPONo")) Is Nothing) Then
                MyBase.Tables.Add(New dtPOJasaByPONoDataTable(ds.Tables("dtPOJasaByPONo")))
            End If
            If (Not (ds.Tables("dtRetrieveReportSPKForm")) Is Nothing) Then
                MyBase.Tables.Add(New dtRetrieveReportSPKFormDataTable(ds.Tables("dtRetrieveReportSPKForm")))
            End If
            If (Not (ds.Tables("dtRetrieveReportProgressProjectPerSPK")) Is Nothing) Then
                MyBase.Tables.Add(New dtRetrieveReportProgressProjectPerSPKDataTable(ds.Tables("dtRetrieveReportProgressProjectPerSPK")))
            End If
            If (Not (ds.Tables("dtRetrieveReportRekapProject")) Is Nothing) Then
                MyBase.Tables.Add(New dtRetrieveReportRekapProjectDataTable(ds.Tables("dtRetrieveReportRekapProject")))
            End If
            If (Not (ds.Tables("dtRetrieveReportRekapProgressProjectPerSPK")) Is Nothing) Then
                MyBase.Tables.Add(New dtRetrieveReportRekapProgressProjectPerSPKDataTable(ds.Tables("dtRetrieveReportRekapProgressProjectPerSPK")))
            End If
            If (Not (ds.Tables("sp_getPembelianItem")) Is Nothing) Then
                MyBase.Tables.Add(New sp_getPembelianItemDataTable(ds.Tables("sp_getPembelianItem")))
            End If
            If (Not (ds.Tables("dtPOPendingBasedOnTerimaBarang")) Is Nothing) Then
                MyBase.Tables.Add(New dtPOPendingBasedOnTerimaBarangDataTable(ds.Tables("dtPOPendingBasedOnTerimaBarang")))
            End If
            If (Not (ds.Tables("sp_GetCustomerReceivableAging")) Is Nothing) Then
                MyBase.Tables.Add(New sp_GetCustomerReceivableAgingDataTable(ds.Tables("sp_GetCustomerReceivableAging")))
            End If
            If (Not (ds.Tables("dtRetrieveReportFormPenawaranMarketingHdr")) Is Nothing) Then
                MyBase.Tables.Add(New dtRetrieveReportFormPenawaranMarketingHdrDataTable(ds.Tables("dtRetrieveReportFormPenawaranMarketingHdr")))
            End If
            If (Not (ds.Tables("dtRetrieveReportFormPenawaranMarketingDtl")) Is Nothing) Then
                MyBase.Tables.Add(New dtRetrieveReportFormPenawaranMarketingDtlDataTable(ds.Tables("dtRetrieveReportFormPenawaranMarketingDtl")))
            End If
            If (Not (ds.Tables("dtRetrieveReportFormPenawaranMarketingJasa")) Is Nothing) Then
                MyBase.Tables.Add(New dtRetrieveReportFormPenawaranMarketingJasaDataTable(ds.Tables("dtRetrieveReportFormPenawaranMarketingJasa")))
            End If
            If (Not (ds.Tables("dtPersediaanBarang")) Is Nothing) Then
                MyBase.Tables.Add(New dtPersediaanBarangDataTable(ds.Tables("dtPersediaanBarang")))
            End If
            If (Not (ds.Tables("dtPenjualanTokoPerBarangDaily")) Is Nothing) Then
                MyBase.Tables.Add(New dtPenjualanTokoPerBarangDailyDataTable(ds.Tables("dtPenjualanTokoPerBarangDaily")))
            End If
            If (Not (ds.Tables("dtPenjualanTokoPerBarangMonthly")) Is Nothing) Then
                MyBase.Tables.Add(New dtPenjualanTokoPerBarangMonthlyDataTable(ds.Tables("dtPenjualanTokoPerBarangMonthly")))
            End If
            If (Not (ds.Tables("dtPenjualanTokoPerCustomerDaily")) Is Nothing) Then
                MyBase.Tables.Add(New dtPenjualanTokoPerCustomerDailyDataTable(ds.Tables("dtPenjualanTokoPerCustomerDaily")))
            End If
            If (Not (ds.Tables("dtPenjualanTokoPerCustomerMonthly")) Is Nothing) Then
                MyBase.Tables.Add(New dtPenjualanTokoPerCustomerMonthlyDataTable(ds.Tables("dtPenjualanTokoPerCustomerMonthly")))
            End If
            If (Not (ds.Tables("dtPenjualanInstalasiDaily")) Is Nothing) Then
                MyBase.Tables.Add(New dtPenjualanInstalasiDailyDataTable(ds.Tables("dtPenjualanInstalasiDaily")))
            End If
            If (Not (ds.Tables("dtPenjualanInstalasiMonthly")) Is Nothing) Then
                MyBase.Tables.Add(New dtPenjualanInstalasiMonthlyDataTable(ds.Tables("dtPenjualanInstalasiMonthly")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtReportQuestionnaire() As dtReportQuestionnaireDataTable
        Get
            Return Me.tabledtReportQuestionnaire
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtReportOrderPabrikasi() As dtReportOrderPabrikasiDataTable
        Get
            Return Me.tabledtReportOrderPabrikasi
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtRetrieve_Report_ProspekOrder() As dtRetrieve_Report_ProspekOrderDataTable
        Get
            Return Me.tabledtRetrieve_Report_ProspekOrder
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtManifoldData() As dtManifoldDataDataTable
        Get
            Return Me.tabledtManifoldData
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtPipeToKitchen() As dtPipeToKitchenDataTable
        Get
            Return Me.tabledtPipeToKitchen
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtSupportingMaterial() As dtSupportingMaterialDataTable
        Get
            Return Me.tabledtSupportingMaterial
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtTitikApi() As dtTitikApiDataTable
        Get
            Return Me.tabledtTitikApi
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Trans_MoU() As Trans_MoUDataTable
        Get
            Return Me.tableTrans_MoU
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_retrieve_DPPbyID() As sp_retrieve_DPPbyIDDataTable
        Get
            Return Me.tablesp_retrieve_DPPbyID
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtInvoicePiutang() As dtInvoicePiutangDataTable
        Get
            Return Me.tabledtInvoicePiutang
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtDaftarPelunasanHutang() As dtDaftarPelunasanHutangDataTable
        Get
            Return Me.tabledtDaftarPelunasanHutang
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtGLDetail() As dtGLDetailDataTable
        Get
            Return Me.tabledtGLDetail
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtReportPO() As dtReportPODataTable
        Get
            Return Me.tabledtReportPO
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtPembayaranKartuHutangDS() As dtPembayaranKartuHutangDSDataTable
        Get
            Return Me.tabledtPembayaranKartuHutangDS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtReportOrderMaintenance() As dtReportOrderMaintenanceDataTable
        Get
            Return Me.tabledtReportOrderMaintenance
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtReportBPB() As dtReportBPBDataTable
        Get
            Return Me.tabledtReportBPB
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtRetrieveReportRekapPemakaianBahanPerSPK() As dtRetrieveReportRekapPemakaianBahanPerSPKDataTable
        Get
            Return Me.tabledtRetrieveReportRekapPemakaianBahanPerSPK
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtRetrieveReportRekapPemakaianBahanPerProject() As dtRetrieveReportRekapPemakaianBahanPerProjectDataTable
        Get
            Return Me.tabledtRetrieveReportRekapPemakaianBahanPerProject
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtPOItemByPONo() As dtPOItemByPONoDataTable
        Get
            Return Me.tabledtPOItemByPONo
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtPOJasaByPONo() As dtPOJasaByPONoDataTable
        Get
            Return Me.tabledtPOJasaByPONo
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtRetrieveReportSPKForm() As dtRetrieveReportSPKFormDataTable
        Get
            Return Me.tabledtRetrieveReportSPKForm
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtRetrieveReportProgressProjectPerSPK() As dtRetrieveReportProgressProjectPerSPKDataTable
        Get
            Return Me.tabledtRetrieveReportProgressProjectPerSPK
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtRetrieveReportRekapProject() As dtRetrieveReportRekapProjectDataTable
        Get
            Return Me.tabledtRetrieveReportRekapProject
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtRetrieveReportRekapProgressProjectPerSPK() As dtRetrieveReportRekapProgressProjectPerSPKDataTable
        Get
            Return Me.tabledtRetrieveReportRekapProgressProjectPerSPK
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_getPembelianItem() As sp_getPembelianItemDataTable
        Get
            Return Me.tablesp_getPembelianItem
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtPOPendingBasedOnTerimaBarang() As dtPOPendingBasedOnTerimaBarangDataTable
        Get
            Return Me.tabledtPOPendingBasedOnTerimaBarang
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_GetCustomerReceivableAging() As sp_GetCustomerReceivableAgingDataTable
        Get
            Return Me.tablesp_GetCustomerReceivableAging
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtRetrieveReportFormPenawaranMarketingHdr() As dtRetrieveReportFormPenawaranMarketingHdrDataTable
        Get
            Return Me.tabledtRetrieveReportFormPenawaranMarketingHdr
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtRetrieveReportFormPenawaranMarketingDtl() As dtRetrieveReportFormPenawaranMarketingDtlDataTable
        Get
            Return Me.tabledtRetrieveReportFormPenawaranMarketingDtl
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtRetrieveReportFormPenawaranMarketingJasa() As dtRetrieveReportFormPenawaranMarketingJasaDataTable
        Get
            Return Me.tabledtRetrieveReportFormPenawaranMarketingJasa
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtPersediaanBarang() As dtPersediaanBarangDataTable
        Get
            Return Me.tabledtPersediaanBarang
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtPenjualanTokoPerBarangDaily() As dtPenjualanTokoPerBarangDailyDataTable
        Get
            Return Me.tabledtPenjualanTokoPerBarangDaily
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtPenjualanTokoPerBarangMonthly() As dtPenjualanTokoPerBarangMonthlyDataTable
        Get
            Return Me.tabledtPenjualanTokoPerBarangMonthly
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtPenjualanTokoPerCustomerDaily() As dtPenjualanTokoPerCustomerDailyDataTable
        Get
            Return Me.tabledtPenjualanTokoPerCustomerDaily
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtPenjualanTokoPerCustomerMonthly() As dtPenjualanTokoPerCustomerMonthlyDataTable
        Get
            Return Me.tabledtPenjualanTokoPerCustomerMonthly
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtPenjualanInstalasiDaily() As dtPenjualanInstalasiDailyDataTable
        Get
            Return Me.tabledtPenjualanInstalasiDaily
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtPenjualanInstalasiMonthly() As dtPenjualanInstalasiMonthlyDataTable
        Get
            Return Me.tabledtPenjualanInstalasiMonthly
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsReport = CType(MyBase.Clone,dsReport)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("dtReportQuestionnaire")) Is Nothing) Then
                MyBase.Tables.Add(New dtReportQuestionnaireDataTable(ds.Tables("dtReportQuestionnaire")))
            End If
            If (Not (ds.Tables("dtReportOrderPabrikasi")) Is Nothing) Then
                MyBase.Tables.Add(New dtReportOrderPabrikasiDataTable(ds.Tables("dtReportOrderPabrikasi")))
            End If
            If (Not (ds.Tables("dtRetrieve_Report_ProspekOrder")) Is Nothing) Then
                MyBase.Tables.Add(New dtRetrieve_Report_ProspekOrderDataTable(ds.Tables("dtRetrieve_Report_ProspekOrder")))
            End If
            If (Not (ds.Tables("dtManifoldData")) Is Nothing) Then
                MyBase.Tables.Add(New dtManifoldDataDataTable(ds.Tables("dtManifoldData")))
            End If
            If (Not (ds.Tables("dtPipeToKitchen")) Is Nothing) Then
                MyBase.Tables.Add(New dtPipeToKitchenDataTable(ds.Tables("dtPipeToKitchen")))
            End If
            If (Not (ds.Tables("dtSupportingMaterial")) Is Nothing) Then
                MyBase.Tables.Add(New dtSupportingMaterialDataTable(ds.Tables("dtSupportingMaterial")))
            End If
            If (Not (ds.Tables("dtTitikApi")) Is Nothing) Then
                MyBase.Tables.Add(New dtTitikApiDataTable(ds.Tables("dtTitikApi")))
            End If
            If (Not (ds.Tables("Trans_MoU")) Is Nothing) Then
                MyBase.Tables.Add(New Trans_MoUDataTable(ds.Tables("Trans_MoU")))
            End If
            If (Not (ds.Tables("sp_retrieve_DPPbyID")) Is Nothing) Then
                MyBase.Tables.Add(New sp_retrieve_DPPbyIDDataTable(ds.Tables("sp_retrieve_DPPbyID")))
            End If
            If (Not (ds.Tables("dtInvoicePiutang")) Is Nothing) Then
                MyBase.Tables.Add(New dtInvoicePiutangDataTable(ds.Tables("dtInvoicePiutang")))
            End If
            If (Not (ds.Tables("dtDaftarPelunasanHutang")) Is Nothing) Then
                MyBase.Tables.Add(New dtDaftarPelunasanHutangDataTable(ds.Tables("dtDaftarPelunasanHutang")))
            End If
            If (Not (ds.Tables("dtGLDetail")) Is Nothing) Then
                MyBase.Tables.Add(New dtGLDetailDataTable(ds.Tables("dtGLDetail")))
            End If
            If (Not (ds.Tables("dtReportPO")) Is Nothing) Then
                MyBase.Tables.Add(New dtReportPODataTable(ds.Tables("dtReportPO")))
            End If
            If (Not (ds.Tables("dtPembayaranKartuHutangDS")) Is Nothing) Then
                MyBase.Tables.Add(New dtPembayaranKartuHutangDSDataTable(ds.Tables("dtPembayaranKartuHutangDS")))
            End If
            If (Not (ds.Tables("dtReportOrderMaintenance")) Is Nothing) Then
                MyBase.Tables.Add(New dtReportOrderMaintenanceDataTable(ds.Tables("dtReportOrderMaintenance")))
            End If
            If (Not (ds.Tables("dtReportBPB")) Is Nothing) Then
                MyBase.Tables.Add(New dtReportBPBDataTable(ds.Tables("dtReportBPB")))
            End If
            If (Not (ds.Tables("dtRetrieveReportRekapPemakaianBahanPerSPK")) Is Nothing) Then
                MyBase.Tables.Add(New dtRetrieveReportRekapPemakaianBahanPerSPKDataTable(ds.Tables("dtRetrieveReportRekapPemakaianBahanPerSPK")))
            End If
            If (Not (ds.Tables("dtRetrieveReportRekapPemakaianBahanPerProject")) Is Nothing) Then
                MyBase.Tables.Add(New dtRetrieveReportRekapPemakaianBahanPerProjectDataTable(ds.Tables("dtRetrieveReportRekapPemakaianBahanPerProject")))
            End If
            If (Not (ds.Tables("dtPOItemByPONo")) Is Nothing) Then
                MyBase.Tables.Add(New dtPOItemByPONoDataTable(ds.Tables("dtPOItemByPONo")))
            End If
            If (Not (ds.Tables("dtPOJasaByPONo")) Is Nothing) Then
                MyBase.Tables.Add(New dtPOJasaByPONoDataTable(ds.Tables("dtPOJasaByPONo")))
            End If
            If (Not (ds.Tables("dtRetrieveReportSPKForm")) Is Nothing) Then
                MyBase.Tables.Add(New dtRetrieveReportSPKFormDataTable(ds.Tables("dtRetrieveReportSPKForm")))
            End If
            If (Not (ds.Tables("dtRetrieveReportProgressProjectPerSPK")) Is Nothing) Then
                MyBase.Tables.Add(New dtRetrieveReportProgressProjectPerSPKDataTable(ds.Tables("dtRetrieveReportProgressProjectPerSPK")))
            End If
            If (Not (ds.Tables("dtRetrieveReportRekapProject")) Is Nothing) Then
                MyBase.Tables.Add(New dtRetrieveReportRekapProjectDataTable(ds.Tables("dtRetrieveReportRekapProject")))
            End If
            If (Not (ds.Tables("dtRetrieveReportRekapProgressProjectPerSPK")) Is Nothing) Then
                MyBase.Tables.Add(New dtRetrieveReportRekapProgressProjectPerSPKDataTable(ds.Tables("dtRetrieveReportRekapProgressProjectPerSPK")))
            End If
            If (Not (ds.Tables("sp_getPembelianItem")) Is Nothing) Then
                MyBase.Tables.Add(New sp_getPembelianItemDataTable(ds.Tables("sp_getPembelianItem")))
            End If
            If (Not (ds.Tables("dtPOPendingBasedOnTerimaBarang")) Is Nothing) Then
                MyBase.Tables.Add(New dtPOPendingBasedOnTerimaBarangDataTable(ds.Tables("dtPOPendingBasedOnTerimaBarang")))
            End If
            If (Not (ds.Tables("sp_GetCustomerReceivableAging")) Is Nothing) Then
                MyBase.Tables.Add(New sp_GetCustomerReceivableAgingDataTable(ds.Tables("sp_GetCustomerReceivableAging")))
            End If
            If (Not (ds.Tables("dtRetrieveReportFormPenawaranMarketingHdr")) Is Nothing) Then
                MyBase.Tables.Add(New dtRetrieveReportFormPenawaranMarketingHdrDataTable(ds.Tables("dtRetrieveReportFormPenawaranMarketingHdr")))
            End If
            If (Not (ds.Tables("dtRetrieveReportFormPenawaranMarketingDtl")) Is Nothing) Then
                MyBase.Tables.Add(New dtRetrieveReportFormPenawaranMarketingDtlDataTable(ds.Tables("dtRetrieveReportFormPenawaranMarketingDtl")))
            End If
            If (Not (ds.Tables("dtRetrieveReportFormPenawaranMarketingJasa")) Is Nothing) Then
                MyBase.Tables.Add(New dtRetrieveReportFormPenawaranMarketingJasaDataTable(ds.Tables("dtRetrieveReportFormPenawaranMarketingJasa")))
            End If
            If (Not (ds.Tables("dtPersediaanBarang")) Is Nothing) Then
                MyBase.Tables.Add(New dtPersediaanBarangDataTable(ds.Tables("dtPersediaanBarang")))
            End If
            If (Not (ds.Tables("dtPenjualanTokoPerBarangDaily")) Is Nothing) Then
                MyBase.Tables.Add(New dtPenjualanTokoPerBarangDailyDataTable(ds.Tables("dtPenjualanTokoPerBarangDaily")))
            End If
            If (Not (ds.Tables("dtPenjualanTokoPerBarangMonthly")) Is Nothing) Then
                MyBase.Tables.Add(New dtPenjualanTokoPerBarangMonthlyDataTable(ds.Tables("dtPenjualanTokoPerBarangMonthly")))
            End If
            If (Not (ds.Tables("dtPenjualanTokoPerCustomerDaily")) Is Nothing) Then
                MyBase.Tables.Add(New dtPenjualanTokoPerCustomerDailyDataTable(ds.Tables("dtPenjualanTokoPerCustomerDaily")))
            End If
            If (Not (ds.Tables("dtPenjualanTokoPerCustomerMonthly")) Is Nothing) Then
                MyBase.Tables.Add(New dtPenjualanTokoPerCustomerMonthlyDataTable(ds.Tables("dtPenjualanTokoPerCustomerMonthly")))
            End If
            If (Not (ds.Tables("dtPenjualanInstalasiDaily")) Is Nothing) Then
                MyBase.Tables.Add(New dtPenjualanInstalasiDailyDataTable(ds.Tables("dtPenjualanInstalasiDaily")))
            End If
            If (Not (ds.Tables("dtPenjualanInstalasiMonthly")) Is Nothing) Then
                MyBase.Tables.Add(New dtPenjualanInstalasiMonthlyDataTable(ds.Tables("dtPenjualanInstalasiMonthly")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tabledtReportQuestionnaire = CType(MyBase.Tables("dtReportQuestionnaire"),dtReportQuestionnaireDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtReportQuestionnaire) Is Nothing) Then
                Me.tabledtReportQuestionnaire.InitVars
            End If
        End If
        Me.tabledtReportOrderPabrikasi = CType(MyBase.Tables("dtReportOrderPabrikasi"),dtReportOrderPabrikasiDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtReportOrderPabrikasi) Is Nothing) Then
                Me.tabledtReportOrderPabrikasi.InitVars
            End If
        End If
        Me.tabledtRetrieve_Report_ProspekOrder = CType(MyBase.Tables("dtRetrieve_Report_ProspekOrder"),dtRetrieve_Report_ProspekOrderDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtRetrieve_Report_ProspekOrder) Is Nothing) Then
                Me.tabledtRetrieve_Report_ProspekOrder.InitVars
            End If
        End If
        Me.tabledtManifoldData = CType(MyBase.Tables("dtManifoldData"),dtManifoldDataDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtManifoldData) Is Nothing) Then
                Me.tabledtManifoldData.InitVars
            End If
        End If
        Me.tabledtPipeToKitchen = CType(MyBase.Tables("dtPipeToKitchen"),dtPipeToKitchenDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtPipeToKitchen) Is Nothing) Then
                Me.tabledtPipeToKitchen.InitVars
            End If
        End If
        Me.tabledtSupportingMaterial = CType(MyBase.Tables("dtSupportingMaterial"),dtSupportingMaterialDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtSupportingMaterial) Is Nothing) Then
                Me.tabledtSupportingMaterial.InitVars
            End If
        End If
        Me.tabledtTitikApi = CType(MyBase.Tables("dtTitikApi"),dtTitikApiDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtTitikApi) Is Nothing) Then
                Me.tabledtTitikApi.InitVars
            End If
        End If
        Me.tableTrans_MoU = CType(MyBase.Tables("Trans_MoU"),Trans_MoUDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTrans_MoU) Is Nothing) Then
                Me.tableTrans_MoU.InitVars
            End If
        End If
        Me.tablesp_retrieve_DPPbyID = CType(MyBase.Tables("sp_retrieve_DPPbyID"),sp_retrieve_DPPbyIDDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_retrieve_DPPbyID) Is Nothing) Then
                Me.tablesp_retrieve_DPPbyID.InitVars
            End If
        End If
        Me.tabledtInvoicePiutang = CType(MyBase.Tables("dtInvoicePiutang"),dtInvoicePiutangDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtInvoicePiutang) Is Nothing) Then
                Me.tabledtInvoicePiutang.InitVars
            End If
        End If
        Me.tabledtDaftarPelunasanHutang = CType(MyBase.Tables("dtDaftarPelunasanHutang"),dtDaftarPelunasanHutangDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtDaftarPelunasanHutang) Is Nothing) Then
                Me.tabledtDaftarPelunasanHutang.InitVars
            End If
        End If
        Me.tabledtGLDetail = CType(MyBase.Tables("dtGLDetail"),dtGLDetailDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtGLDetail) Is Nothing) Then
                Me.tabledtGLDetail.InitVars
            End If
        End If
        Me.tabledtReportPO = CType(MyBase.Tables("dtReportPO"),dtReportPODataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtReportPO) Is Nothing) Then
                Me.tabledtReportPO.InitVars
            End If
        End If
        Me.tabledtPembayaranKartuHutangDS = CType(MyBase.Tables("dtPembayaranKartuHutangDS"),dtPembayaranKartuHutangDSDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtPembayaranKartuHutangDS) Is Nothing) Then
                Me.tabledtPembayaranKartuHutangDS.InitVars
            End If
        End If
        Me.tabledtReportOrderMaintenance = CType(MyBase.Tables("dtReportOrderMaintenance"),dtReportOrderMaintenanceDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtReportOrderMaintenance) Is Nothing) Then
                Me.tabledtReportOrderMaintenance.InitVars
            End If
        End If
        Me.tabledtReportBPB = CType(MyBase.Tables("dtReportBPB"),dtReportBPBDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtReportBPB) Is Nothing) Then
                Me.tabledtReportBPB.InitVars
            End If
        End If
        Me.tabledtRetrieveReportRekapPemakaianBahanPerSPK = CType(MyBase.Tables("dtRetrieveReportRekapPemakaianBahanPerSPK"),dtRetrieveReportRekapPemakaianBahanPerSPKDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtRetrieveReportRekapPemakaianBahanPerSPK) Is Nothing) Then
                Me.tabledtRetrieveReportRekapPemakaianBahanPerSPK.InitVars
            End If
        End If
        Me.tabledtRetrieveReportRekapPemakaianBahanPerProject = CType(MyBase.Tables("dtRetrieveReportRekapPemakaianBahanPerProject"),dtRetrieveReportRekapPemakaianBahanPerProjectDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtRetrieveReportRekapPemakaianBahanPerProject) Is Nothing) Then
                Me.tabledtRetrieveReportRekapPemakaianBahanPerProject.InitVars
            End If
        End If
        Me.tabledtPOItemByPONo = CType(MyBase.Tables("dtPOItemByPONo"),dtPOItemByPONoDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtPOItemByPONo) Is Nothing) Then
                Me.tabledtPOItemByPONo.InitVars
            End If
        End If
        Me.tabledtPOJasaByPONo = CType(MyBase.Tables("dtPOJasaByPONo"),dtPOJasaByPONoDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtPOJasaByPONo) Is Nothing) Then
                Me.tabledtPOJasaByPONo.InitVars
            End If
        End If
        Me.tabledtRetrieveReportSPKForm = CType(MyBase.Tables("dtRetrieveReportSPKForm"),dtRetrieveReportSPKFormDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtRetrieveReportSPKForm) Is Nothing) Then
                Me.tabledtRetrieveReportSPKForm.InitVars
            End If
        End If
        Me.tabledtRetrieveReportProgressProjectPerSPK = CType(MyBase.Tables("dtRetrieveReportProgressProjectPerSPK"),dtRetrieveReportProgressProjectPerSPKDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtRetrieveReportProgressProjectPerSPK) Is Nothing) Then
                Me.tabledtRetrieveReportProgressProjectPerSPK.InitVars
            End If
        End If
        Me.tabledtRetrieveReportRekapProject = CType(MyBase.Tables("dtRetrieveReportRekapProject"),dtRetrieveReportRekapProjectDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtRetrieveReportRekapProject) Is Nothing) Then
                Me.tabledtRetrieveReportRekapProject.InitVars
            End If
        End If
        Me.tabledtRetrieveReportRekapProgressProjectPerSPK = CType(MyBase.Tables("dtRetrieveReportRekapProgressProjectPerSPK"),dtRetrieveReportRekapProgressProjectPerSPKDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtRetrieveReportRekapProgressProjectPerSPK) Is Nothing) Then
                Me.tabledtRetrieveReportRekapProgressProjectPerSPK.InitVars
            End If
        End If
        Me.tablesp_getPembelianItem = CType(MyBase.Tables("sp_getPembelianItem"),sp_getPembelianItemDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_getPembelianItem) Is Nothing) Then
                Me.tablesp_getPembelianItem.InitVars
            End If
        End If
        Me.tabledtPOPendingBasedOnTerimaBarang = CType(MyBase.Tables("dtPOPendingBasedOnTerimaBarang"),dtPOPendingBasedOnTerimaBarangDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtPOPendingBasedOnTerimaBarang) Is Nothing) Then
                Me.tabledtPOPendingBasedOnTerimaBarang.InitVars
            End If
        End If
        Me.tablesp_GetCustomerReceivableAging = CType(MyBase.Tables("sp_GetCustomerReceivableAging"),sp_GetCustomerReceivableAgingDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_GetCustomerReceivableAging) Is Nothing) Then
                Me.tablesp_GetCustomerReceivableAging.InitVars
            End If
        End If
        Me.tabledtRetrieveReportFormPenawaranMarketingHdr = CType(MyBase.Tables("dtRetrieveReportFormPenawaranMarketingHdr"),dtRetrieveReportFormPenawaranMarketingHdrDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtRetrieveReportFormPenawaranMarketingHdr) Is Nothing) Then
                Me.tabledtRetrieveReportFormPenawaranMarketingHdr.InitVars
            End If
        End If
        Me.tabledtRetrieveReportFormPenawaranMarketingDtl = CType(MyBase.Tables("dtRetrieveReportFormPenawaranMarketingDtl"),dtRetrieveReportFormPenawaranMarketingDtlDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtRetrieveReportFormPenawaranMarketingDtl) Is Nothing) Then
                Me.tabledtRetrieveReportFormPenawaranMarketingDtl.InitVars
            End If
        End If
        Me.tabledtRetrieveReportFormPenawaranMarketingJasa = CType(MyBase.Tables("dtRetrieveReportFormPenawaranMarketingJasa"),dtRetrieveReportFormPenawaranMarketingJasaDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtRetrieveReportFormPenawaranMarketingJasa) Is Nothing) Then
                Me.tabledtRetrieveReportFormPenawaranMarketingJasa.InitVars
            End If
        End If
        Me.tabledtPersediaanBarang = CType(MyBase.Tables("dtPersediaanBarang"),dtPersediaanBarangDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtPersediaanBarang) Is Nothing) Then
                Me.tabledtPersediaanBarang.InitVars
            End If
        End If
        Me.tabledtPenjualanTokoPerBarangDaily = CType(MyBase.Tables("dtPenjualanTokoPerBarangDaily"),dtPenjualanTokoPerBarangDailyDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtPenjualanTokoPerBarangDaily) Is Nothing) Then
                Me.tabledtPenjualanTokoPerBarangDaily.InitVars
            End If
        End If
        Me.tabledtPenjualanTokoPerBarangMonthly = CType(MyBase.Tables("dtPenjualanTokoPerBarangMonthly"),dtPenjualanTokoPerBarangMonthlyDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtPenjualanTokoPerBarangMonthly) Is Nothing) Then
                Me.tabledtPenjualanTokoPerBarangMonthly.InitVars
            End If
        End If
        Me.tabledtPenjualanTokoPerCustomerDaily = CType(MyBase.Tables("dtPenjualanTokoPerCustomerDaily"),dtPenjualanTokoPerCustomerDailyDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtPenjualanTokoPerCustomerDaily) Is Nothing) Then
                Me.tabledtPenjualanTokoPerCustomerDaily.InitVars
            End If
        End If
        Me.tabledtPenjualanTokoPerCustomerMonthly = CType(MyBase.Tables("dtPenjualanTokoPerCustomerMonthly"),dtPenjualanTokoPerCustomerMonthlyDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtPenjualanTokoPerCustomerMonthly) Is Nothing) Then
                Me.tabledtPenjualanTokoPerCustomerMonthly.InitVars
            End If
        End If
        Me.tabledtPenjualanInstalasiDaily = CType(MyBase.Tables("dtPenjualanInstalasiDaily"),dtPenjualanInstalasiDailyDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtPenjualanInstalasiDaily) Is Nothing) Then
                Me.tabledtPenjualanInstalasiDaily.InitVars
            End If
        End If
        Me.tabledtPenjualanInstalasiMonthly = CType(MyBase.Tables("dtPenjualanInstalasiMonthly"),dtPenjualanInstalasiMonthlyDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtPenjualanInstalasiMonthly) Is Nothing) Then
                Me.tabledtPenjualanInstalasiMonthly.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsReport"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsReport.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tabledtReportQuestionnaire = New dtReportQuestionnaireDataTable
        MyBase.Tables.Add(Me.tabledtReportQuestionnaire)
        Me.tabledtReportOrderPabrikasi = New dtReportOrderPabrikasiDataTable
        MyBase.Tables.Add(Me.tabledtReportOrderPabrikasi)
        Me.tabledtRetrieve_Report_ProspekOrder = New dtRetrieve_Report_ProspekOrderDataTable
        MyBase.Tables.Add(Me.tabledtRetrieve_Report_ProspekOrder)
        Me.tabledtManifoldData = New dtManifoldDataDataTable
        MyBase.Tables.Add(Me.tabledtManifoldData)
        Me.tabledtPipeToKitchen = New dtPipeToKitchenDataTable
        MyBase.Tables.Add(Me.tabledtPipeToKitchen)
        Me.tabledtSupportingMaterial = New dtSupportingMaterialDataTable
        MyBase.Tables.Add(Me.tabledtSupportingMaterial)
        Me.tabledtTitikApi = New dtTitikApiDataTable
        MyBase.Tables.Add(Me.tabledtTitikApi)
        Me.tableTrans_MoU = New Trans_MoUDataTable
        MyBase.Tables.Add(Me.tableTrans_MoU)
        Me.tablesp_retrieve_DPPbyID = New sp_retrieve_DPPbyIDDataTable
        MyBase.Tables.Add(Me.tablesp_retrieve_DPPbyID)
        Me.tabledtInvoicePiutang = New dtInvoicePiutangDataTable
        MyBase.Tables.Add(Me.tabledtInvoicePiutang)
        Me.tabledtDaftarPelunasanHutang = New dtDaftarPelunasanHutangDataTable
        MyBase.Tables.Add(Me.tabledtDaftarPelunasanHutang)
        Me.tabledtGLDetail = New dtGLDetailDataTable
        MyBase.Tables.Add(Me.tabledtGLDetail)
        Me.tabledtReportPO = New dtReportPODataTable
        MyBase.Tables.Add(Me.tabledtReportPO)
        Me.tabledtPembayaranKartuHutangDS = New dtPembayaranKartuHutangDSDataTable
        MyBase.Tables.Add(Me.tabledtPembayaranKartuHutangDS)
        Me.tabledtReportOrderMaintenance = New dtReportOrderMaintenanceDataTable
        MyBase.Tables.Add(Me.tabledtReportOrderMaintenance)
        Me.tabledtReportBPB = New dtReportBPBDataTable
        MyBase.Tables.Add(Me.tabledtReportBPB)
        Me.tabledtRetrieveReportRekapPemakaianBahanPerSPK = New dtRetrieveReportRekapPemakaianBahanPerSPKDataTable
        MyBase.Tables.Add(Me.tabledtRetrieveReportRekapPemakaianBahanPerSPK)
        Me.tabledtRetrieveReportRekapPemakaianBahanPerProject = New dtRetrieveReportRekapPemakaianBahanPerProjectDataTable
        MyBase.Tables.Add(Me.tabledtRetrieveReportRekapPemakaianBahanPerProject)
        Me.tabledtPOItemByPONo = New dtPOItemByPONoDataTable
        MyBase.Tables.Add(Me.tabledtPOItemByPONo)
        Me.tabledtPOJasaByPONo = New dtPOJasaByPONoDataTable
        MyBase.Tables.Add(Me.tabledtPOJasaByPONo)
        Me.tabledtRetrieveReportSPKForm = New dtRetrieveReportSPKFormDataTable
        MyBase.Tables.Add(Me.tabledtRetrieveReportSPKForm)
        Me.tabledtRetrieveReportProgressProjectPerSPK = New dtRetrieveReportProgressProjectPerSPKDataTable
        MyBase.Tables.Add(Me.tabledtRetrieveReportProgressProjectPerSPK)
        Me.tabledtRetrieveReportRekapProject = New dtRetrieveReportRekapProjectDataTable
        MyBase.Tables.Add(Me.tabledtRetrieveReportRekapProject)
        Me.tabledtRetrieveReportRekapProgressProjectPerSPK = New dtRetrieveReportRekapProgressProjectPerSPKDataTable
        MyBase.Tables.Add(Me.tabledtRetrieveReportRekapProgressProjectPerSPK)
        Me.tablesp_getPembelianItem = New sp_getPembelianItemDataTable
        MyBase.Tables.Add(Me.tablesp_getPembelianItem)
        Me.tabledtPOPendingBasedOnTerimaBarang = New dtPOPendingBasedOnTerimaBarangDataTable
        MyBase.Tables.Add(Me.tabledtPOPendingBasedOnTerimaBarang)
        Me.tablesp_GetCustomerReceivableAging = New sp_GetCustomerReceivableAgingDataTable
        MyBase.Tables.Add(Me.tablesp_GetCustomerReceivableAging)
        Me.tabledtRetrieveReportFormPenawaranMarketingHdr = New dtRetrieveReportFormPenawaranMarketingHdrDataTable
        MyBase.Tables.Add(Me.tabledtRetrieveReportFormPenawaranMarketingHdr)
        Me.tabledtRetrieveReportFormPenawaranMarketingDtl = New dtRetrieveReportFormPenawaranMarketingDtlDataTable
        MyBase.Tables.Add(Me.tabledtRetrieveReportFormPenawaranMarketingDtl)
        Me.tabledtRetrieveReportFormPenawaranMarketingJasa = New dtRetrieveReportFormPenawaranMarketingJasaDataTable
        MyBase.Tables.Add(Me.tabledtRetrieveReportFormPenawaranMarketingJasa)
        Me.tabledtPersediaanBarang = New dtPersediaanBarangDataTable
        MyBase.Tables.Add(Me.tabledtPersediaanBarang)
        Me.tabledtPenjualanTokoPerBarangDaily = New dtPenjualanTokoPerBarangDailyDataTable
        MyBase.Tables.Add(Me.tabledtPenjualanTokoPerBarangDaily)
        Me.tabledtPenjualanTokoPerBarangMonthly = New dtPenjualanTokoPerBarangMonthlyDataTable
        MyBase.Tables.Add(Me.tabledtPenjualanTokoPerBarangMonthly)
        Me.tabledtPenjualanTokoPerCustomerDaily = New dtPenjualanTokoPerCustomerDailyDataTable
        MyBase.Tables.Add(Me.tabledtPenjualanTokoPerCustomerDaily)
        Me.tabledtPenjualanTokoPerCustomerMonthly = New dtPenjualanTokoPerCustomerMonthlyDataTable
        MyBase.Tables.Add(Me.tabledtPenjualanTokoPerCustomerMonthly)
        Me.tabledtPenjualanInstalasiDaily = New dtPenjualanInstalasiDailyDataTable
        MyBase.Tables.Add(Me.tabledtPenjualanInstalasiDaily)
        Me.tabledtPenjualanInstalasiMonthly = New dtPenjualanInstalasiMonthlyDataTable
        MyBase.Tables.Add(Me.tabledtPenjualanInstalasiMonthly)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtReportQuestionnaire() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtReportOrderPabrikasi() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtRetrieve_Report_ProspekOrder() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtManifoldData() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtPipeToKitchen() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtSupportingMaterial() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtTitikApi() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTrans_MoU() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_retrieve_DPPbyID() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtInvoicePiutang() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtDaftarPelunasanHutang() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtGLDetail() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtReportPO() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtPembayaranKartuHutangDS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtReportOrderMaintenance() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtReportBPB() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtRetrieveReportRekapPemakaianBahanPerSPK() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtRetrieveReportRekapPemakaianBahanPerProject() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtPOItemByPONo() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtPOJasaByPONo() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtRetrieveReportSPKForm() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtRetrieveReportProgressProjectPerSPK() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtRetrieveReportRekapProject() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtRetrieveReportRekapProgressProjectPerSPK() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_getPembelianItem() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtPOPendingBasedOnTerimaBarang() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_GetCustomerReceivableAging() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtRetrieveReportFormPenawaranMarketingHdr() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtRetrieveReportFormPenawaranMarketingDtl() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtRetrieveReportFormPenawaranMarketingJasa() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtPersediaanBarang() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtPenjualanTokoPerBarangDaily() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtPenjualanTokoPerBarangMonthly() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtPenjualanTokoPerCustomerDaily() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtPenjualanTokoPerCustomerMonthly() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtPenjualanInstalasiDaily() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtPenjualanInstalasiMonthly() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsReport = New dsReport
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub dtReportQuestionnaireRowChangeEventHandler(ByVal sender As Object, ByVal e As dtReportQuestionnaireRowChangeEvent)
    
    Public Delegate Sub dtReportOrderPabrikasiRowChangeEventHandler(ByVal sender As Object, ByVal e As dtReportOrderPabrikasiRowChangeEvent)
    
    Public Delegate Sub dtRetrieve_Report_ProspekOrderRowChangeEventHandler(ByVal sender As Object, ByVal e As dtRetrieve_Report_ProspekOrderRowChangeEvent)
    
    Public Delegate Sub dtManifoldDataRowChangeEventHandler(ByVal sender As Object, ByVal e As dtManifoldDataRowChangeEvent)
    
    Public Delegate Sub dtPipeToKitchenRowChangeEventHandler(ByVal sender As Object, ByVal e As dtPipeToKitchenRowChangeEvent)
    
    Public Delegate Sub dtSupportingMaterialRowChangeEventHandler(ByVal sender As Object, ByVal e As dtSupportingMaterialRowChangeEvent)
    
    Public Delegate Sub dtTitikApiRowChangeEventHandler(ByVal sender As Object, ByVal e As dtTitikApiRowChangeEvent)
    
    Public Delegate Sub Trans_MoURowChangeEventHandler(ByVal sender As Object, ByVal e As Trans_MoURowChangeEvent)
    
    Public Delegate Sub sp_retrieve_DPPbyIDRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_retrieve_DPPbyIDRowChangeEvent)
    
    Public Delegate Sub dtInvoicePiutangRowChangeEventHandler(ByVal sender As Object, ByVal e As dtInvoicePiutangRowChangeEvent)
    
    Public Delegate Sub dtDaftarPelunasanHutangRowChangeEventHandler(ByVal sender As Object, ByVal e As dtDaftarPelunasanHutangRowChangeEvent)
    
    Public Delegate Sub dtGLDetailRowChangeEventHandler(ByVal sender As Object, ByVal e As dtGLDetailRowChangeEvent)
    
    Public Delegate Sub dtReportPORowChangeEventHandler(ByVal sender As Object, ByVal e As dtReportPORowChangeEvent)
    
    Public Delegate Sub dtPembayaranKartuHutangDSRowChangeEventHandler(ByVal sender As Object, ByVal e As dtPembayaranKartuHutangDSRowChangeEvent)
    
    Public Delegate Sub dtReportOrderMaintenanceRowChangeEventHandler(ByVal sender As Object, ByVal e As dtReportOrderMaintenanceRowChangeEvent)
    
    Public Delegate Sub dtReportBPBRowChangeEventHandler(ByVal sender As Object, ByVal e As dtReportBPBRowChangeEvent)
    
    Public Delegate Sub dtRetrieveReportRekapPemakaianBahanPerSPKRowChangeEventHandler(ByVal sender As Object, ByVal e As dtRetrieveReportRekapPemakaianBahanPerSPKRowChangeEvent)
    
    Public Delegate Sub dtRetrieveReportRekapPemakaianBahanPerProjectRowChangeEventHandler(ByVal sender As Object, ByVal e As dtRetrieveReportRekapPemakaianBahanPerProjectRowChangeEvent)
    
    Public Delegate Sub dtPOItemByPONoRowChangeEventHandler(ByVal sender As Object, ByVal e As dtPOItemByPONoRowChangeEvent)
    
    Public Delegate Sub dtPOJasaByPONoRowChangeEventHandler(ByVal sender As Object, ByVal e As dtPOJasaByPONoRowChangeEvent)
    
    Public Delegate Sub dtRetrieveReportSPKFormRowChangeEventHandler(ByVal sender As Object, ByVal e As dtRetrieveReportSPKFormRowChangeEvent)
    
    Public Delegate Sub dtRetrieveReportProgressProjectPerSPKRowChangeEventHandler(ByVal sender As Object, ByVal e As dtRetrieveReportProgressProjectPerSPKRowChangeEvent)
    
    Public Delegate Sub dtRetrieveReportRekapProjectRowChangeEventHandler(ByVal sender As Object, ByVal e As dtRetrieveReportRekapProjectRowChangeEvent)
    
    Public Delegate Sub dtRetrieveReportRekapProgressProjectPerSPKRowChangeEventHandler(ByVal sender As Object, ByVal e As dtRetrieveReportRekapProgressProjectPerSPKRowChangeEvent)
    
    Public Delegate Sub sp_getPembelianItemRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_getPembelianItemRowChangeEvent)
    
    Public Delegate Sub dtPOPendingBasedOnTerimaBarangRowChangeEventHandler(ByVal sender As Object, ByVal e As dtPOPendingBasedOnTerimaBarangRowChangeEvent)
    
    Public Delegate Sub sp_GetCustomerReceivableAgingRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_GetCustomerReceivableAgingRowChangeEvent)
    
    Public Delegate Sub dtRetrieveReportFormPenawaranMarketingHdrRowChangeEventHandler(ByVal sender As Object, ByVal e As dtRetrieveReportFormPenawaranMarketingHdrRowChangeEvent)
    
    Public Delegate Sub dtRetrieveReportFormPenawaranMarketingDtlRowChangeEventHandler(ByVal sender As Object, ByVal e As dtRetrieveReportFormPenawaranMarketingDtlRowChangeEvent)
    
    Public Delegate Sub dtRetrieveReportFormPenawaranMarketingJasaRowChangeEventHandler(ByVal sender As Object, ByVal e As dtRetrieveReportFormPenawaranMarketingJasaRowChangeEvent)
    
    Public Delegate Sub dtPersediaanBarangRowChangeEventHandler(ByVal sender As Object, ByVal e As dtPersediaanBarangRowChangeEvent)
    
    Public Delegate Sub dtPenjualanTokoPerBarangDailyRowChangeEventHandler(ByVal sender As Object, ByVal e As dtPenjualanTokoPerBarangDailyRowChangeEvent)
    
    Public Delegate Sub dtPenjualanTokoPerBarangMonthlyRowChangeEventHandler(ByVal sender As Object, ByVal e As dtPenjualanTokoPerBarangMonthlyRowChangeEvent)
    
    Public Delegate Sub dtPenjualanTokoPerCustomerDailyRowChangeEventHandler(ByVal sender As Object, ByVal e As dtPenjualanTokoPerCustomerDailyRowChangeEvent)
    
    Public Delegate Sub dtPenjualanTokoPerCustomerMonthlyRowChangeEventHandler(ByVal sender As Object, ByVal e As dtPenjualanTokoPerCustomerMonthlyRowChangeEvent)
    
    Public Delegate Sub dtPenjualanInstalasiDailyRowChangeEventHandler(ByVal sender As Object, ByVal e As dtPenjualanInstalasiDailyRowChangeEvent)
    
    Public Delegate Sub dtPenjualanInstalasiMonthlyRowChangeEventHandler(ByVal sender As Object, ByVal e As dtPenjualanInstalasiMonthlyRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtReportQuestionnaireDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnQuest_ID As Global.System.Data.DataColumn
        
        Private columnDescription As Global.System.Data.DataColumn
        
        Private columnCategory As Global.System.Data.DataColumn
        
        Private columnNama As Global.System.Data.DataColumn
        
        Private columnContact_Person As Global.System.Data.DataColumn
        
        Private columnRespondent_Name As Global.System.Data.DataColumn
        
        Private columnQuest_Dt As Global.System.Data.DataColumn
        
        Private columnAverageSection1 As Global.System.Data.DataColumn
        
        Private columnAverageSection2 As Global.System.Data.DataColumn
        
        Private columnAverageSection3 As Global.System.Data.DataColumn
        
        Private columnAverageSection4 As Global.System.Data.DataColumn
        
        Private columnAverageSection5 As Global.System.Data.DataColumn
        
        Private columnAverage As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtReportQuestionnaire"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Quest_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQuest_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CategoryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCategory
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NamaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNama
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Contact_PersonColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnContact_Person
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Respondent_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRespondent_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Quest_DtColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQuest_Dt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AverageSection1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAverageSection1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AverageSection2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAverageSection2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AverageSection3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAverageSection3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AverageSection4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAverageSection4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AverageSection5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAverageSection5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AverageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAverage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtReportQuestionnaireRow
            Get
                Return CType(Me.Rows(index),dtReportQuestionnaireRow)
            End Get
        End Property
        
        Public Event dtReportQuestionnaireRowChanging As dtReportQuestionnaireRowChangeEventHandler
        
        Public Event dtReportQuestionnaireRowChanged As dtReportQuestionnaireRowChangeEventHandler
        
        Public Event dtReportQuestionnaireRowDeleting As dtReportQuestionnaireRowChangeEventHandler
        
        Public Event dtReportQuestionnaireRowDeleted As dtReportQuestionnaireRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtReportQuestionnaireRow(ByVal row As dtReportQuestionnaireRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtReportQuestionnaireRow(ByVal Quest_ID As String, ByVal Description As String, ByVal Category As String, ByVal Nama As String, ByVal Contact_Person As String, ByVal Respondent_Name As String, ByVal Quest_Dt As Date, ByVal AverageSection1 As Decimal, ByVal AverageSection2 As Decimal, ByVal AverageSection3 As Decimal, ByVal AverageSection4 As Decimal, ByVal AverageSection5 As Decimal, ByVal Average As Decimal) As dtReportQuestionnaireRow
            Dim rowdtReportQuestionnaireRow As dtReportQuestionnaireRow = CType(Me.NewRow,dtReportQuestionnaireRow)
            Dim columnValuesArray() As Object = New Object() {Quest_ID, Description, Category, Nama, Contact_Person, Respondent_Name, Quest_Dt, AverageSection1, AverageSection2, AverageSection3, AverageSection4, AverageSection5, Average}
            rowdtReportQuestionnaireRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtReportQuestionnaireRow)
            Return rowdtReportQuestionnaireRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByQuest_ID(ByVal Quest_ID As String) As dtReportQuestionnaireRow
            Return CType(Me.Rows.Find(New Object() {Quest_ID}),dtReportQuestionnaireRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtReportQuestionnaireDataTable = CType(MyBase.Clone,dtReportQuestionnaireDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtReportQuestionnaireDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnQuest_ID = MyBase.Columns("Quest_ID")
            Me.columnDescription = MyBase.Columns("Description")
            Me.columnCategory = MyBase.Columns("Category")
            Me.columnNama = MyBase.Columns("Nama")
            Me.columnContact_Person = MyBase.Columns("Contact_Person")
            Me.columnRespondent_Name = MyBase.Columns("Respondent_Name")
            Me.columnQuest_Dt = MyBase.Columns("Quest_Dt")
            Me.columnAverageSection1 = MyBase.Columns("AverageSection1")
            Me.columnAverageSection2 = MyBase.Columns("AverageSection2")
            Me.columnAverageSection3 = MyBase.Columns("AverageSection3")
            Me.columnAverageSection4 = MyBase.Columns("AverageSection4")
            Me.columnAverageSection5 = MyBase.Columns("AverageSection5")
            Me.columnAverage = MyBase.Columns("Average")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnQuest_ID = New Global.System.Data.DataColumn("Quest_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQuest_ID)
            Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescription)
            Me.columnCategory = New Global.System.Data.DataColumn("Category", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCategory)
            Me.columnNama = New Global.System.Data.DataColumn("Nama", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNama)
            Me.columnContact_Person = New Global.System.Data.DataColumn("Contact_Person", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContact_Person)
            Me.columnRespondent_Name = New Global.System.Data.DataColumn("Respondent_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRespondent_Name)
            Me.columnQuest_Dt = New Global.System.Data.DataColumn("Quest_Dt", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQuest_Dt)
            Me.columnAverageSection1 = New Global.System.Data.DataColumn("AverageSection1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAverageSection1)
            Me.columnAverageSection2 = New Global.System.Data.DataColumn("AverageSection2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAverageSection2)
            Me.columnAverageSection3 = New Global.System.Data.DataColumn("AverageSection3", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAverageSection3)
            Me.columnAverageSection4 = New Global.System.Data.DataColumn("AverageSection4", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAverageSection4)
            Me.columnAverageSection5 = New Global.System.Data.DataColumn("AverageSection5", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAverageSection5)
            Me.columnAverage = New Global.System.Data.DataColumn("Average", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAverage)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnQuest_ID}, true))
            Me.columnQuest_ID.AllowDBNull = false
            Me.columnQuest_ID.Unique = true
            Me.columnQuest_ID.MaxLength = 10
            Me.columnDescription.MaxLength = 50
            Me.columnCategory.MaxLength = 20
            Me.columnNama.ReadOnly = true
            Me.columnNama.MaxLength = 100
            Me.columnContact_Person.ReadOnly = true
            Me.columnContact_Person.MaxLength = 100
            Me.columnRespondent_Name.AllowDBNull = false
            Me.columnRespondent_Name.MaxLength = 30
            Me.columnQuest_Dt.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtReportQuestionnaireRow() As dtReportQuestionnaireRow
            Return CType(Me.NewRow,dtReportQuestionnaireRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtReportQuestionnaireRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtReportQuestionnaireRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtReportQuestionnaireRowChangedEvent) Is Nothing) Then
                RaiseEvent dtReportQuestionnaireRowChanged(Me, New dtReportQuestionnaireRowChangeEvent(CType(e.Row,dtReportQuestionnaireRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtReportQuestionnaireRowChangingEvent) Is Nothing) Then
                RaiseEvent dtReportQuestionnaireRowChanging(Me, New dtReportQuestionnaireRowChangeEvent(CType(e.Row,dtReportQuestionnaireRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtReportQuestionnaireRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtReportQuestionnaireRowDeleted(Me, New dtReportQuestionnaireRowChangeEvent(CType(e.Row,dtReportQuestionnaireRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtReportQuestionnaireRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtReportQuestionnaireRowDeleting(Me, New dtReportQuestionnaireRowChangeEvent(CType(e.Row,dtReportQuestionnaireRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtReportQuestionnaireRow(ByVal row As dtReportQuestionnaireRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsReport = New dsReport
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtReportQuestionnaireDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtReportOrderPabrikasiDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnOP_No As Global.System.Data.DataColumn
        
        Private columnOP_Date As Global.System.Data.DataColumn
        
        Private columnItem_ID As Global.System.Data.DataColumn
        
        Private columnItem_Name As Global.System.Data.DataColumn
        
        Private columnQty As Global.System.Data.DataColumn
        
        Private columnST_No As Global.System.Data.DataColumn
        
        Private columnST_Date As Global.System.Data.DataColumn
        
        Private columnQty_Jadi As Global.System.Data.DataColumn
        
        Private columnRemarks As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtReportOrderPabrikasi"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OP_NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOP_No
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OP_DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOP_Date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Item_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItem_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Item_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItem_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ST_NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnST_No
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ST_DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnST_Date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Qty_JadiColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQty_Jadi
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RemarksColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemarks
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtReportOrderPabrikasiRow
            Get
                Return CType(Me.Rows(index),dtReportOrderPabrikasiRow)
            End Get
        End Property
        
        Public Event dtReportOrderPabrikasiRowChanging As dtReportOrderPabrikasiRowChangeEventHandler
        
        Public Event dtReportOrderPabrikasiRowChanged As dtReportOrderPabrikasiRowChangeEventHandler
        
        Public Event dtReportOrderPabrikasiRowDeleting As dtReportOrderPabrikasiRowChangeEventHandler
        
        Public Event dtReportOrderPabrikasiRowDeleted As dtReportOrderPabrikasiRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtReportOrderPabrikasiRow(ByVal row As dtReportOrderPabrikasiRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtReportOrderPabrikasiRow(ByVal OP_No As String, ByVal OP_Date As Date, ByVal Item_ID As String, ByVal Item_Name As String, ByVal Qty As Integer, ByVal ST_No As String, ByVal ST_Date As Date, ByVal Qty_Jadi As Integer, ByVal Remarks As String) As dtReportOrderPabrikasiRow
            Dim rowdtReportOrderPabrikasiRow As dtReportOrderPabrikasiRow = CType(Me.NewRow,dtReportOrderPabrikasiRow)
            Dim columnValuesArray() As Object = New Object() {OP_No, OP_Date, Item_ID, Item_Name, Qty, ST_No, ST_Date, Qty_Jadi, Remarks}
            rowdtReportOrderPabrikasiRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtReportOrderPabrikasiRow)
            Return rowdtReportOrderPabrikasiRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtReportOrderPabrikasiDataTable = CType(MyBase.Clone,dtReportOrderPabrikasiDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtReportOrderPabrikasiDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnOP_No = MyBase.Columns("OP_No")
            Me.columnOP_Date = MyBase.Columns("OP_Date")
            Me.columnItem_ID = MyBase.Columns("Item_ID")
            Me.columnItem_Name = MyBase.Columns("Item_Name")
            Me.columnQty = MyBase.Columns("Qty")
            Me.columnST_No = MyBase.Columns("ST_No")
            Me.columnST_Date = MyBase.Columns("ST_Date")
            Me.columnQty_Jadi = MyBase.Columns("Qty_Jadi")
            Me.columnRemarks = MyBase.Columns("Remarks")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnOP_No = New Global.System.Data.DataColumn("OP_No", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOP_No)
            Me.columnOP_Date = New Global.System.Data.DataColumn("OP_Date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOP_Date)
            Me.columnItem_ID = New Global.System.Data.DataColumn("Item_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItem_ID)
            Me.columnItem_Name = New Global.System.Data.DataColumn("Item_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItem_Name)
            Me.columnQty = New Global.System.Data.DataColumn("Qty", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQty)
            Me.columnST_No = New Global.System.Data.DataColumn("ST_No", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnST_No)
            Me.columnST_Date = New Global.System.Data.DataColumn("ST_Date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnST_Date)
            Me.columnQty_Jadi = New Global.System.Data.DataColumn("Qty_Jadi", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQty_Jadi)
            Me.columnRemarks = New Global.System.Data.DataColumn("Remarks", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemarks)
            Me.columnOP_No.AllowDBNull = false
            Me.columnOP_No.MaxLength = 9
            Me.columnOP_Date.AllowDBNull = false
            Me.columnItem_ID.AllowDBNull = false
            Me.columnItem_ID.MaxLength = 10
            Me.columnItem_Name.MaxLength = 100
            Me.columnQty.AllowDBNull = false
            Me.columnST_No.MaxLength = 9
            Me.columnQty_Jadi.ReadOnly = true
            Me.columnRemarks.MaxLength = 200
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtReportOrderPabrikasiRow() As dtReportOrderPabrikasiRow
            Return CType(Me.NewRow,dtReportOrderPabrikasiRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtReportOrderPabrikasiRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtReportOrderPabrikasiRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtReportOrderPabrikasiRowChangedEvent) Is Nothing) Then
                RaiseEvent dtReportOrderPabrikasiRowChanged(Me, New dtReportOrderPabrikasiRowChangeEvent(CType(e.Row,dtReportOrderPabrikasiRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtReportOrderPabrikasiRowChangingEvent) Is Nothing) Then
                RaiseEvent dtReportOrderPabrikasiRowChanging(Me, New dtReportOrderPabrikasiRowChangeEvent(CType(e.Row,dtReportOrderPabrikasiRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtReportOrderPabrikasiRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtReportOrderPabrikasiRowDeleted(Me, New dtReportOrderPabrikasiRowChangeEvent(CType(e.Row,dtReportOrderPabrikasiRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtReportOrderPabrikasiRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtReportOrderPabrikasiRowDeleting(Me, New dtReportOrderPabrikasiRowChangeEvent(CType(e.Row,dtReportOrderPabrikasiRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtReportOrderPabrikasiRow(ByVal row As dtReportOrderPabrikasiRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsReport = New dsReport
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtReportOrderPabrikasiDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtRetrieve_Report_ProspekOrderDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnSurvey_Date As Global.System.Data.DataColumn
        
        Private columnSurvey_No As Global.System.Data.DataColumn
        
        Private columnNama As Global.System.Data.DataColumn
        
        Private columnPHP_Date As Global.System.Data.DataColumn
        
        Private columnPHP_No As Global.System.Data.DataColumn
        
        Private columnTotal_PHP As Global.System.Data.DataColumn
        
        Private columnPHM_Date As Global.System.Data.DataColumn
        
        Private columnPHM_No As Global.System.Data.DataColumn
        
        Private columnTotal_PHM As Global.System.Data.DataColumn
        
        Private columnSPK_Date As Global.System.Data.DataColumn
        
        Private columnSPK_No As Global.System.Data.DataColumn
        
        Private columnMoU_No As Global.System.Data.DataColumn
        
        Private columnNilai_Project As Global.System.Data.DataColumn
        
        Private columnMarketingName As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtRetrieve_Report_ProspekOrder"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Survey_DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSurvey_Date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Survey_NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSurvey_No
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NamaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNama
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PHP_DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPHP_Date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PHP_NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPHP_No
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Total_PHPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotal_PHP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PHM_DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPHM_Date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PHM_NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPHM_No
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Total_PHMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotal_PHM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SPK_DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSPK_Date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SPK_NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSPK_No
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MoU_NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMoU_No
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Nilai_ProjectColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNilai_Project
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MarketingNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMarketingName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtRetrieve_Report_ProspekOrderRow
            Get
                Return CType(Me.Rows(index),dtRetrieve_Report_ProspekOrderRow)
            End Get
        End Property
        
        Public Event dtRetrieve_Report_ProspekOrderRowChanging As dtRetrieve_Report_ProspekOrderRowChangeEventHandler
        
        Public Event dtRetrieve_Report_ProspekOrderRowChanged As dtRetrieve_Report_ProspekOrderRowChangeEventHandler
        
        Public Event dtRetrieve_Report_ProspekOrderRowDeleting As dtRetrieve_Report_ProspekOrderRowChangeEventHandler
        
        Public Event dtRetrieve_Report_ProspekOrderRowDeleted As dtRetrieve_Report_ProspekOrderRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtRetrieve_Report_ProspekOrderRow(ByVal row As dtRetrieve_Report_ProspekOrderRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtRetrieve_Report_ProspekOrderRow(ByVal Survey_Date As Date, ByVal Survey_No As String, ByVal Nama As String, ByVal PHP_Date As Date, ByVal PHP_No As String, ByVal Total_PHP As Decimal, ByVal PHM_Date As Date, ByVal PHM_No As String, ByVal Total_PHM As Decimal, ByVal SPK_Date As Date, ByVal SPK_No As String, ByVal MoU_No As String, ByVal Nilai_Project As Decimal, ByVal MarketingName As String) As dtRetrieve_Report_ProspekOrderRow
            Dim rowdtRetrieve_Report_ProspekOrderRow As dtRetrieve_Report_ProspekOrderRow = CType(Me.NewRow,dtRetrieve_Report_ProspekOrderRow)
            Dim columnValuesArray() As Object = New Object() {Survey_Date, Survey_No, Nama, PHP_Date, PHP_No, Total_PHP, PHM_Date, PHM_No, Total_PHM, SPK_Date, SPK_No, MoU_No, Nilai_Project, MarketingName}
            rowdtRetrieve_Report_ProspekOrderRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtRetrieve_Report_ProspekOrderRow)
            Return rowdtRetrieve_Report_ProspekOrderRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySurvey_No(ByVal Survey_No As String) As dtRetrieve_Report_ProspekOrderRow
            Return CType(Me.Rows.Find(New Object() {Survey_No}),dtRetrieve_Report_ProspekOrderRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtRetrieve_Report_ProspekOrderDataTable = CType(MyBase.Clone,dtRetrieve_Report_ProspekOrderDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtRetrieve_Report_ProspekOrderDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSurvey_Date = MyBase.Columns("Survey_Date")
            Me.columnSurvey_No = MyBase.Columns("Survey_No")
            Me.columnNama = MyBase.Columns("Nama")
            Me.columnPHP_Date = MyBase.Columns("PHP_Date")
            Me.columnPHP_No = MyBase.Columns("PHP_No")
            Me.columnTotal_PHP = MyBase.Columns("Total_PHP")
            Me.columnPHM_Date = MyBase.Columns("PHM_Date")
            Me.columnPHM_No = MyBase.Columns("PHM_No")
            Me.columnTotal_PHM = MyBase.Columns("Total_PHM")
            Me.columnSPK_Date = MyBase.Columns("SPK_Date")
            Me.columnSPK_No = MyBase.Columns("SPK_No")
            Me.columnMoU_No = MyBase.Columns("MoU_No")
            Me.columnNilai_Project = MyBase.Columns("Nilai_Project")
            Me.columnMarketingName = MyBase.Columns("MarketingName")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSurvey_Date = New Global.System.Data.DataColumn("Survey_Date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSurvey_Date)
            Me.columnSurvey_No = New Global.System.Data.DataColumn("Survey_No", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSurvey_No)
            Me.columnNama = New Global.System.Data.DataColumn("Nama", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNama)
            Me.columnPHP_Date = New Global.System.Data.DataColumn("PHP_Date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPHP_Date)
            Me.columnPHP_No = New Global.System.Data.DataColumn("PHP_No", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPHP_No)
            Me.columnTotal_PHP = New Global.System.Data.DataColumn("Total_PHP", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotal_PHP)
            Me.columnPHM_Date = New Global.System.Data.DataColumn("PHM_Date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPHM_Date)
            Me.columnPHM_No = New Global.System.Data.DataColumn("PHM_No", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPHM_No)
            Me.columnTotal_PHM = New Global.System.Data.DataColumn("Total_PHM", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotal_PHM)
            Me.columnSPK_Date = New Global.System.Data.DataColumn("SPK_Date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPK_Date)
            Me.columnSPK_No = New Global.System.Data.DataColumn("SPK_No", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPK_No)
            Me.columnMoU_No = New Global.System.Data.DataColumn("MoU_No", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMoU_No)
            Me.columnNilai_Project = New Global.System.Data.DataColumn("Nilai_Project", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNilai_Project)
            Me.columnMarketingName = New Global.System.Data.DataColumn("MarketingName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMarketingName)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSurvey_No}, true))
            Me.columnSurvey_Date.AllowDBNull = false
            Me.columnSurvey_No.AllowDBNull = false
            Me.columnSurvey_No.Unique = true
            Me.columnSurvey_No.MaxLength = 9
            Me.columnNama.ReadOnly = true
            Me.columnNama.MaxLength = 100
            Me.columnPHP_Date.ReadOnly = true
            Me.columnPHP_No.ReadOnly = true
            Me.columnPHP_No.MaxLength = 9
            Me.columnTotal_PHP.ReadOnly = true
            Me.columnPHM_Date.ReadOnly = true
            Me.columnPHM_No.ReadOnly = true
            Me.columnPHM_No.MaxLength = 9
            Me.columnTotal_PHM.ReadOnly = true
            Me.columnSPK_Date.ReadOnly = true
            Me.columnSPK_No.ReadOnly = true
            Me.columnSPK_No.MaxLength = 9
            Me.columnMoU_No.ReadOnly = true
            Me.columnMoU_No.MaxLength = 50
            Me.columnNilai_Project.ReadOnly = true
            Me.columnMarketingName.ReadOnly = true
            Me.columnMarketingName.MaxLength = 100
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtRetrieve_Report_ProspekOrderRow() As dtRetrieve_Report_ProspekOrderRow
            Return CType(Me.NewRow,dtRetrieve_Report_ProspekOrderRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtRetrieve_Report_ProspekOrderRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtRetrieve_Report_ProspekOrderRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtRetrieve_Report_ProspekOrderRowChangedEvent) Is Nothing) Then
                RaiseEvent dtRetrieve_Report_ProspekOrderRowChanged(Me, New dtRetrieve_Report_ProspekOrderRowChangeEvent(CType(e.Row,dtRetrieve_Report_ProspekOrderRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtRetrieve_Report_ProspekOrderRowChangingEvent) Is Nothing) Then
                RaiseEvent dtRetrieve_Report_ProspekOrderRowChanging(Me, New dtRetrieve_Report_ProspekOrderRowChangeEvent(CType(e.Row,dtRetrieve_Report_ProspekOrderRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtRetrieve_Report_ProspekOrderRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtRetrieve_Report_ProspekOrderRowDeleted(Me, New dtRetrieve_Report_ProspekOrderRowChangeEvent(CType(e.Row,dtRetrieve_Report_ProspekOrderRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtRetrieve_Report_ProspekOrderRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtRetrieve_Report_ProspekOrderRowDeleting(Me, New dtRetrieve_Report_ProspekOrderRowChangeEvent(CType(e.Row,dtRetrieve_Report_ProspekOrderRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtRetrieve_Report_ProspekOrderRow(ByVal row As dtRetrieve_Report_ProspekOrderRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsReport = New dsReport
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtRetrieve_Report_ProspekOrderDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtManifoldDataDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnItem_ID As Global.System.Data.DataColumn
        
        Private columnItem_Name As Global.System.Data.DataColumn
        
        Private columnUOM As Global.System.Data.DataColumn
        
        Private columnItem_Size As Global.System.Data.DataColumn
        
        Private columnItem_Type As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtManifoldData"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Item_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItem_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Item_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItem_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UOMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUOM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Item_SizeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItem_Size
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Item_TypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItem_Type
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtManifoldDataRow
            Get
                Return CType(Me.Rows(index),dtManifoldDataRow)
            End Get
        End Property
        
        Public Event dtManifoldDataRowChanging As dtManifoldDataRowChangeEventHandler
        
        Public Event dtManifoldDataRowChanged As dtManifoldDataRowChangeEventHandler
        
        Public Event dtManifoldDataRowDeleting As dtManifoldDataRowChangeEventHandler
        
        Public Event dtManifoldDataRowDeleted As dtManifoldDataRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtManifoldDataRow(ByVal row As dtManifoldDataRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtManifoldDataRow(ByVal Item_ID As String, ByVal Item_Name As String, ByVal UOM As String, ByVal Item_Size As Decimal, ByVal Item_Type As String) As dtManifoldDataRow
            Dim rowdtManifoldDataRow As dtManifoldDataRow = CType(Me.NewRow,dtManifoldDataRow)
            Dim columnValuesArray() As Object = New Object() {Item_ID, Item_Name, UOM, Item_Size, Item_Type}
            rowdtManifoldDataRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtManifoldDataRow)
            Return rowdtManifoldDataRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByItem_ID(ByVal Item_ID As String) As dtManifoldDataRow
            Return CType(Me.Rows.Find(New Object() {Item_ID}),dtManifoldDataRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtManifoldDataDataTable = CType(MyBase.Clone,dtManifoldDataDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtManifoldDataDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnItem_ID = MyBase.Columns("Item_ID")
            Me.columnItem_Name = MyBase.Columns("Item_Name")
            Me.columnUOM = MyBase.Columns("UOM")
            Me.columnItem_Size = MyBase.Columns("Item_Size")
            Me.columnItem_Type = MyBase.Columns("Item_Type")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnItem_ID = New Global.System.Data.DataColumn("Item_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItem_ID)
            Me.columnItem_Name = New Global.System.Data.DataColumn("Item_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItem_Name)
            Me.columnUOM = New Global.System.Data.DataColumn("UOM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUOM)
            Me.columnItem_Size = New Global.System.Data.DataColumn("Item_Size", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItem_Size)
            Me.columnItem_Type = New Global.System.Data.DataColumn("Item_Type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItem_Type)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnItem_ID}, true))
            Me.columnItem_ID.AllowDBNull = false
            Me.columnItem_ID.Unique = true
            Me.columnItem_ID.MaxLength = 10
            Me.columnItem_Name.AllowDBNull = false
            Me.columnItem_Name.MaxLength = 100
            Me.columnUOM.AllowDBNull = false
            Me.columnUOM.MaxLength = 10
            Me.columnItem_Size.AllowDBNull = false
            Me.columnItem_Type.AllowDBNull = false
            Me.columnItem_Type.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtManifoldDataRow() As dtManifoldDataRow
            Return CType(Me.NewRow,dtManifoldDataRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtManifoldDataRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtManifoldDataRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtManifoldDataRowChangedEvent) Is Nothing) Then
                RaiseEvent dtManifoldDataRowChanged(Me, New dtManifoldDataRowChangeEvent(CType(e.Row,dtManifoldDataRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtManifoldDataRowChangingEvent) Is Nothing) Then
                RaiseEvent dtManifoldDataRowChanging(Me, New dtManifoldDataRowChangeEvent(CType(e.Row,dtManifoldDataRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtManifoldDataRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtManifoldDataRowDeleted(Me, New dtManifoldDataRowChangeEvent(CType(e.Row,dtManifoldDataRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtManifoldDataRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtManifoldDataRowDeleting(Me, New dtManifoldDataRowChangeEvent(CType(e.Row,dtManifoldDataRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtManifoldDataRow(ByVal row As dtManifoldDataRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsReport = New dsReport
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtManifoldDataDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtPipeToKitchenDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnItem_ID As Global.System.Data.DataColumn
        
        Private columnItem_Name As Global.System.Data.DataColumn
        
        Private columnUOM As Global.System.Data.DataColumn
        
        Private columnItem_Size As Global.System.Data.DataColumn
        
        Private columnItem_Type As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtPipeToKitchen"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Item_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItem_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Item_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItem_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UOMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUOM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Item_SizeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItem_Size
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Item_TypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItem_Type
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtPipeToKitchenRow
            Get
                Return CType(Me.Rows(index),dtPipeToKitchenRow)
            End Get
        End Property
        
        Public Event dtPipeToKitchenRowChanging As dtPipeToKitchenRowChangeEventHandler
        
        Public Event dtPipeToKitchenRowChanged As dtPipeToKitchenRowChangeEventHandler
        
        Public Event dtPipeToKitchenRowDeleting As dtPipeToKitchenRowChangeEventHandler
        
        Public Event dtPipeToKitchenRowDeleted As dtPipeToKitchenRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtPipeToKitchenRow(ByVal row As dtPipeToKitchenRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtPipeToKitchenRow(ByVal Item_ID As String, ByVal Item_Name As String, ByVal UOM As String, ByVal Item_Size As Decimal, ByVal Item_Type As String) As dtPipeToKitchenRow
            Dim rowdtPipeToKitchenRow As dtPipeToKitchenRow = CType(Me.NewRow,dtPipeToKitchenRow)
            Dim columnValuesArray() As Object = New Object() {Item_ID, Item_Name, UOM, Item_Size, Item_Type}
            rowdtPipeToKitchenRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtPipeToKitchenRow)
            Return rowdtPipeToKitchenRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByItem_ID(ByVal Item_ID As String) As dtPipeToKitchenRow
            Return CType(Me.Rows.Find(New Object() {Item_ID}),dtPipeToKitchenRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtPipeToKitchenDataTable = CType(MyBase.Clone,dtPipeToKitchenDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtPipeToKitchenDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnItem_ID = MyBase.Columns("Item_ID")
            Me.columnItem_Name = MyBase.Columns("Item_Name")
            Me.columnUOM = MyBase.Columns("UOM")
            Me.columnItem_Size = MyBase.Columns("Item_Size")
            Me.columnItem_Type = MyBase.Columns("Item_Type")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnItem_ID = New Global.System.Data.DataColumn("Item_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItem_ID)
            Me.columnItem_Name = New Global.System.Data.DataColumn("Item_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItem_Name)
            Me.columnUOM = New Global.System.Data.DataColumn("UOM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUOM)
            Me.columnItem_Size = New Global.System.Data.DataColumn("Item_Size", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItem_Size)
            Me.columnItem_Type = New Global.System.Data.DataColumn("Item_Type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItem_Type)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnItem_ID}, true))
            Me.columnItem_ID.AllowDBNull = false
            Me.columnItem_ID.Unique = true
            Me.columnItem_ID.MaxLength = 10
            Me.columnItem_Name.AllowDBNull = false
            Me.columnItem_Name.MaxLength = 100
            Me.columnUOM.AllowDBNull = false
            Me.columnUOM.MaxLength = 10
            Me.columnItem_Size.AllowDBNull = false
            Me.columnItem_Type.AllowDBNull = false
            Me.columnItem_Type.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtPipeToKitchenRow() As dtPipeToKitchenRow
            Return CType(Me.NewRow,dtPipeToKitchenRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtPipeToKitchenRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtPipeToKitchenRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtPipeToKitchenRowChangedEvent) Is Nothing) Then
                RaiseEvent dtPipeToKitchenRowChanged(Me, New dtPipeToKitchenRowChangeEvent(CType(e.Row,dtPipeToKitchenRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtPipeToKitchenRowChangingEvent) Is Nothing) Then
                RaiseEvent dtPipeToKitchenRowChanging(Me, New dtPipeToKitchenRowChangeEvent(CType(e.Row,dtPipeToKitchenRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtPipeToKitchenRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtPipeToKitchenRowDeleted(Me, New dtPipeToKitchenRowChangeEvent(CType(e.Row,dtPipeToKitchenRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtPipeToKitchenRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtPipeToKitchenRowDeleting(Me, New dtPipeToKitchenRowChangeEvent(CType(e.Row,dtPipeToKitchenRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtPipeToKitchenRow(ByVal row As dtPipeToKitchenRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsReport = New dsReport
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtPipeToKitchenDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtSupportingMaterialDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnItem_ID As Global.System.Data.DataColumn
        
        Private columnItem_Name As Global.System.Data.DataColumn
        
        Private columnUOM As Global.System.Data.DataColumn
        
        Private columnItem_Size As Global.System.Data.DataColumn
        
        Private columnItem_Type As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtSupportingMaterial"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Item_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItem_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Item_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItem_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UOMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUOM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Item_SizeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItem_Size
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Item_TypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItem_Type
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtSupportingMaterialRow
            Get
                Return CType(Me.Rows(index),dtSupportingMaterialRow)
            End Get
        End Property
        
        Public Event dtSupportingMaterialRowChanging As dtSupportingMaterialRowChangeEventHandler
        
        Public Event dtSupportingMaterialRowChanged As dtSupportingMaterialRowChangeEventHandler
        
        Public Event dtSupportingMaterialRowDeleting As dtSupportingMaterialRowChangeEventHandler
        
        Public Event dtSupportingMaterialRowDeleted As dtSupportingMaterialRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtSupportingMaterialRow(ByVal row As dtSupportingMaterialRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtSupportingMaterialRow(ByVal Item_ID As String, ByVal Item_Name As String, ByVal UOM As String, ByVal Item_Size As Decimal, ByVal Item_Type As String) As dtSupportingMaterialRow
            Dim rowdtSupportingMaterialRow As dtSupportingMaterialRow = CType(Me.NewRow,dtSupportingMaterialRow)
            Dim columnValuesArray() As Object = New Object() {Item_ID, Item_Name, UOM, Item_Size, Item_Type}
            rowdtSupportingMaterialRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtSupportingMaterialRow)
            Return rowdtSupportingMaterialRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByItem_ID(ByVal Item_ID As String) As dtSupportingMaterialRow
            Return CType(Me.Rows.Find(New Object() {Item_ID}),dtSupportingMaterialRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtSupportingMaterialDataTable = CType(MyBase.Clone,dtSupportingMaterialDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtSupportingMaterialDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnItem_ID = MyBase.Columns("Item_ID")
            Me.columnItem_Name = MyBase.Columns("Item_Name")
            Me.columnUOM = MyBase.Columns("UOM")
            Me.columnItem_Size = MyBase.Columns("Item_Size")
            Me.columnItem_Type = MyBase.Columns("Item_Type")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnItem_ID = New Global.System.Data.DataColumn("Item_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItem_ID)
            Me.columnItem_Name = New Global.System.Data.DataColumn("Item_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItem_Name)
            Me.columnUOM = New Global.System.Data.DataColumn("UOM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUOM)
            Me.columnItem_Size = New Global.System.Data.DataColumn("Item_Size", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItem_Size)
            Me.columnItem_Type = New Global.System.Data.DataColumn("Item_Type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItem_Type)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnItem_ID}, true))
            Me.columnItem_ID.AllowDBNull = false
            Me.columnItem_ID.Unique = true
            Me.columnItem_ID.MaxLength = 10
            Me.columnItem_Name.AllowDBNull = false
            Me.columnItem_Name.MaxLength = 100
            Me.columnUOM.AllowDBNull = false
            Me.columnUOM.MaxLength = 10
            Me.columnItem_Size.AllowDBNull = false
            Me.columnItem_Type.AllowDBNull = false
            Me.columnItem_Type.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtSupportingMaterialRow() As dtSupportingMaterialRow
            Return CType(Me.NewRow,dtSupportingMaterialRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtSupportingMaterialRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtSupportingMaterialRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtSupportingMaterialRowChangedEvent) Is Nothing) Then
                RaiseEvent dtSupportingMaterialRowChanged(Me, New dtSupportingMaterialRowChangeEvent(CType(e.Row,dtSupportingMaterialRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtSupportingMaterialRowChangingEvent) Is Nothing) Then
                RaiseEvent dtSupportingMaterialRowChanging(Me, New dtSupportingMaterialRowChangeEvent(CType(e.Row,dtSupportingMaterialRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtSupportingMaterialRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtSupportingMaterialRowDeleted(Me, New dtSupportingMaterialRowChangeEvent(CType(e.Row,dtSupportingMaterialRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtSupportingMaterialRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtSupportingMaterialRowDeleting(Me, New dtSupportingMaterialRowChangeEvent(CType(e.Row,dtSupportingMaterialRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtSupportingMaterialRow(ByVal row As dtSupportingMaterialRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsReport = New dsReport
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtSupportingMaterialDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtTitikApiDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnItem_ID As Global.System.Data.DataColumn
        
        Private columnItem_Name As Global.System.Data.DataColumn
        
        Private columnUOM As Global.System.Data.DataColumn
        
        Private columnItem_Size As Global.System.Data.DataColumn
        
        Private columnItem_Type As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtTitikApi"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Item_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItem_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Item_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItem_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UOMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUOM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Item_SizeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItem_Size
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Item_TypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItem_Type
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtTitikApiRow
            Get
                Return CType(Me.Rows(index),dtTitikApiRow)
            End Get
        End Property
        
        Public Event dtTitikApiRowChanging As dtTitikApiRowChangeEventHandler
        
        Public Event dtTitikApiRowChanged As dtTitikApiRowChangeEventHandler
        
        Public Event dtTitikApiRowDeleting As dtTitikApiRowChangeEventHandler
        
        Public Event dtTitikApiRowDeleted As dtTitikApiRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtTitikApiRow(ByVal row As dtTitikApiRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtTitikApiRow(ByVal Item_ID As String, ByVal Item_Name As String, ByVal UOM As String, ByVal Item_Size As Decimal, ByVal Item_Type As String) As dtTitikApiRow
            Dim rowdtTitikApiRow As dtTitikApiRow = CType(Me.NewRow,dtTitikApiRow)
            Dim columnValuesArray() As Object = New Object() {Item_ID, Item_Name, UOM, Item_Size, Item_Type}
            rowdtTitikApiRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtTitikApiRow)
            Return rowdtTitikApiRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByItem_ID(ByVal Item_ID As String) As dtTitikApiRow
            Return CType(Me.Rows.Find(New Object() {Item_ID}),dtTitikApiRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtTitikApiDataTable = CType(MyBase.Clone,dtTitikApiDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtTitikApiDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnItem_ID = MyBase.Columns("Item_ID")
            Me.columnItem_Name = MyBase.Columns("Item_Name")
            Me.columnUOM = MyBase.Columns("UOM")
            Me.columnItem_Size = MyBase.Columns("Item_Size")
            Me.columnItem_Type = MyBase.Columns("Item_Type")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnItem_ID = New Global.System.Data.DataColumn("Item_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItem_ID)
            Me.columnItem_Name = New Global.System.Data.DataColumn("Item_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItem_Name)
            Me.columnUOM = New Global.System.Data.DataColumn("UOM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUOM)
            Me.columnItem_Size = New Global.System.Data.DataColumn("Item_Size", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItem_Size)
            Me.columnItem_Type = New Global.System.Data.DataColumn("Item_Type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItem_Type)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnItem_ID}, true))
            Me.columnItem_ID.AllowDBNull = false
            Me.columnItem_ID.Unique = true
            Me.columnItem_ID.MaxLength = 10
            Me.columnItem_Name.AllowDBNull = false
            Me.columnItem_Name.MaxLength = 100
            Me.columnUOM.AllowDBNull = false
            Me.columnUOM.MaxLength = 10
            Me.columnItem_Size.AllowDBNull = false
            Me.columnItem_Type.AllowDBNull = false
            Me.columnItem_Type.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtTitikApiRow() As dtTitikApiRow
            Return CType(Me.NewRow,dtTitikApiRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtTitikApiRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtTitikApiRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtTitikApiRowChangedEvent) Is Nothing) Then
                RaiseEvent dtTitikApiRowChanged(Me, New dtTitikApiRowChangeEvent(CType(e.Row,dtTitikApiRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtTitikApiRowChangingEvent) Is Nothing) Then
                RaiseEvent dtTitikApiRowChanging(Me, New dtTitikApiRowChangeEvent(CType(e.Row,dtTitikApiRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtTitikApiRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtTitikApiRowDeleted(Me, New dtTitikApiRowChangeEvent(CType(e.Row,dtTitikApiRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtTitikApiRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtTitikApiRowDeleting(Me, New dtTitikApiRowChangeEvent(CType(e.Row,dtTitikApiRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtTitikApiRow(ByVal row As dtTitikApiRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsReport = New dsReport
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtTitikApiDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Trans_MoUDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnMoU_ID As Global.System.Data.DataColumn
        
        Private columnPHM_No As Global.System.Data.DataColumn
        
        Private columnSeqNum As Global.System.Data.DataColumn
        
        Private columnMou_Date As Global.System.Data.DataColumn
        
        Private columnContract_date As Global.System.Data.DataColumn
        
        Private columnCompany As Global.System.Data.DataColumn
        
        Private columnPihak1_name As Global.System.Data.DataColumn
        
        Private columnPihak1_Jabatan As Global.System.Data.DataColumn
        
        Private columnPihak1_Company As Global.System.Data.DataColumn
        
        Private columnPihak1_Alamat As Global.System.Data.DataColumn
        
        Private columnPihak2_nama As Global.System.Data.DataColumn
        
        Private columnPihak2_Jabatan As Global.System.Data.DataColumn
        
        Private columnPihak2_Company As Global.System.Data.DataColumn
        
        Private columnPihak2_Alamat As Global.System.Data.DataColumn
        
        Private columnPasal11_Pekerjaan As Global.System.Data.DataColumn
        
        Private columnPasal13_Kerjaan As Global.System.Data.DataColumn
        
        Private columnPasal13_meliputi As Global.System.Data.DataColumn
        
        Private columnPasal14_garansi As Global.System.Data.DataColumn
        
        Private columnPasal41_DP As Global.System.Data.DataColumn
        
        Private columnPasal51_sebesar As Global.System.Data.DataColumn
        
        Private columnPasal61_wktperngerjaan As Global.System.Data.DataColumn
        
        Private columnPasal61_From As Global.System.Data.DataColumn
        
        Private columnPasal61_To As Global.System.Data.DataColumn
        
        Private columnPasal61_untuk As Global.System.Data.DataColumn
        
        Private columnPasal71_hari As Global.System.Data.DataColumn
        
        Private columnPrint_Total As Global.System.Data.DataColumn
        
        Private columnStatus_ID As Global.System.Data.DataColumn
        
        Private columnid_created As Global.System.Data.DataColumn
        
        Private columndt_created As Global.System.Data.DataColumn
        
        Private columnid_lastupdated As Global.System.Data.DataColumn
        
        Private columndt_lastupdated As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Trans_MoU"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MoU_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMoU_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PHM_NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPHM_No
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SeqNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSeqNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Mou_DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMou_Date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Contract_dateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnContract_date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CompanyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCompany
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Pihak1_nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPihak1_name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Pihak1_JabatanColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPihak1_Jabatan
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Pihak1_CompanyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPihak1_Company
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Pihak1_AlamatColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPihak1_Alamat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Pihak2_namaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPihak2_nama
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Pihak2_JabatanColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPihak2_Jabatan
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Pihak2_CompanyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPihak2_Company
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Pihak2_AlamatColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPihak2_Alamat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Pasal11_PekerjaanColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPasal11_Pekerjaan
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Pasal13_KerjaanColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPasal13_Kerjaan
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Pasal13_meliputiColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPasal13_meliputi
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Pasal14_garansiColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPasal14_garansi
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Pasal41_DPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPasal41_DP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Pasal51_sebesarColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPasal51_sebesar
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Pasal61_wktperngerjaanColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPasal61_wktperngerjaan
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Pasal61_FromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPasal61_From
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Pasal61_ToColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPasal61_To
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Pasal61_untukColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPasal61_untuk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Pasal71_hariColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPasal71_hari
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Print_TotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrint_Total
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Status_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatus_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property id_createdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid_created
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property dt_createdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndt_created
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property id_lastupdatedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid_lastupdated
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property dt_lastupdatedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndt_lastupdated
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Trans_MoURow
            Get
                Return CType(Me.Rows(index),Trans_MoURow)
            End Get
        End Property
        
        Public Event Trans_MoURowChanging As Trans_MoURowChangeEventHandler
        
        Public Event Trans_MoURowChanged As Trans_MoURowChangeEventHandler
        
        Public Event Trans_MoURowDeleting As Trans_MoURowChangeEventHandler
        
        Public Event Trans_MoURowDeleted As Trans_MoURowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTrans_MoURow(ByVal row As Trans_MoURow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTrans_MoURow( _
                    ByVal MoU_ID As String,  _
                    ByVal PHM_No As String,  _
                    ByVal SeqNum As Integer,  _
                    ByVal Mou_Date As Date,  _
                    ByVal Contract_date As Date,  _
                    ByVal Company As String,  _
                    ByVal Pihak1_name As String,  _
                    ByVal Pihak1_Jabatan As String,  _
                    ByVal Pihak1_Company As String,  _
                    ByVal Pihak1_Alamat As String,  _
                    ByVal Pihak2_nama As String,  _
                    ByVal Pihak2_Jabatan As String,  _
                    ByVal Pihak2_Company As String,  _
                    ByVal Pihak2_Alamat As String,  _
                    ByVal Pasal11_Pekerjaan As String,  _
                    ByVal Pasal13_Kerjaan As String,  _
                    ByVal Pasal13_meliputi As String,  _
                    ByVal Pasal14_garansi As String,  _
                    ByVal Pasal41_DP As Decimal,  _
                    ByVal Pasal51_sebesar As Decimal,  _
                    ByVal Pasal61_wktperngerjaan As String,  _
                    ByVal Pasal61_From As Date,  _
                    ByVal Pasal61_To As Date,  _
                    ByVal Pasal61_untuk As String,  _
                    ByVal Pasal71_hari As Integer,  _
                    ByVal Print_Total As Integer,  _
                    ByVal Status_ID As String,  _
                    ByVal id_created As String,  _
                    ByVal dt_created As Date,  _
                    ByVal id_lastupdated As String,  _
                    ByVal dt_lastupdated As Date) As Trans_MoURow
            Dim rowTrans_MoURow As Trans_MoURow = CType(Me.NewRow,Trans_MoURow)
            Dim columnValuesArray() As Object = New Object() {MoU_ID, PHM_No, SeqNum, Mou_Date, Contract_date, Company, Pihak1_name, Pihak1_Jabatan, Pihak1_Company, Pihak1_Alamat, Pihak2_nama, Pihak2_Jabatan, Pihak2_Company, Pihak2_Alamat, Pasal11_Pekerjaan, Pasal13_Kerjaan, Pasal13_meliputi, Pasal14_garansi, Pasal41_DP, Pasal51_sebesar, Pasal61_wktperngerjaan, Pasal61_From, Pasal61_To, Pasal61_untuk, Pasal71_hari, Print_Total, Status_ID, id_created, dt_created, id_lastupdated, dt_lastupdated}
            rowTrans_MoURow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTrans_MoURow)
            Return rowTrans_MoURow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByMoU_IDPHM_NoSeqNum(ByVal MoU_ID As String, ByVal PHM_No As String, ByVal SeqNum As Integer) As Trans_MoURow
            Return CType(Me.Rows.Find(New Object() {MoU_ID, PHM_No, SeqNum}),Trans_MoURow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Trans_MoUDataTable = CType(MyBase.Clone,Trans_MoUDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Trans_MoUDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnMoU_ID = MyBase.Columns("MoU_ID")
            Me.columnPHM_No = MyBase.Columns("PHM_No")
            Me.columnSeqNum = MyBase.Columns("SeqNum")
            Me.columnMou_Date = MyBase.Columns("Mou_Date")
            Me.columnContract_date = MyBase.Columns("Contract_date")
            Me.columnCompany = MyBase.Columns("Company")
            Me.columnPihak1_name = MyBase.Columns("Pihak1_name")
            Me.columnPihak1_Jabatan = MyBase.Columns("Pihak1_Jabatan")
            Me.columnPihak1_Company = MyBase.Columns("Pihak1_Company")
            Me.columnPihak1_Alamat = MyBase.Columns("Pihak1_Alamat")
            Me.columnPihak2_nama = MyBase.Columns("Pihak2_nama")
            Me.columnPihak2_Jabatan = MyBase.Columns("Pihak2_Jabatan")
            Me.columnPihak2_Company = MyBase.Columns("Pihak2_Company")
            Me.columnPihak2_Alamat = MyBase.Columns("Pihak2_Alamat")
            Me.columnPasal11_Pekerjaan = MyBase.Columns("Pasal11_Pekerjaan")
            Me.columnPasal13_Kerjaan = MyBase.Columns("Pasal13_Kerjaan")
            Me.columnPasal13_meliputi = MyBase.Columns("Pasal13_meliputi")
            Me.columnPasal14_garansi = MyBase.Columns("Pasal14_garansi")
            Me.columnPasal41_DP = MyBase.Columns("Pasal41_DP")
            Me.columnPasal51_sebesar = MyBase.Columns("Pasal51_sebesar")
            Me.columnPasal61_wktperngerjaan = MyBase.Columns("Pasal61_wktperngerjaan")
            Me.columnPasal61_From = MyBase.Columns("Pasal61_From")
            Me.columnPasal61_To = MyBase.Columns("Pasal61_To")
            Me.columnPasal61_untuk = MyBase.Columns("Pasal61_untuk")
            Me.columnPasal71_hari = MyBase.Columns("Pasal71_hari")
            Me.columnPrint_Total = MyBase.Columns("Print_Total")
            Me.columnStatus_ID = MyBase.Columns("Status_ID")
            Me.columnid_created = MyBase.Columns("id_created")
            Me.columndt_created = MyBase.Columns("dt_created")
            Me.columnid_lastupdated = MyBase.Columns("id_lastupdated")
            Me.columndt_lastupdated = MyBase.Columns("dt_lastupdated")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnMoU_ID = New Global.System.Data.DataColumn("MoU_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMoU_ID)
            Me.columnPHM_No = New Global.System.Data.DataColumn("PHM_No", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPHM_No)
            Me.columnSeqNum = New Global.System.Data.DataColumn("SeqNum", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSeqNum)
            Me.columnMou_Date = New Global.System.Data.DataColumn("Mou_Date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMou_Date)
            Me.columnContract_date = New Global.System.Data.DataColumn("Contract_date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContract_date)
            Me.columnCompany = New Global.System.Data.DataColumn("Company", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCompany)
            Me.columnPihak1_name = New Global.System.Data.DataColumn("Pihak1_name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPihak1_name)
            Me.columnPihak1_Jabatan = New Global.System.Data.DataColumn("Pihak1_Jabatan", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPihak1_Jabatan)
            Me.columnPihak1_Company = New Global.System.Data.DataColumn("Pihak1_Company", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPihak1_Company)
            Me.columnPihak1_Alamat = New Global.System.Data.DataColumn("Pihak1_Alamat", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPihak1_Alamat)
            Me.columnPihak2_nama = New Global.System.Data.DataColumn("Pihak2_nama", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPihak2_nama)
            Me.columnPihak2_Jabatan = New Global.System.Data.DataColumn("Pihak2_Jabatan", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPihak2_Jabatan)
            Me.columnPihak2_Company = New Global.System.Data.DataColumn("Pihak2_Company", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPihak2_Company)
            Me.columnPihak2_Alamat = New Global.System.Data.DataColumn("Pihak2_Alamat", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPihak2_Alamat)
            Me.columnPasal11_Pekerjaan = New Global.System.Data.DataColumn("Pasal11_Pekerjaan", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPasal11_Pekerjaan)
            Me.columnPasal13_Kerjaan = New Global.System.Data.DataColumn("Pasal13_Kerjaan", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPasal13_Kerjaan)
            Me.columnPasal13_meliputi = New Global.System.Data.DataColumn("Pasal13_meliputi", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPasal13_meliputi)
            Me.columnPasal14_garansi = New Global.System.Data.DataColumn("Pasal14_garansi", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPasal14_garansi)
            Me.columnPasal41_DP = New Global.System.Data.DataColumn("Pasal41_DP", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPasal41_DP)
            Me.columnPasal51_sebesar = New Global.System.Data.DataColumn("Pasal51_sebesar", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPasal51_sebesar)
            Me.columnPasal61_wktperngerjaan = New Global.System.Data.DataColumn("Pasal61_wktperngerjaan", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPasal61_wktperngerjaan)
            Me.columnPasal61_From = New Global.System.Data.DataColumn("Pasal61_From", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPasal61_From)
            Me.columnPasal61_To = New Global.System.Data.DataColumn("Pasal61_To", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPasal61_To)
            Me.columnPasal61_untuk = New Global.System.Data.DataColumn("Pasal61_untuk", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPasal61_untuk)
            Me.columnPasal71_hari = New Global.System.Data.DataColumn("Pasal71_hari", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPasal71_hari)
            Me.columnPrint_Total = New Global.System.Data.DataColumn("Print_Total", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrint_Total)
            Me.columnStatus_ID = New Global.System.Data.DataColumn("Status_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatus_ID)
            Me.columnid_created = New Global.System.Data.DataColumn("id_created", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid_created)
            Me.columndt_created = New Global.System.Data.DataColumn("dt_created", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndt_created)
            Me.columnid_lastupdated = New Global.System.Data.DataColumn("id_lastupdated", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid_lastupdated)
            Me.columndt_lastupdated = New Global.System.Data.DataColumn("dt_lastupdated", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndt_lastupdated)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnMoU_ID, Me.columnPHM_No, Me.columnSeqNum}, true))
            Me.columnMoU_ID.AllowDBNull = false
            Me.columnMoU_ID.MaxLength = 9
            Me.columnPHM_No.AllowDBNull = false
            Me.columnPHM_No.MaxLength = 9
            Me.columnSeqNum.AllowDBNull = false
            Me.columnMou_Date.AllowDBNull = false
            Me.columnContract_date.AllowDBNull = false
            Me.columnCompany.AllowDBNull = false
            Me.columnCompany.MaxLength = 50
            Me.columnPihak1_name.AllowDBNull = false
            Me.columnPihak1_name.MaxLength = 100
            Me.columnPihak1_Jabatan.AllowDBNull = false
            Me.columnPihak1_Jabatan.MaxLength = 100
            Me.columnPihak1_Company.AllowDBNull = false
            Me.columnPihak1_Company.MaxLength = 100
            Me.columnPihak1_Alamat.AllowDBNull = false
            Me.columnPihak1_Alamat.MaxLength = 100
            Me.columnPihak2_nama.AllowDBNull = false
            Me.columnPihak2_nama.MaxLength = 100
            Me.columnPihak2_Jabatan.AllowDBNull = false
            Me.columnPihak2_Jabatan.MaxLength = 100
            Me.columnPihak2_Company.AllowDBNull = false
            Me.columnPihak2_Company.MaxLength = 100
            Me.columnPihak2_Alamat.AllowDBNull = false
            Me.columnPihak2_Alamat.MaxLength = 100
            Me.columnPasal11_Pekerjaan.AllowDBNull = false
            Me.columnPasal11_Pekerjaan.MaxLength = 100
            Me.columnPasal13_Kerjaan.AllowDBNull = false
            Me.columnPasal13_Kerjaan.MaxLength = 100
            Me.columnPasal13_meliputi.AllowDBNull = false
            Me.columnPasal13_meliputi.MaxLength = 500
            Me.columnPasal14_garansi.AllowDBNull = false
            Me.columnPasal14_garansi.MaxLength = 20
            Me.columnPasal41_DP.AllowDBNull = false
            Me.columnPasal51_sebesar.AllowDBNull = false
            Me.columnPasal61_wktperngerjaan.AllowDBNull = false
            Me.columnPasal61_wktperngerjaan.MaxLength = 2
            Me.columnPasal61_From.AllowDBNull = false
            Me.columnPasal61_To.AllowDBNull = false
            Me.columnPasal61_untuk.AllowDBNull = false
            Me.columnPasal61_untuk.MaxLength = 50
            Me.columnPasal71_hari.AllowDBNull = false
            Me.columnPrint_Total.AllowDBNull = false
            Me.columnStatus_ID.AllowDBNull = false
            Me.columnStatus_ID.MaxLength = 10
            Me.columnid_created.AllowDBNull = false
            Me.columnid_created.MaxLength = 50
            Me.columndt_created.AllowDBNull = false
            Me.columnid_lastupdated.AllowDBNull = false
            Me.columnid_lastupdated.MaxLength = 50
            Me.columndt_lastupdated.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTrans_MoURow() As Trans_MoURow
            Return CType(Me.NewRow,Trans_MoURow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Trans_MoURow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Trans_MoURow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Trans_MoURowChangedEvent) Is Nothing) Then
                RaiseEvent Trans_MoURowChanged(Me, New Trans_MoURowChangeEvent(CType(e.Row,Trans_MoURow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Trans_MoURowChangingEvent) Is Nothing) Then
                RaiseEvent Trans_MoURowChanging(Me, New Trans_MoURowChangeEvent(CType(e.Row,Trans_MoURow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Trans_MoURowDeletedEvent) Is Nothing) Then
                RaiseEvent Trans_MoURowDeleted(Me, New Trans_MoURowChangeEvent(CType(e.Row,Trans_MoURow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Trans_MoURowDeletingEvent) Is Nothing) Then
                RaiseEvent Trans_MoURowDeleting(Me, New Trans_MoURowChangeEvent(CType(e.Row,Trans_MoURow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTrans_MoURow(ByVal row As Trans_MoURow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsReport = New dsReport
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Trans_MoUDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_retrieve_DPPbyIDDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnDPP_No As Global.System.Data.DataColumn
        
        Private columnfaktur_no As Global.System.Data.DataColumn
        
        Private columntgl_faktur As Global.System.Data.DataColumn
        
        Private columntgl_jatuhtempo As Global.System.Data.DataColumn
        
        Private columnproject_no As Global.System.Data.DataColumn
        
        Private columncustomer_name As Global.System.Data.DataColumn
        
        Private columnsalesman As Global.System.Data.DataColumn
        
        Private columnjumlah_uang As Global.System.Data.DataColumn
        
        Private columnoutstanding As Global.System.Data.DataColumn
        
        Private columncust_id As Global.System.Data.DataColumn
        
        Private columnemployee_id As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_retrieve_DPPbyID"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DPP_NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDPP_No
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property faktur_noColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfaktur_no
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tgl_fakturColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntgl_faktur
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tgl_jatuhtempoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntgl_jatuhtempo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property project_noColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproject_no
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customer_nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomer_name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property salesmanColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsalesman
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property jumlah_uangColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnjumlah_uang
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property outstandingColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnoutstanding
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cust_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncust_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property employee_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnemployee_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_retrieve_DPPbyIDRow
            Get
                Return CType(Me.Rows(index),sp_retrieve_DPPbyIDRow)
            End Get
        End Property
        
        Public Event sp_retrieve_DPPbyIDRowChanging As sp_retrieve_DPPbyIDRowChangeEventHandler
        
        Public Event sp_retrieve_DPPbyIDRowChanged As sp_retrieve_DPPbyIDRowChangeEventHandler
        
        Public Event sp_retrieve_DPPbyIDRowDeleting As sp_retrieve_DPPbyIDRowChangeEventHandler
        
        Public Event sp_retrieve_DPPbyIDRowDeleted As sp_retrieve_DPPbyIDRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_retrieve_DPPbyIDRow(ByVal row As sp_retrieve_DPPbyIDRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_retrieve_DPPbyIDRow(ByVal DPP_No As String, ByVal faktur_no As String, ByVal tgl_faktur As Date, ByVal tgl_jatuhtempo As Date, ByVal project_no As String, ByVal customer_name As String, ByVal salesman As String, ByVal jumlah_uang As Decimal, ByVal outstanding As Decimal, ByVal cust_id As String, ByVal employee_id As String) As sp_retrieve_DPPbyIDRow
            Dim rowsp_retrieve_DPPbyIDRow As sp_retrieve_DPPbyIDRow = CType(Me.NewRow,sp_retrieve_DPPbyIDRow)
            Dim columnValuesArray() As Object = New Object() {DPP_No, faktur_no, tgl_faktur, tgl_jatuhtempo, project_no, customer_name, salesman, jumlah_uang, outstanding, cust_id, employee_id}
            rowsp_retrieve_DPPbyIDRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_retrieve_DPPbyIDRow)
            Return rowsp_retrieve_DPPbyIDRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_retrieve_DPPbyIDDataTable = CType(MyBase.Clone,sp_retrieve_DPPbyIDDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_retrieve_DPPbyIDDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnDPP_No = MyBase.Columns("DPP_No")
            Me.columnfaktur_no = MyBase.Columns("faktur_no")
            Me.columntgl_faktur = MyBase.Columns("tgl_faktur")
            Me.columntgl_jatuhtempo = MyBase.Columns("tgl_jatuhtempo")
            Me.columnproject_no = MyBase.Columns("project_no")
            Me.columncustomer_name = MyBase.Columns("customer_name")
            Me.columnsalesman = MyBase.Columns("salesman")
            Me.columnjumlah_uang = MyBase.Columns("jumlah_uang")
            Me.columnoutstanding = MyBase.Columns("outstanding")
            Me.columncust_id = MyBase.Columns("cust_id")
            Me.columnemployee_id = MyBase.Columns("employee_id")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnDPP_No = New Global.System.Data.DataColumn("DPP_No", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDPP_No)
            Me.columnfaktur_no = New Global.System.Data.DataColumn("faktur_no", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfaktur_no)
            Me.columntgl_faktur = New Global.System.Data.DataColumn("tgl_faktur", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntgl_faktur)
            Me.columntgl_jatuhtempo = New Global.System.Data.DataColumn("tgl_jatuhtempo", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntgl_jatuhtempo)
            Me.columnproject_no = New Global.System.Data.DataColumn("project_no", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproject_no)
            Me.columncustomer_name = New Global.System.Data.DataColumn("customer_name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomer_name)
            Me.columnsalesman = New Global.System.Data.DataColumn("salesman", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsalesman)
            Me.columnjumlah_uang = New Global.System.Data.DataColumn("jumlah_uang", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnjumlah_uang)
            Me.columnoutstanding = New Global.System.Data.DataColumn("outstanding", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnoutstanding)
            Me.columncust_id = New Global.System.Data.DataColumn("cust_id", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncust_id)
            Me.columnemployee_id = New Global.System.Data.DataColumn("employee_id", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnemployee_id)
            Me.columnDPP_No.AllowDBNull = false
            Me.columnDPP_No.MaxLength = 9
            Me.columnfaktur_no.AllowDBNull = false
            Me.columnfaktur_no.MaxLength = 10
            Me.columntgl_faktur.AllowDBNull = false
            Me.columntgl_jatuhtempo.AllowDBNull = false
            Me.columnproject_no.MaxLength = 10
            Me.columncustomer_name.MaxLength = 100
            Me.columnsalesman.MaxLength = 100
            Me.columnjumlah_uang.AllowDBNull = false
            Me.columnoutstanding.AllowDBNull = false
            Me.columncust_id.MaxLength = 10
            Me.columnemployee_id.MaxLength = 5
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_retrieve_DPPbyIDRow() As sp_retrieve_DPPbyIDRow
            Return CType(Me.NewRow,sp_retrieve_DPPbyIDRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_retrieve_DPPbyIDRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_retrieve_DPPbyIDRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_retrieve_DPPbyIDRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_retrieve_DPPbyIDRowChanged(Me, New sp_retrieve_DPPbyIDRowChangeEvent(CType(e.Row,sp_retrieve_DPPbyIDRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_retrieve_DPPbyIDRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_retrieve_DPPbyIDRowChanging(Me, New sp_retrieve_DPPbyIDRowChangeEvent(CType(e.Row,sp_retrieve_DPPbyIDRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_retrieve_DPPbyIDRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_retrieve_DPPbyIDRowDeleted(Me, New sp_retrieve_DPPbyIDRowChangeEvent(CType(e.Row,sp_retrieve_DPPbyIDRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_retrieve_DPPbyIDRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_retrieve_DPPbyIDRowDeleting(Me, New sp_retrieve_DPPbyIDRowChangeEvent(CType(e.Row,sp_retrieve_DPPbyIDRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_retrieve_DPPbyIDRow(ByVal row As sp_retrieve_DPPbyIDRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsReport = New dsReport
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_retrieve_DPPbyIDDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtInvoicePiutangDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFaktur_No As Global.System.Data.DataColumn
        
        Private columnTgl_Faktur As Global.System.Data.DataColumn
        
        Private columnTgl_JatuhTempo As Global.System.Data.DataColumn
        
        Private columnFaktur_Tipe As Global.System.Data.DataColumn
        
        Private columnCust_ID As Global.System.Data.DataColumn
        
        Private columnEmployee_ID As Global.System.Data.DataColumn
        
        Private columnProject_No As Global.System.Data.DataColumn
        
        Private columnJumlah_Uang As Global.System.Data.DataColumn
        
        Private columnKeterangan As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtInvoicePiutang"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Faktur_NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFaktur_No
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Tgl_FakturColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTgl_Faktur
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Tgl_JatuhTempoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTgl_JatuhTempo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Faktur_TipeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFaktur_Tipe
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Cust_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCust_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Employee_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmployee_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Project_NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProject_No
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Jumlah_UangColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJumlah_Uang
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property KeteranganColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnKeterangan
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtInvoicePiutangRow
            Get
                Return CType(Me.Rows(index),dtInvoicePiutangRow)
            End Get
        End Property
        
        Public Event dtInvoicePiutangRowChanging As dtInvoicePiutangRowChangeEventHandler
        
        Public Event dtInvoicePiutangRowChanged As dtInvoicePiutangRowChangeEventHandler
        
        Public Event dtInvoicePiutangRowDeleting As dtInvoicePiutangRowChangeEventHandler
        
        Public Event dtInvoicePiutangRowDeleted As dtInvoicePiutangRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtInvoicePiutangRow(ByVal row As dtInvoicePiutangRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtInvoicePiutangRow(ByVal Faktur_No As String, ByVal Tgl_Faktur As Date, ByVal Tgl_JatuhTempo As Date, ByVal Faktur_Tipe As String, ByVal Cust_ID As String, ByVal Employee_ID As String, ByVal Project_No As String, ByVal Jumlah_Uang As Decimal, ByVal Keterangan As String) As dtInvoicePiutangRow
            Dim rowdtInvoicePiutangRow As dtInvoicePiutangRow = CType(Me.NewRow,dtInvoicePiutangRow)
            Dim columnValuesArray() As Object = New Object() {Faktur_No, Tgl_Faktur, Tgl_JatuhTempo, Faktur_Tipe, Cust_ID, Employee_ID, Project_No, Jumlah_Uang, Keterangan}
            rowdtInvoicePiutangRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtInvoicePiutangRow)
            Return rowdtInvoicePiutangRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFaktur_No(ByVal Faktur_No As String) As dtInvoicePiutangRow
            Return CType(Me.Rows.Find(New Object() {Faktur_No}),dtInvoicePiutangRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtInvoicePiutangDataTable = CType(MyBase.Clone,dtInvoicePiutangDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtInvoicePiutangDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFaktur_No = MyBase.Columns("Faktur_No")
            Me.columnTgl_Faktur = MyBase.Columns("Tgl_Faktur")
            Me.columnTgl_JatuhTempo = MyBase.Columns("Tgl_JatuhTempo")
            Me.columnFaktur_Tipe = MyBase.Columns("Faktur_Tipe")
            Me.columnCust_ID = MyBase.Columns("Cust_ID")
            Me.columnEmployee_ID = MyBase.Columns("Employee_ID")
            Me.columnProject_No = MyBase.Columns("Project_No")
            Me.columnJumlah_Uang = MyBase.Columns("Jumlah_Uang")
            Me.columnKeterangan = MyBase.Columns("Keterangan")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFaktur_No = New Global.System.Data.DataColumn("Faktur_No", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFaktur_No)
            Me.columnTgl_Faktur = New Global.System.Data.DataColumn("Tgl_Faktur", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTgl_Faktur)
            Me.columnTgl_JatuhTempo = New Global.System.Data.DataColumn("Tgl_JatuhTempo", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTgl_JatuhTempo)
            Me.columnFaktur_Tipe = New Global.System.Data.DataColumn("Faktur_Tipe", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFaktur_Tipe)
            Me.columnCust_ID = New Global.System.Data.DataColumn("Cust_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCust_ID)
            Me.columnEmployee_ID = New Global.System.Data.DataColumn("Employee_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmployee_ID)
            Me.columnProject_No = New Global.System.Data.DataColumn("Project_No", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProject_No)
            Me.columnJumlah_Uang = New Global.System.Data.DataColumn("Jumlah_Uang", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJumlah_Uang)
            Me.columnKeterangan = New Global.System.Data.DataColumn("Keterangan", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKeterangan)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFaktur_No}, true))
            Me.columnFaktur_No.AllowDBNull = false
            Me.columnFaktur_No.Unique = true
            Me.columnFaktur_No.MaxLength = 10
            Me.columnTgl_Faktur.AllowDBNull = false
            Me.columnFaktur_Tipe.MaxLength = 20
            Me.columnCust_ID.AllowDBNull = false
            Me.columnCust_ID.MaxLength = 10
            Me.columnEmployee_ID.AllowDBNull = false
            Me.columnEmployee_ID.MaxLength = 10
            Me.columnProject_No.AllowDBNull = false
            Me.columnProject_No.MaxLength = 10
            Me.columnJumlah_Uang.AllowDBNull = false
            Me.columnKeterangan.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtInvoicePiutangRow() As dtInvoicePiutangRow
            Return CType(Me.NewRow,dtInvoicePiutangRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtInvoicePiutangRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtInvoicePiutangRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtInvoicePiutangRowChangedEvent) Is Nothing) Then
                RaiseEvent dtInvoicePiutangRowChanged(Me, New dtInvoicePiutangRowChangeEvent(CType(e.Row,dtInvoicePiutangRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtInvoicePiutangRowChangingEvent) Is Nothing) Then
                RaiseEvent dtInvoicePiutangRowChanging(Me, New dtInvoicePiutangRowChangeEvent(CType(e.Row,dtInvoicePiutangRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtInvoicePiutangRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtInvoicePiutangRowDeleted(Me, New dtInvoicePiutangRowChangeEvent(CType(e.Row,dtInvoicePiutangRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtInvoicePiutangRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtInvoicePiutangRowDeleting(Me, New dtInvoicePiutangRowChangeEvent(CType(e.Row,dtInvoicePiutangRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtInvoicePiutangRow(ByVal row As dtInvoicePiutangRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsReport = New dsReport
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtInvoicePiutangDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtDaftarPelunasanHutangDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnDPH_No As Global.System.Data.DataColumn
        
        Private columnSupp_ID As Global.System.Data.DataColumn
        
        Private columnNama As Global.System.Data.DataColumn
        
        Private columnTgl_Terima_Barang As Global.System.Data.DataColumn
        
        Private columnFaktur_no As Global.System.Data.DataColumn
        
        Private columnSuratJalan_no As Global.System.Data.DataColumn
        
        Private columnNo_BST As Global.System.Data.DataColumn
        
        Private columnJatuh_Tempo As Global.System.Data.DataColumn
        
        Private columnOutstanding As Global.System.Data.DataColumn
        
        Private columnNilaiPO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtDaftarPelunasanHutang"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DPH_NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDPH_No
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Supp_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSupp_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NamaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNama
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Tgl_Terima_BarangColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTgl_Terima_Barang
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Faktur_noColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFaktur_no
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SuratJalan_noColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSuratJalan_no
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property No_BSTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNo_BST
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Jatuh_TempoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJatuh_Tempo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OutstandingColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOutstanding
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NilaiPOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNilaiPO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtDaftarPelunasanHutangRow
            Get
                Return CType(Me.Rows(index),dtDaftarPelunasanHutangRow)
            End Get
        End Property
        
        Public Event dtDaftarPelunasanHutangRowChanging As dtDaftarPelunasanHutangRowChangeEventHandler
        
        Public Event dtDaftarPelunasanHutangRowChanged As dtDaftarPelunasanHutangRowChangeEventHandler
        
        Public Event dtDaftarPelunasanHutangRowDeleting As dtDaftarPelunasanHutangRowChangeEventHandler
        
        Public Event dtDaftarPelunasanHutangRowDeleted As dtDaftarPelunasanHutangRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtDaftarPelunasanHutangRow(ByVal row As dtDaftarPelunasanHutangRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtDaftarPelunasanHutangRow(ByVal DPH_No As String, ByVal Supp_ID As String, ByVal Nama As String, ByVal Tgl_Terima_Barang As Date, ByVal Faktur_no As String, ByVal SuratJalan_no As String, ByVal No_BST As String, ByVal Jatuh_Tempo As Date, ByVal Outstanding As Decimal, ByVal NilaiPO As Decimal) As dtDaftarPelunasanHutangRow
            Dim rowdtDaftarPelunasanHutangRow As dtDaftarPelunasanHutangRow = CType(Me.NewRow,dtDaftarPelunasanHutangRow)
            Dim columnValuesArray() As Object = New Object() {DPH_No, Supp_ID, Nama, Tgl_Terima_Barang, Faktur_no, SuratJalan_no, No_BST, Jatuh_Tempo, Outstanding, NilaiPO}
            rowdtDaftarPelunasanHutangRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtDaftarPelunasanHutangRow)
            Return rowdtDaftarPelunasanHutangRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByDPH_NoSupp_IDNo_BST(ByVal DPH_No As String, ByVal Supp_ID As String, ByVal No_BST As String) As dtDaftarPelunasanHutangRow
            Return CType(Me.Rows.Find(New Object() {DPH_No, Supp_ID, No_BST}),dtDaftarPelunasanHutangRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtDaftarPelunasanHutangDataTable = CType(MyBase.Clone,dtDaftarPelunasanHutangDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtDaftarPelunasanHutangDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnDPH_No = MyBase.Columns("DPH_No")
            Me.columnSupp_ID = MyBase.Columns("Supp_ID")
            Me.columnNama = MyBase.Columns("Nama")
            Me.columnTgl_Terima_Barang = MyBase.Columns("Tgl_Terima_Barang")
            Me.columnFaktur_no = MyBase.Columns("Faktur_no")
            Me.columnSuratJalan_no = MyBase.Columns("SuratJalan_no")
            Me.columnNo_BST = MyBase.Columns("No_BST")
            Me.columnJatuh_Tempo = MyBase.Columns("Jatuh_Tempo")
            Me.columnOutstanding = MyBase.Columns("Outstanding")
            Me.columnNilaiPO = MyBase.Columns("NilaiPO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnDPH_No = New Global.System.Data.DataColumn("DPH_No", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDPH_No)
            Me.columnSupp_ID = New Global.System.Data.DataColumn("Supp_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSupp_ID)
            Me.columnNama = New Global.System.Data.DataColumn("Nama", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNama)
            Me.columnTgl_Terima_Barang = New Global.System.Data.DataColumn("Tgl_Terima_Barang", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTgl_Terima_Barang)
            Me.columnFaktur_no = New Global.System.Data.DataColumn("Faktur_no", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFaktur_no)
            Me.columnSuratJalan_no = New Global.System.Data.DataColumn("SuratJalan_no", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSuratJalan_no)
            Me.columnNo_BST = New Global.System.Data.DataColumn("No_BST", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNo_BST)
            Me.columnJatuh_Tempo = New Global.System.Data.DataColumn("Jatuh_Tempo", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJatuh_Tempo)
            Me.columnOutstanding = New Global.System.Data.DataColumn("Outstanding", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOutstanding)
            Me.columnNilaiPO = New Global.System.Data.DataColumn("NilaiPO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNilaiPO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnDPH_No, Me.columnSupp_ID, Me.columnNo_BST}, true))
            Me.columnDPH_No.AllowDBNull = false
            Me.columnDPH_No.MaxLength = 9
            Me.columnSupp_ID.AllowDBNull = false
            Me.columnSupp_ID.MaxLength = 5
            Me.columnNama.MaxLength = 50
            Me.columnTgl_Terima_Barang.AllowDBNull = false
            Me.columnFaktur_no.AllowDBNull = false
            Me.columnFaktur_no.MaxLength = 10
            Me.columnSuratJalan_no.AllowDBNull = false
            Me.columnSuratJalan_no.MaxLength = 10
            Me.columnNo_BST.AllowDBNull = false
            Me.columnNo_BST.MaxLength = 10
            Me.columnJatuh_Tempo.AllowDBNull = false
            Me.columnOutstanding.AllowDBNull = false
            Me.columnNilaiPO.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtDaftarPelunasanHutangRow() As dtDaftarPelunasanHutangRow
            Return CType(Me.NewRow,dtDaftarPelunasanHutangRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtDaftarPelunasanHutangRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtDaftarPelunasanHutangRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtDaftarPelunasanHutangRowChangedEvent) Is Nothing) Then
                RaiseEvent dtDaftarPelunasanHutangRowChanged(Me, New dtDaftarPelunasanHutangRowChangeEvent(CType(e.Row,dtDaftarPelunasanHutangRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtDaftarPelunasanHutangRowChangingEvent) Is Nothing) Then
                RaiseEvent dtDaftarPelunasanHutangRowChanging(Me, New dtDaftarPelunasanHutangRowChangeEvent(CType(e.Row,dtDaftarPelunasanHutangRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtDaftarPelunasanHutangRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtDaftarPelunasanHutangRowDeleted(Me, New dtDaftarPelunasanHutangRowChangeEvent(CType(e.Row,dtDaftarPelunasanHutangRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtDaftarPelunasanHutangRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtDaftarPelunasanHutangRowDeleting(Me, New dtDaftarPelunasanHutangRowChangeEvent(CType(e.Row,dtDaftarPelunasanHutangRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtDaftarPelunasanHutangRow(ByVal row As dtDaftarPelunasanHutangRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsReport = New dsReport
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtDaftarPelunasanHutangDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtGLDetailDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnjournalDate As Global.System.Data.DataColumn
        
        Private columnaccountid As Global.System.Data.DataColumn
        
        Private columnaccount_name As Global.System.Data.DataColumn
        
        Private columnnotes As Global.System.Data.DataColumn
        
        Private columnjournalID As Global.System.Data.DataColumn
        
        Private columnrefno As Global.System.Data.DataColumn
        
        Private columnsaldoawal As Global.System.Data.DataColumn
        
        Private columnamountDR As Global.System.Data.DataColumn
        
        Private columnamountCR As Global.System.Data.DataColumn
        
        Private columnsaldoakhir As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtGLDetail"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property journalDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnjournalDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property accountidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnaccountid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property account_nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnaccount_name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property notesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnotes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property journalIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnjournalID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property refnoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrefno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property saldoawalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsaldoawal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property amountDRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnamountDR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property amountCRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnamountCR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property saldoakhirColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsaldoakhir
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtGLDetailRow
            Get
                Return CType(Me.Rows(index),dtGLDetailRow)
            End Get
        End Property
        
        Public Event dtGLDetailRowChanging As dtGLDetailRowChangeEventHandler
        
        Public Event dtGLDetailRowChanged As dtGLDetailRowChangeEventHandler
        
        Public Event dtGLDetailRowDeleting As dtGLDetailRowChangeEventHandler
        
        Public Event dtGLDetailRowDeleted As dtGLDetailRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtGLDetailRow(ByVal row As dtGLDetailRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtGLDetailRow(ByVal journalDate As Date, ByVal accountid As String, ByVal account_name As String, ByVal notes As String, ByVal journalID As String, ByVal refno As String, ByVal saldoawal As String, ByVal amountDR As Double, ByVal amountCR As Double, ByVal saldoakhir As String) As dtGLDetailRow
            Dim rowdtGLDetailRow As dtGLDetailRow = CType(Me.NewRow,dtGLDetailRow)
            Dim columnValuesArray() As Object = New Object() {journalDate, accountid, account_name, notes, journalID, refno, saldoawal, amountDR, amountCR, saldoakhir}
            rowdtGLDetailRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtGLDetailRow)
            Return rowdtGLDetailRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtGLDetailDataTable = CType(MyBase.Clone,dtGLDetailDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtGLDetailDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnjournalDate = MyBase.Columns("journalDate")
            Me.columnaccountid = MyBase.Columns("accountid")
            Me.columnaccount_name = MyBase.Columns("account_name")
            Me.columnnotes = MyBase.Columns("notes")
            Me.columnjournalID = MyBase.Columns("journalID")
            Me.columnrefno = MyBase.Columns("refno")
            Me.columnsaldoawal = MyBase.Columns("saldoawal")
            Me.columnamountDR = MyBase.Columns("amountDR")
            Me.columnamountCR = MyBase.Columns("amountCR")
            Me.columnsaldoakhir = MyBase.Columns("saldoakhir")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnjournalDate = New Global.System.Data.DataColumn("journalDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnjournalDate)
            Me.columnaccountid = New Global.System.Data.DataColumn("accountid", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnaccountid)
            Me.columnaccount_name = New Global.System.Data.DataColumn("account_name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnaccount_name)
            Me.columnnotes = New Global.System.Data.DataColumn("notes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnotes)
            Me.columnjournalID = New Global.System.Data.DataColumn("journalID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnjournalID)
            Me.columnrefno = New Global.System.Data.DataColumn("refno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrefno)
            Me.columnsaldoawal = New Global.System.Data.DataColumn("saldoawal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsaldoawal)
            Me.columnamountDR = New Global.System.Data.DataColumn("amountDR", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnamountDR)
            Me.columnamountCR = New Global.System.Data.DataColumn("amountCR", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnamountCR)
            Me.columnsaldoakhir = New Global.System.Data.DataColumn("saldoakhir", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsaldoakhir)
            Me.columnaccountid.AllowDBNull = false
            Me.columnaccountid.MaxLength = 50
            Me.columnaccount_name.MaxLength = 200
            Me.columnnotes.MaxLength = 300
            Me.columnjournalID.AllowDBNull = false
            Me.columnjournalID.MaxLength = 50
            Me.columnrefno.MaxLength = 50
            Me.columnsaldoawal.ReadOnly = true
            Me.columnsaldoawal.MaxLength = 1
            Me.columnsaldoakhir.ReadOnly = true
            Me.columnsaldoakhir.MaxLength = 1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtGLDetailRow() As dtGLDetailRow
            Return CType(Me.NewRow,dtGLDetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtGLDetailRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtGLDetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtGLDetailRowChangedEvent) Is Nothing) Then
                RaiseEvent dtGLDetailRowChanged(Me, New dtGLDetailRowChangeEvent(CType(e.Row,dtGLDetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtGLDetailRowChangingEvent) Is Nothing) Then
                RaiseEvent dtGLDetailRowChanging(Me, New dtGLDetailRowChangeEvent(CType(e.Row,dtGLDetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtGLDetailRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtGLDetailRowDeleted(Me, New dtGLDetailRowChangeEvent(CType(e.Row,dtGLDetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtGLDetailRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtGLDetailRowDeleting(Me, New dtGLDetailRowChangeEvent(CType(e.Row,dtGLDetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtGLDetailRow(ByVal row As dtGLDetailRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsReport = New dsReport
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtGLDetailDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtReportPODataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPO_Date As Global.System.Data.DataColumn
        
        Private columnSupplier_ID As Global.System.Data.DataColumn
        
        Private columnNama As Global.System.Data.DataColumn
        
        Private columnTB_No As Global.System.Data.DataColumn
        
        Private columnPO_No As Global.System.Data.DataColumn
        
        Private columnTB_Date As Global.System.Data.DataColumn
        
        Private columnWarehouse_ID As Global.System.Data.DataColumn
        
        Private columnWarehouse_Name As Global.System.Data.DataColumn
        
        Private columnItem_ID As Global.System.Data.DataColumn
        
        Private columnItem_Name As Global.System.Data.DataColumn
        
        Private columnUoM As Global.System.Data.DataColumn
        
        Private columnQty_Rec As Global.System.Data.DataColumn
        
        Private columnPrice As Global.System.Data.DataColumn
        
        Private columnDiskon As Global.System.Data.DataColumn
        
        Private columnSubTotal As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtReportPO"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PO_DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPO_Date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Supplier_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSupplier_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NamaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNama
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TB_NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTB_No
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PO_NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPO_No
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TB_DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTB_Date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Warehouse_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWarehouse_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Warehouse_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWarehouse_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Item_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItem_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Item_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItem_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UoMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUoM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Qty_RecColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQty_Rec
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrice
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DiskonColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDiskon
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubTotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubTotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtReportPORow
            Get
                Return CType(Me.Rows(index),dtReportPORow)
            End Get
        End Property
        
        Public Event dtReportPORowChanging As dtReportPORowChangeEventHandler
        
        Public Event dtReportPORowChanged As dtReportPORowChangeEventHandler
        
        Public Event dtReportPORowDeleting As dtReportPORowChangeEventHandler
        
        Public Event dtReportPORowDeleted As dtReportPORowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtReportPORow(ByVal row As dtReportPORow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtReportPORow(ByVal PO_Date As Date, ByVal Supplier_ID As String, ByVal Nama As String, ByVal TB_No As String, ByVal PO_No As String, ByVal TB_Date As Date, ByVal Warehouse_ID As String, ByVal Warehouse_Name As String, ByVal Item_ID As String, ByVal Item_Name As String, ByVal UoM As String, ByVal Qty_Rec As Integer, ByVal Price As Decimal, ByVal Diskon As Decimal, ByVal SubTotal As Decimal) As dtReportPORow
            Dim rowdtReportPORow As dtReportPORow = CType(Me.NewRow,dtReportPORow)
            Dim columnValuesArray() As Object = New Object() {PO_Date, Supplier_ID, Nama, TB_No, PO_No, TB_Date, Warehouse_ID, Warehouse_Name, Item_ID, Item_Name, UoM, Qty_Rec, Price, Diskon, SubTotal}
            rowdtReportPORow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtReportPORow)
            Return rowdtReportPORow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtReportPODataTable = CType(MyBase.Clone,dtReportPODataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtReportPODataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPO_Date = MyBase.Columns("PO_Date")
            Me.columnSupplier_ID = MyBase.Columns("Supplier_ID")
            Me.columnNama = MyBase.Columns("Nama")
            Me.columnTB_No = MyBase.Columns("TB_No")
            Me.columnPO_No = MyBase.Columns("PO_No")
            Me.columnTB_Date = MyBase.Columns("TB_Date")
            Me.columnWarehouse_ID = MyBase.Columns("Warehouse_ID")
            Me.columnWarehouse_Name = MyBase.Columns("Warehouse_Name")
            Me.columnItem_ID = MyBase.Columns("Item_ID")
            Me.columnItem_Name = MyBase.Columns("Item_Name")
            Me.columnUoM = MyBase.Columns("UoM")
            Me.columnQty_Rec = MyBase.Columns("Qty_Rec")
            Me.columnPrice = MyBase.Columns("Price")
            Me.columnDiskon = MyBase.Columns("Diskon")
            Me.columnSubTotal = MyBase.Columns("SubTotal")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPO_Date = New Global.System.Data.DataColumn("PO_Date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPO_Date)
            Me.columnSupplier_ID = New Global.System.Data.DataColumn("Supplier_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSupplier_ID)
            Me.columnNama = New Global.System.Data.DataColumn("Nama", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNama)
            Me.columnTB_No = New Global.System.Data.DataColumn("TB_No", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTB_No)
            Me.columnPO_No = New Global.System.Data.DataColumn("PO_No", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPO_No)
            Me.columnTB_Date = New Global.System.Data.DataColumn("TB_Date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTB_Date)
            Me.columnWarehouse_ID = New Global.System.Data.DataColumn("Warehouse_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWarehouse_ID)
            Me.columnWarehouse_Name = New Global.System.Data.DataColumn("Warehouse_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWarehouse_Name)
            Me.columnItem_ID = New Global.System.Data.DataColumn("Item_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItem_ID)
            Me.columnItem_Name = New Global.System.Data.DataColumn("Item_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItem_Name)
            Me.columnUoM = New Global.System.Data.DataColumn("UoM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUoM)
            Me.columnQty_Rec = New Global.System.Data.DataColumn("Qty_Rec", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQty_Rec)
            Me.columnPrice = New Global.System.Data.DataColumn("Price", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrice)
            Me.columnDiskon = New Global.System.Data.DataColumn("Diskon", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDiskon)
            Me.columnSubTotal = New Global.System.Data.DataColumn("SubTotal", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubTotal)
            Me.columnPO_Date.AllowDBNull = false
            Me.columnSupplier_ID.AllowDBNull = false
            Me.columnSupplier_ID.MaxLength = 10
            Me.columnNama.MaxLength = 50
            Me.columnTB_No.AllowDBNull = false
            Me.columnTB_No.MaxLength = 9
            Me.columnPO_No.AllowDBNull = false
            Me.columnPO_No.MaxLength = 9
            Me.columnTB_Date.AllowDBNull = false
            Me.columnWarehouse_ID.AllowDBNull = false
            Me.columnWarehouse_ID.MaxLength = 5
            Me.columnWarehouse_Name.MaxLength = 100
            Me.columnItem_ID.AllowDBNull = false
            Me.columnItem_ID.MaxLength = 10
            Me.columnItem_Name.MaxLength = 100
            Me.columnUoM.MaxLength = 10
            Me.columnQty_Rec.AllowDBNull = false
            Me.columnPrice.AllowDBNull = false
            Me.columnSubTotal.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtReportPORow() As dtReportPORow
            Return CType(Me.NewRow,dtReportPORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtReportPORow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtReportPORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtReportPORowChangedEvent) Is Nothing) Then
                RaiseEvent dtReportPORowChanged(Me, New dtReportPORowChangeEvent(CType(e.Row,dtReportPORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtReportPORowChangingEvent) Is Nothing) Then
                RaiseEvent dtReportPORowChanging(Me, New dtReportPORowChangeEvent(CType(e.Row,dtReportPORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtReportPORowDeletedEvent) Is Nothing) Then
                RaiseEvent dtReportPORowDeleted(Me, New dtReportPORowChangeEvent(CType(e.Row,dtReportPORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtReportPORowDeletingEvent) Is Nothing) Then
                RaiseEvent dtReportPORowDeleting(Me, New dtReportPORowChangeEvent(CType(e.Row,dtReportPORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtReportPORow(ByVal row As dtReportPORow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsReport = New dsReport
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtReportPODataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtPembayaranKartuHutangDSDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnTanggal As Global.System.Data.DataColumn
        
        Private columnTB_no As Global.System.Data.DataColumn
        
        Private columnDoc_No As Global.System.Data.DataColumn
        
        Private columnsaldoawal As Global.System.Data.DataColumn
        
        Private columnjumlah_bayar As Global.System.Data.DataColumn
        
        Private columnretur As Global.System.Data.DataColumn
        
        Private columnpotongan As Global.System.Data.DataColumn
        
        Private columnsaldoakhir As Global.System.Data.DataColumn
        
        Private columnketerangan As Global.System.Data.DataColumn
        
        Private columnnama As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtPembayaranKartuHutangDS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TanggalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTanggal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TB_noColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTB_no
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Doc_NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDoc_No
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property saldoawalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsaldoawal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property jumlah_bayarColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnjumlah_bayar
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property returColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnretur
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property potonganColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpotongan
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property saldoakhirColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsaldoakhir
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property keteranganColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnketerangan
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property namaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnama
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtPembayaranKartuHutangDSRow
            Get
                Return CType(Me.Rows(index),dtPembayaranKartuHutangDSRow)
            End Get
        End Property
        
        Public Event dtPembayaranKartuHutangDSRowChanging As dtPembayaranKartuHutangDSRowChangeEventHandler
        
        Public Event dtPembayaranKartuHutangDSRowChanged As dtPembayaranKartuHutangDSRowChangeEventHandler
        
        Public Event dtPembayaranKartuHutangDSRowDeleting As dtPembayaranKartuHutangDSRowChangeEventHandler
        
        Public Event dtPembayaranKartuHutangDSRowDeleted As dtPembayaranKartuHutangDSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtPembayaranKartuHutangDSRow(ByVal row As dtPembayaranKartuHutangDSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtPembayaranKartuHutangDSRow(ByVal Tanggal As Date, ByVal TB_no As String, ByVal Doc_No As String, ByVal saldoawal As String, ByVal jumlah_bayar As Decimal, ByVal retur As Decimal, ByVal potongan As Decimal, ByVal saldoakhir As String, ByVal keterangan As String, ByVal nama As String) As dtPembayaranKartuHutangDSRow
            Dim rowdtPembayaranKartuHutangDSRow As dtPembayaranKartuHutangDSRow = CType(Me.NewRow,dtPembayaranKartuHutangDSRow)
            Dim columnValuesArray() As Object = New Object() {Tanggal, TB_no, Doc_No, saldoawal, jumlah_bayar, retur, potongan, saldoakhir, keterangan, nama}
            rowdtPembayaranKartuHutangDSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtPembayaranKartuHutangDSRow)
            Return rowdtPembayaranKartuHutangDSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtPembayaranKartuHutangDSDataTable = CType(MyBase.Clone,dtPembayaranKartuHutangDSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtPembayaranKartuHutangDSDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnTanggal = MyBase.Columns("Tanggal")
            Me.columnTB_no = MyBase.Columns("TB_no")
            Me.columnDoc_No = MyBase.Columns("Doc_No")
            Me.columnsaldoawal = MyBase.Columns("saldoawal")
            Me.columnjumlah_bayar = MyBase.Columns("jumlah_bayar")
            Me.columnretur = MyBase.Columns("retur")
            Me.columnpotongan = MyBase.Columns("potongan")
            Me.columnsaldoakhir = MyBase.Columns("saldoakhir")
            Me.columnketerangan = MyBase.Columns("keterangan")
            Me.columnnama = MyBase.Columns("nama")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnTanggal = New Global.System.Data.DataColumn("Tanggal", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTanggal)
            Me.columnTB_no = New Global.System.Data.DataColumn("TB_no", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTB_no)
            Me.columnDoc_No = New Global.System.Data.DataColumn("Doc_No", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDoc_No)
            Me.columnsaldoawal = New Global.System.Data.DataColumn("saldoawal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsaldoawal)
            Me.columnjumlah_bayar = New Global.System.Data.DataColumn("jumlah_bayar", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnjumlah_bayar)
            Me.columnretur = New Global.System.Data.DataColumn("retur", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnretur)
            Me.columnpotongan = New Global.System.Data.DataColumn("potongan", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpotongan)
            Me.columnsaldoakhir = New Global.System.Data.DataColumn("saldoakhir", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsaldoakhir)
            Me.columnketerangan = New Global.System.Data.DataColumn("keterangan", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnketerangan)
            Me.columnnama = New Global.System.Data.DataColumn("nama", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnama)
            Me.columnTanggal.ReadOnly = true
            Me.columnTB_no.ReadOnly = true
            Me.columnTB_no.MaxLength = 9
            Me.columnDoc_No.ReadOnly = true
            Me.columnDoc_No.MaxLength = 9
            Me.columnsaldoawal.ReadOnly = true
            Me.columnsaldoawal.MaxLength = 1
            Me.columnjumlah_bayar.ReadOnly = true
            Me.columnretur.ReadOnly = true
            Me.columnpotongan.ReadOnly = true
            Me.columnsaldoakhir.ReadOnly = true
            Me.columnsaldoakhir.MaxLength = 1
            Me.columnketerangan.ReadOnly = true
            Me.columnketerangan.MaxLength = 50
            Me.columnnama.ReadOnly = true
            Me.columnnama.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtPembayaranKartuHutangDSRow() As dtPembayaranKartuHutangDSRow
            Return CType(Me.NewRow,dtPembayaranKartuHutangDSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtPembayaranKartuHutangDSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtPembayaranKartuHutangDSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtPembayaranKartuHutangDSRowChangedEvent) Is Nothing) Then
                RaiseEvent dtPembayaranKartuHutangDSRowChanged(Me, New dtPembayaranKartuHutangDSRowChangeEvent(CType(e.Row,dtPembayaranKartuHutangDSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtPembayaranKartuHutangDSRowChangingEvent) Is Nothing) Then
                RaiseEvent dtPembayaranKartuHutangDSRowChanging(Me, New dtPembayaranKartuHutangDSRowChangeEvent(CType(e.Row,dtPembayaranKartuHutangDSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtPembayaranKartuHutangDSRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtPembayaranKartuHutangDSRowDeleted(Me, New dtPembayaranKartuHutangDSRowChangeEvent(CType(e.Row,dtPembayaranKartuHutangDSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtPembayaranKartuHutangDSRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtPembayaranKartuHutangDSRowDeleting(Me, New dtPembayaranKartuHutangDSRowChangeEvent(CType(e.Row,dtPembayaranKartuHutangDSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtPembayaranKartuHutangDSRow(ByVal row As dtPembayaranKartuHutangDSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsReport = New dsReport
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtPembayaranKartuHutangDSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtReportOrderMaintenanceDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnOrderMaint_No As Global.System.Data.DataColumn
        
        Private columnOrderMaint_dt As Global.System.Data.DataColumn
        
        Private columnCustomer As Global.System.Data.DataColumn
        
        Private columnProject_No As Global.System.Data.DataColumn
        
        Private columnLocation As Global.System.Data.DataColumn
        
        Private columnPIC As Global.System.Data.DataColumn
        
        Private columnTelepon As Global.System.Data.DataColumn
        
        Private columnStatus As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtReportOrderMaintenance"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OrderMaint_NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrderMaint_No
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OrderMaint_dtColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrderMaint_dt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustomerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustomer
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Project_NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProject_No
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LocationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLocation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PICColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPIC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TeleponColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTelepon
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtReportOrderMaintenanceRow
            Get
                Return CType(Me.Rows(index),dtReportOrderMaintenanceRow)
            End Get
        End Property
        
        Public Event dtReportOrderMaintenanceRowChanging As dtReportOrderMaintenanceRowChangeEventHandler
        
        Public Event dtReportOrderMaintenanceRowChanged As dtReportOrderMaintenanceRowChangeEventHandler
        
        Public Event dtReportOrderMaintenanceRowDeleting As dtReportOrderMaintenanceRowChangeEventHandler
        
        Public Event dtReportOrderMaintenanceRowDeleted As dtReportOrderMaintenanceRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtReportOrderMaintenanceRow(ByVal row As dtReportOrderMaintenanceRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtReportOrderMaintenanceRow(ByVal OrderMaint_No As String, ByVal OrderMaint_dt As Date, ByVal Customer As String, ByVal Project_No As String, ByVal Location As String, ByVal PIC As String, ByVal Telepon As String, ByVal Status As String) As dtReportOrderMaintenanceRow
            Dim rowdtReportOrderMaintenanceRow As dtReportOrderMaintenanceRow = CType(Me.NewRow,dtReportOrderMaintenanceRow)
            Dim columnValuesArray() As Object = New Object() {OrderMaint_No, OrderMaint_dt, Customer, Project_No, Location, PIC, Telepon, Status}
            rowdtReportOrderMaintenanceRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtReportOrderMaintenanceRow)
            Return rowdtReportOrderMaintenanceRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByOrderMaint_No(ByVal OrderMaint_No As String) As dtReportOrderMaintenanceRow
            Return CType(Me.Rows.Find(New Object() {OrderMaint_No}),dtReportOrderMaintenanceRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtReportOrderMaintenanceDataTable = CType(MyBase.Clone,dtReportOrderMaintenanceDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtReportOrderMaintenanceDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnOrderMaint_No = MyBase.Columns("OrderMaint_No")
            Me.columnOrderMaint_dt = MyBase.Columns("OrderMaint_dt")
            Me.columnCustomer = MyBase.Columns("Customer")
            Me.columnProject_No = MyBase.Columns("Project_No")
            Me.columnLocation = MyBase.Columns("Location")
            Me.columnPIC = MyBase.Columns("PIC")
            Me.columnTelepon = MyBase.Columns("Telepon")
            Me.columnStatus = MyBase.Columns("Status")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnOrderMaint_No = New Global.System.Data.DataColumn("OrderMaint_No", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrderMaint_No)
            Me.columnOrderMaint_dt = New Global.System.Data.DataColumn("OrderMaint_dt", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrderMaint_dt)
            Me.columnCustomer = New Global.System.Data.DataColumn("Customer", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustomer)
            Me.columnProject_No = New Global.System.Data.DataColumn("Project_No", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProject_No)
            Me.columnLocation = New Global.System.Data.DataColumn("Location", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLocation)
            Me.columnPIC = New Global.System.Data.DataColumn("PIC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPIC)
            Me.columnTelepon = New Global.System.Data.DataColumn("Telepon", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTelepon)
            Me.columnStatus = New Global.System.Data.DataColumn("Status", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatus)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnOrderMaint_No}, true))
            Me.columnOrderMaint_No.AllowDBNull = false
            Me.columnOrderMaint_No.Unique = true
            Me.columnOrderMaint_No.MaxLength = 10
            Me.columnOrderMaint_dt.AllowDBNull = false
            Me.columnCustomer.ReadOnly = true
            Me.columnCustomer.MaxLength = 113
            Me.columnProject_No.AllowDBNull = false
            Me.columnProject_No.MaxLength = 9
            Me.columnLocation.MaxLength = 100
            Me.columnPIC.MaxLength = 50
            Me.columnTelepon.MaxLength = 30
            Me.columnStatus.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtReportOrderMaintenanceRow() As dtReportOrderMaintenanceRow
            Return CType(Me.NewRow,dtReportOrderMaintenanceRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtReportOrderMaintenanceRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtReportOrderMaintenanceRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtReportOrderMaintenanceRowChangedEvent) Is Nothing) Then
                RaiseEvent dtReportOrderMaintenanceRowChanged(Me, New dtReportOrderMaintenanceRowChangeEvent(CType(e.Row,dtReportOrderMaintenanceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtReportOrderMaintenanceRowChangingEvent) Is Nothing) Then
                RaiseEvent dtReportOrderMaintenanceRowChanging(Me, New dtReportOrderMaintenanceRowChangeEvent(CType(e.Row,dtReportOrderMaintenanceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtReportOrderMaintenanceRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtReportOrderMaintenanceRowDeleted(Me, New dtReportOrderMaintenanceRowChangeEvent(CType(e.Row,dtReportOrderMaintenanceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtReportOrderMaintenanceRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtReportOrderMaintenanceRowDeleting(Me, New dtReportOrderMaintenanceRowChangeEvent(CType(e.Row,dtReportOrderMaintenanceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtReportOrderMaintenanceRow(ByVal row As dtReportOrderMaintenanceRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsReport = New dsReport
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtReportOrderMaintenanceDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtReportBPBDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnBPB_No As Global.System.Data.DataColumn
        
        Private columnBPB_Date As Global.System.Data.DataColumn
        
        Private columnCategory As Global.System.Data.DataColumn
        
        Private columnRef_No As Global.System.Data.DataColumn
        
        Private columnAccount_ID As Global.System.Data.DataColumn
        
        Private columnRequired_Date As Global.System.Data.DataColumn
        
        Private columnStatus As Global.System.Data.DataColumn
        
        Private columnItem_ID As Global.System.Data.DataColumn
        
        Private columnItem_Name As Global.System.Data.DataColumn
        
        Private columnQty_Required As Global.System.Data.DataColumn
        
        Private columnQty_Approved As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtReportBPB"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BPB_NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBPB_No
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BPB_DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBPB_Date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CategoryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCategory
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Ref_NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRef_No
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Account_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAccount_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Required_DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRequired_Date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Item_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItem_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Item_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItem_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Qty_RequiredColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQty_Required
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Qty_ApprovedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQty_Approved
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtReportBPBRow
            Get
                Return CType(Me.Rows(index),dtReportBPBRow)
            End Get
        End Property
        
        Public Event dtReportBPBRowChanging As dtReportBPBRowChangeEventHandler
        
        Public Event dtReportBPBRowChanged As dtReportBPBRowChangeEventHandler
        
        Public Event dtReportBPBRowDeleting As dtReportBPBRowChangeEventHandler
        
        Public Event dtReportBPBRowDeleted As dtReportBPBRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtReportBPBRow(ByVal row As dtReportBPBRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtReportBPBRow(ByVal BPB_No As String, ByVal BPB_Date As Date, ByVal Category As String, ByVal Ref_No As String, ByVal Account_ID As String, ByVal Required_Date As Date, ByVal Status As String, ByVal Item_ID As String, ByVal Item_Name As String, ByVal Qty_Required As Integer, ByVal Qty_Approved As Integer) As dtReportBPBRow
            Dim rowdtReportBPBRow As dtReportBPBRow = CType(Me.NewRow,dtReportBPBRow)
            Dim columnValuesArray() As Object = New Object() {BPB_No, BPB_Date, Category, Ref_No, Account_ID, Required_Date, Status, Item_ID, Item_Name, Qty_Required, Qty_Approved}
            rowdtReportBPBRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtReportBPBRow)
            Return rowdtReportBPBRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtReportBPBDataTable = CType(MyBase.Clone,dtReportBPBDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtReportBPBDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnBPB_No = MyBase.Columns("BPB_No")
            Me.columnBPB_Date = MyBase.Columns("BPB_Date")
            Me.columnCategory = MyBase.Columns("Category")
            Me.columnRef_No = MyBase.Columns("Ref_No")
            Me.columnAccount_ID = MyBase.Columns("Account_ID")
            Me.columnRequired_Date = MyBase.Columns("Required_Date")
            Me.columnStatus = MyBase.Columns("Status")
            Me.columnItem_ID = MyBase.Columns("Item_ID")
            Me.columnItem_Name = MyBase.Columns("Item_Name")
            Me.columnQty_Required = MyBase.Columns("Qty_Required")
            Me.columnQty_Approved = MyBase.Columns("Qty_Approved")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnBPB_No = New Global.System.Data.DataColumn("BPB_No", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBPB_No)
            Me.columnBPB_Date = New Global.System.Data.DataColumn("BPB_Date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBPB_Date)
            Me.columnCategory = New Global.System.Data.DataColumn("Category", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCategory)
            Me.columnRef_No = New Global.System.Data.DataColumn("Ref_No", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRef_No)
            Me.columnAccount_ID = New Global.System.Data.DataColumn("Account_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAccount_ID)
            Me.columnRequired_Date = New Global.System.Data.DataColumn("Required_Date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRequired_Date)
            Me.columnStatus = New Global.System.Data.DataColumn("Status", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatus)
            Me.columnItem_ID = New Global.System.Data.DataColumn("Item_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItem_ID)
            Me.columnItem_Name = New Global.System.Data.DataColumn("Item_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItem_Name)
            Me.columnQty_Required = New Global.System.Data.DataColumn("Qty_Required", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQty_Required)
            Me.columnQty_Approved = New Global.System.Data.DataColumn("Qty_Approved", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQty_Approved)
            Me.columnBPB_No.MaxLength = 9
            Me.columnCategory.MaxLength = 30
            Me.columnRef_No.MaxLength = 9
            Me.columnAccount_ID.MaxLength = 50
            Me.columnStatus.MaxLength = 50
            Me.columnItem_ID.AllowDBNull = false
            Me.columnItem_ID.MaxLength = 9
            Me.columnItem_Name.MaxLength = 100
            Me.columnQty_Required.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtReportBPBRow() As dtReportBPBRow
            Return CType(Me.NewRow,dtReportBPBRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtReportBPBRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtReportBPBRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtReportBPBRowChangedEvent) Is Nothing) Then
                RaiseEvent dtReportBPBRowChanged(Me, New dtReportBPBRowChangeEvent(CType(e.Row,dtReportBPBRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtReportBPBRowChangingEvent) Is Nothing) Then
                RaiseEvent dtReportBPBRowChanging(Me, New dtReportBPBRowChangeEvent(CType(e.Row,dtReportBPBRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtReportBPBRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtReportBPBRowDeleted(Me, New dtReportBPBRowChangeEvent(CType(e.Row,dtReportBPBRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtReportBPBRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtReportBPBRowDeleting(Me, New dtReportBPBRowChangeEvent(CType(e.Row,dtReportBPBRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtReportBPBRow(ByVal row As dtReportBPBRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsReport = New dsReport
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtReportBPBDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtRetrieveReportRekapPemakaianBahanPerSPKDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnProject_No As Global.System.Data.DataColumn
        
        Private columnSPK_No As Global.System.Data.DataColumn
        
        Private columnSPK_Date As Global.System.Data.DataColumn
        
        Private columnCust_ID As Global.System.Data.DataColumn
        
        Private columnNama As Global.System.Data.DataColumn
        
        Private columnItem_ID As Global.System.Data.DataColumn
        
        Private columnItem_Name As Global.System.Data.DataColumn
        
        Private columnUOM As Global.System.Data.DataColumn
        
        Private columnBPB_Date As Global.System.Data.DataColumn
        
        Private columnQtyPHM As Global.System.Data.DataColumn
        
        Private columnQty_Approved As Global.System.Data.DataColumn
        
        Private columnQty_Pakai As Global.System.Data.DataColumn
        
        Private columnProject_Name As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtRetrieveReportRekapPemakaianBahanPerSPK"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Project_NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProject_No
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SPK_NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSPK_No
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SPK_DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSPK_Date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Cust_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCust_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NamaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNama
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Item_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItem_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Item_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItem_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UOMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUOM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BPB_DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBPB_Date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QtyPHMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQtyPHM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Qty_ApprovedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQty_Approved
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Qty_PakaiColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQty_Pakai
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Project_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProject_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtRetrieveReportRekapPemakaianBahanPerSPKRow
            Get
                Return CType(Me.Rows(index),dtRetrieveReportRekapPemakaianBahanPerSPKRow)
            End Get
        End Property
        
        Public Event dtRetrieveReportRekapPemakaianBahanPerSPKRowChanging As dtRetrieveReportRekapPemakaianBahanPerSPKRowChangeEventHandler
        
        Public Event dtRetrieveReportRekapPemakaianBahanPerSPKRowChanged As dtRetrieveReportRekapPemakaianBahanPerSPKRowChangeEventHandler
        
        Public Event dtRetrieveReportRekapPemakaianBahanPerSPKRowDeleting As dtRetrieveReportRekapPemakaianBahanPerSPKRowChangeEventHandler
        
        Public Event dtRetrieveReportRekapPemakaianBahanPerSPKRowDeleted As dtRetrieveReportRekapPemakaianBahanPerSPKRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtRetrieveReportRekapPemakaianBahanPerSPKRow(ByVal row As dtRetrieveReportRekapPemakaianBahanPerSPKRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtRetrieveReportRekapPemakaianBahanPerSPKRow(ByVal Project_No As String, ByVal SPK_No As String, ByVal SPK_Date As Date, ByVal Cust_ID As String, ByVal Nama As String, ByVal Item_ID As String, ByVal Item_Name As String, ByVal UOM As String, ByVal BPB_Date As Date, ByVal QtyPHM As Integer, ByVal Qty_Approved As Integer, ByVal Qty_Pakai As String, ByVal Project_Name As String) As dtRetrieveReportRekapPemakaianBahanPerSPKRow
            Dim rowdtRetrieveReportRekapPemakaianBahanPerSPKRow As dtRetrieveReportRekapPemakaianBahanPerSPKRow = CType(Me.NewRow,dtRetrieveReportRekapPemakaianBahanPerSPKRow)
            Dim columnValuesArray() As Object = New Object() {Project_No, SPK_No, SPK_Date, Cust_ID, Nama, Item_ID, Item_Name, UOM, BPB_Date, QtyPHM, Qty_Approved, Qty_Pakai, Project_Name}
            rowdtRetrieveReportRekapPemakaianBahanPerSPKRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtRetrieveReportRekapPemakaianBahanPerSPKRow)
            Return rowdtRetrieveReportRekapPemakaianBahanPerSPKRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySPK_No(ByVal SPK_No As String) As dtRetrieveReportRekapPemakaianBahanPerSPKRow
            Return CType(Me.Rows.Find(New Object() {SPK_No}),dtRetrieveReportRekapPemakaianBahanPerSPKRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtRetrieveReportRekapPemakaianBahanPerSPKDataTable = CType(MyBase.Clone,dtRetrieveReportRekapPemakaianBahanPerSPKDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtRetrieveReportRekapPemakaianBahanPerSPKDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnProject_No = MyBase.Columns("Project_No")
            Me.columnSPK_No = MyBase.Columns("SPK_No")
            Me.columnSPK_Date = MyBase.Columns("SPK_Date")
            Me.columnCust_ID = MyBase.Columns("Cust_ID")
            Me.columnNama = MyBase.Columns("Nama")
            Me.columnItem_ID = MyBase.Columns("Item_ID")
            Me.columnItem_Name = MyBase.Columns("Item_Name")
            Me.columnUOM = MyBase.Columns("UOM")
            Me.columnBPB_Date = MyBase.Columns("BPB_Date")
            Me.columnQtyPHM = MyBase.Columns("QtyPHM")
            Me.columnQty_Approved = MyBase.Columns("Qty_Approved")
            Me.columnQty_Pakai = MyBase.Columns("Qty_Pakai")
            Me.columnProject_Name = MyBase.Columns("Project_Name")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnProject_No = New Global.System.Data.DataColumn("Project_No", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProject_No)
            Me.columnSPK_No = New Global.System.Data.DataColumn("SPK_No", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPK_No)
            Me.columnSPK_Date = New Global.System.Data.DataColumn("SPK_Date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPK_Date)
            Me.columnCust_ID = New Global.System.Data.DataColumn("Cust_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCust_ID)
            Me.columnNama = New Global.System.Data.DataColumn("Nama", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNama)
            Me.columnItem_ID = New Global.System.Data.DataColumn("Item_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItem_ID)
            Me.columnItem_Name = New Global.System.Data.DataColumn("Item_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItem_Name)
            Me.columnUOM = New Global.System.Data.DataColumn("UOM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUOM)
            Me.columnBPB_Date = New Global.System.Data.DataColumn("BPB_Date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBPB_Date)
            Me.columnQtyPHM = New Global.System.Data.DataColumn("QtyPHM", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQtyPHM)
            Me.columnQty_Approved = New Global.System.Data.DataColumn("Qty_Approved", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQty_Approved)
            Me.columnQty_Pakai = New Global.System.Data.DataColumn("Qty_Pakai", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQty_Pakai)
            Me.columnProject_Name = New Global.System.Data.DataColumn("Project_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProject_Name)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSPK_No}, true))
            Me.columnProject_No.AllowDBNull = false
            Me.columnProject_No.MaxLength = 9
            Me.columnSPK_No.AllowDBNull = false
            Me.columnSPK_No.Unique = true
            Me.columnSPK_No.MaxLength = 9
            Me.columnSPK_Date.AllowDBNull = false
            Me.columnCust_ID.ReadOnly = true
            Me.columnCust_ID.MaxLength = 10
            Me.columnNama.ReadOnly = true
            Me.columnNama.MaxLength = 100
            Me.columnItem_ID.ReadOnly = true
            Me.columnItem_ID.MaxLength = 9
            Me.columnItem_Name.ReadOnly = true
            Me.columnItem_Name.MaxLength = 100
            Me.columnUOM.ReadOnly = true
            Me.columnUOM.MaxLength = 10
            Me.columnBPB_Date.ReadOnly = true
            Me.columnQtyPHM.ReadOnly = true
            Me.columnQty_Approved.ReadOnly = true
            Me.columnQty_Pakai.ReadOnly = true
            Me.columnQty_Pakai.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtRetrieveReportRekapPemakaianBahanPerSPKRow() As dtRetrieveReportRekapPemakaianBahanPerSPKRow
            Return CType(Me.NewRow,dtRetrieveReportRekapPemakaianBahanPerSPKRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtRetrieveReportRekapPemakaianBahanPerSPKRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtRetrieveReportRekapPemakaianBahanPerSPKRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtRetrieveReportRekapPemakaianBahanPerSPKRowChangedEvent) Is Nothing) Then
                RaiseEvent dtRetrieveReportRekapPemakaianBahanPerSPKRowChanged(Me, New dtRetrieveReportRekapPemakaianBahanPerSPKRowChangeEvent(CType(e.Row,dtRetrieveReportRekapPemakaianBahanPerSPKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtRetrieveReportRekapPemakaianBahanPerSPKRowChangingEvent) Is Nothing) Then
                RaiseEvent dtRetrieveReportRekapPemakaianBahanPerSPKRowChanging(Me, New dtRetrieveReportRekapPemakaianBahanPerSPKRowChangeEvent(CType(e.Row,dtRetrieveReportRekapPemakaianBahanPerSPKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtRetrieveReportRekapPemakaianBahanPerSPKRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtRetrieveReportRekapPemakaianBahanPerSPKRowDeleted(Me, New dtRetrieveReportRekapPemakaianBahanPerSPKRowChangeEvent(CType(e.Row,dtRetrieveReportRekapPemakaianBahanPerSPKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtRetrieveReportRekapPemakaianBahanPerSPKRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtRetrieveReportRekapPemakaianBahanPerSPKRowDeleting(Me, New dtRetrieveReportRekapPemakaianBahanPerSPKRowChangeEvent(CType(e.Row,dtRetrieveReportRekapPemakaianBahanPerSPKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtRetrieveReportRekapPemakaianBahanPerSPKRow(ByVal row As dtRetrieveReportRekapPemakaianBahanPerSPKRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsReport = New dsReport
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtRetrieveReportRekapPemakaianBahanPerSPKDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtRetrieveReportRekapPemakaianBahanPerProjectDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnProject_No As Global.System.Data.DataColumn
        
        Private columnProject_Name As Global.System.Data.DataColumn
        
        Private columnProject_Date As Global.System.Data.DataColumn
        
        Private columnCust_ID As Global.System.Data.DataColumn
        
        Private columnNama As Global.System.Data.DataColumn
        
        Private columnItem_ID As Global.System.Data.DataColumn
        
        Private columnItem_Name As Global.System.Data.DataColumn
        
        Private columnUOM As Global.System.Data.DataColumn
        
        Private columnQtyPHM As Global.System.Data.DataColumn
        
        Private columnQty_Approved As Global.System.Data.DataColumn
        
        Private columnQty_Pakai As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtRetrieveReportRekapPemakaianBahanPerProject"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Project_NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProject_No
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Project_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProject_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Project_DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProject_Date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Cust_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCust_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NamaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNama
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Item_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItem_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Item_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItem_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UOMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUOM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QtyPHMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQtyPHM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Qty_ApprovedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQty_Approved
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Qty_PakaiColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQty_Pakai
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtRetrieveReportRekapPemakaianBahanPerProjectRow
            Get
                Return CType(Me.Rows(index),dtRetrieveReportRekapPemakaianBahanPerProjectRow)
            End Get
        End Property
        
        Public Event dtRetrieveReportRekapPemakaianBahanPerProjectRowChanging As dtRetrieveReportRekapPemakaianBahanPerProjectRowChangeEventHandler
        
        Public Event dtRetrieveReportRekapPemakaianBahanPerProjectRowChanged As dtRetrieveReportRekapPemakaianBahanPerProjectRowChangeEventHandler
        
        Public Event dtRetrieveReportRekapPemakaianBahanPerProjectRowDeleting As dtRetrieveReportRekapPemakaianBahanPerProjectRowChangeEventHandler
        
        Public Event dtRetrieveReportRekapPemakaianBahanPerProjectRowDeleted As dtRetrieveReportRekapPemakaianBahanPerProjectRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtRetrieveReportRekapPemakaianBahanPerProjectRow(ByVal row As dtRetrieveReportRekapPemakaianBahanPerProjectRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtRetrieveReportRekapPemakaianBahanPerProjectRow(ByVal Project_No As String, ByVal Project_Name As String, ByVal Project_Date As Date, ByVal Cust_ID As String, ByVal Nama As String, ByVal Item_ID As String, ByVal Item_Name As String, ByVal UOM As String, ByVal QtyPHM As Decimal, ByVal Qty_Approved As Decimal, ByVal Qty_Pakai As Decimal) As dtRetrieveReportRekapPemakaianBahanPerProjectRow
            Dim rowdtRetrieveReportRekapPemakaianBahanPerProjectRow As dtRetrieveReportRekapPemakaianBahanPerProjectRow = CType(Me.NewRow,dtRetrieveReportRekapPemakaianBahanPerProjectRow)
            Dim columnValuesArray() As Object = New Object() {Project_No, Project_Name, Project_Date, Cust_ID, Nama, Item_ID, Item_Name, UOM, QtyPHM, Qty_Approved, Qty_Pakai}
            rowdtRetrieveReportRekapPemakaianBahanPerProjectRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtRetrieveReportRekapPemakaianBahanPerProjectRow)
            Return rowdtRetrieveReportRekapPemakaianBahanPerProjectRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtRetrieveReportRekapPemakaianBahanPerProjectDataTable = CType(MyBase.Clone,dtRetrieveReportRekapPemakaianBahanPerProjectDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtRetrieveReportRekapPemakaianBahanPerProjectDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnProject_No = MyBase.Columns("Project_No")
            Me.columnProject_Name = MyBase.Columns("Project_Name")
            Me.columnProject_Date = MyBase.Columns("Project_Date")
            Me.columnCust_ID = MyBase.Columns("Cust_ID")
            Me.columnNama = MyBase.Columns("Nama")
            Me.columnItem_ID = MyBase.Columns("Item_ID")
            Me.columnItem_Name = MyBase.Columns("Item_Name")
            Me.columnUOM = MyBase.Columns("UOM")
            Me.columnQtyPHM = MyBase.Columns("QtyPHM")
            Me.columnQty_Approved = MyBase.Columns("Qty_Approved")
            Me.columnQty_Pakai = MyBase.Columns("Qty_Pakai")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnProject_No = New Global.System.Data.DataColumn("Project_No", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProject_No)
            Me.columnProject_Name = New Global.System.Data.DataColumn("Project_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProject_Name)
            Me.columnProject_Date = New Global.System.Data.DataColumn("Project_Date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProject_Date)
            Me.columnCust_ID = New Global.System.Data.DataColumn("Cust_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCust_ID)
            Me.columnNama = New Global.System.Data.DataColumn("Nama", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNama)
            Me.columnItem_ID = New Global.System.Data.DataColumn("Item_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItem_ID)
            Me.columnItem_Name = New Global.System.Data.DataColumn("Item_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItem_Name)
            Me.columnUOM = New Global.System.Data.DataColumn("UOM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUOM)
            Me.columnQtyPHM = New Global.System.Data.DataColumn("QtyPHM", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQtyPHM)
            Me.columnQty_Approved = New Global.System.Data.DataColumn("Qty_Approved", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQty_Approved)
            Me.columnQty_Pakai = New Global.System.Data.DataColumn("Qty_Pakai", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQty_Pakai)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("RetrieveReportRekapPemakaianBahanPerProjectKey1", New Global.System.Data.DataColumn() {Me.columnProject_No}, false))
            Me.columnProject_No.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtRetrieveReportRekapPemakaianBahanPerProjectRow() As dtRetrieveReportRekapPemakaianBahanPerProjectRow
            Return CType(Me.NewRow,dtRetrieveReportRekapPemakaianBahanPerProjectRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtRetrieveReportRekapPemakaianBahanPerProjectRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtRetrieveReportRekapPemakaianBahanPerProjectRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtRetrieveReportRekapPemakaianBahanPerProjectRowChangedEvent) Is Nothing) Then
                RaiseEvent dtRetrieveReportRekapPemakaianBahanPerProjectRowChanged(Me, New dtRetrieveReportRekapPemakaianBahanPerProjectRowChangeEvent(CType(e.Row,dtRetrieveReportRekapPemakaianBahanPerProjectRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtRetrieveReportRekapPemakaianBahanPerProjectRowChangingEvent) Is Nothing) Then
                RaiseEvent dtRetrieveReportRekapPemakaianBahanPerProjectRowChanging(Me, New dtRetrieveReportRekapPemakaianBahanPerProjectRowChangeEvent(CType(e.Row,dtRetrieveReportRekapPemakaianBahanPerProjectRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtRetrieveReportRekapPemakaianBahanPerProjectRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtRetrieveReportRekapPemakaianBahanPerProjectRowDeleted(Me, New dtRetrieveReportRekapPemakaianBahanPerProjectRowChangeEvent(CType(e.Row,dtRetrieveReportRekapPemakaianBahanPerProjectRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtRetrieveReportRekapPemakaianBahanPerProjectRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtRetrieveReportRekapPemakaianBahanPerProjectRowDeleting(Me, New dtRetrieveReportRekapPemakaianBahanPerProjectRowChangeEvent(CType(e.Row,dtRetrieveReportRekapPemakaianBahanPerProjectRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtRetrieveReportRekapPemakaianBahanPerProjectRow(ByVal row As dtRetrieveReportRekapPemakaianBahanPerProjectRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsReport = New dsReport
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtRetrieveReportRekapPemakaianBahanPerProjectDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtPOItemByPONoDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPO_No As Global.System.Data.DataColumn
        
        Private columnPR_No As Global.System.Data.DataColumn
        
        Private columnItem_ID As Global.System.Data.DataColumn
        
        Private columnQty As Global.System.Data.DataColumn
        
        Private columnUoM As Global.System.Data.DataColumn
        
        Private columnPrice As Global.System.Data.DataColumn
        
        Private columnDiskon As Global.System.Data.DataColumn
        
        Private columnSubTotal As Global.System.Data.DataColumn
        
        Private columnRemarks As Global.System.Data.DataColumn
        
        Private columnPO_Date As Global.System.Data.DataColumn
        
        Private columnSupplier_ID As Global.System.Data.DataColumn
        
        Private columnRecGood_Date As Global.System.Data.DataColumn
        
        Private columnRemarks_Hdr As Global.System.Data.DataColumn
        
        Private columnSubTotal_Hdr As Global.System.Data.DataColumn
        
        Private columnGrand_Total As Global.System.Data.DataColumn
        
        Private columnStatus_ID As Global.System.Data.DataColumn
        
        Private columnSupplier_Name As Global.System.Data.DataColumn
        
        Private columnItem_Name As Global.System.Data.DataColumn
        
        Private columnStatus_Name As Global.System.Data.DataColumn
        
        Private columnUang_Muka As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtPOItemByPONo"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PO_NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPO_No
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PR_NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPR_No
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Item_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItem_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UoMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUoM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrice
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DiskonColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDiskon
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubTotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubTotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RemarksColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemarks
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PO_DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPO_Date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Supplier_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSupplier_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RecGood_DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecGood_Date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Remarks_HdrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemarks_Hdr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubTotal_HdrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubTotal_Hdr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Grand_TotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGrand_Total
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Status_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatus_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Supplier_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSupplier_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Item_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItem_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Status_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatus_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Uang_MukaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUang_Muka
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtPOItemByPONoRow
            Get
                Return CType(Me.Rows(index),dtPOItemByPONoRow)
            End Get
        End Property
        
        Public Event dtPOItemByPONoRowChanging As dtPOItemByPONoRowChangeEventHandler
        
        Public Event dtPOItemByPONoRowChanged As dtPOItemByPONoRowChangeEventHandler
        
        Public Event dtPOItemByPONoRowDeleting As dtPOItemByPONoRowChangeEventHandler
        
        Public Event dtPOItemByPONoRowDeleted As dtPOItemByPONoRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtPOItemByPONoRow(ByVal row As dtPOItemByPONoRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtPOItemByPONoRow( _
                    ByVal PO_No As String,  _
                    ByVal PR_No As String,  _
                    ByVal Item_ID As String,  _
                    ByVal Qty As Integer,  _
                    ByVal UoM As String,  _
                    ByVal Price As Decimal,  _
                    ByVal Diskon As Decimal,  _
                    ByVal SubTotal As Decimal,  _
                    ByVal Remarks As String,  _
                    ByVal PO_Date As Date,  _
                    ByVal Supplier_ID As String,  _
                    ByVal RecGood_Date As Date,  _
                    ByVal Remarks_Hdr As String,  _
                    ByVal SubTotal_Hdr As Decimal,  _
                    ByVal Grand_Total As Decimal,  _
                    ByVal Status_ID As String,  _
                    ByVal Supplier_Name As String,  _
                    ByVal Item_Name As String,  _
                    ByVal Status_Name As String,  _
                    ByVal Uang_Muka As Decimal) As dtPOItemByPONoRow
            Dim rowdtPOItemByPONoRow As dtPOItemByPONoRow = CType(Me.NewRow,dtPOItemByPONoRow)
            Dim columnValuesArray() As Object = New Object() {PO_No, PR_No, Item_ID, Qty, UoM, Price, Diskon, SubTotal, Remarks, PO_Date, Supplier_ID, RecGood_Date, Remarks_Hdr, SubTotal_Hdr, Grand_Total, Status_ID, Supplier_Name, Item_Name, Status_Name, Uang_Muka}
            rowdtPOItemByPONoRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtPOItemByPONoRow)
            Return rowdtPOItemByPONoRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByPO_NoPR_NoItem_ID(ByVal PO_No As String, ByVal PR_No As String, ByVal Item_ID As String) As dtPOItemByPONoRow
            Return CType(Me.Rows.Find(New Object() {PO_No, PR_No, Item_ID}),dtPOItemByPONoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtPOItemByPONoDataTable = CType(MyBase.Clone,dtPOItemByPONoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtPOItemByPONoDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPO_No = MyBase.Columns("PO_No")
            Me.columnPR_No = MyBase.Columns("PR_No")
            Me.columnItem_ID = MyBase.Columns("Item_ID")
            Me.columnQty = MyBase.Columns("Qty")
            Me.columnUoM = MyBase.Columns("UoM")
            Me.columnPrice = MyBase.Columns("Price")
            Me.columnDiskon = MyBase.Columns("Diskon")
            Me.columnSubTotal = MyBase.Columns("SubTotal")
            Me.columnRemarks = MyBase.Columns("Remarks")
            Me.columnPO_Date = MyBase.Columns("PO_Date")
            Me.columnSupplier_ID = MyBase.Columns("Supplier_ID")
            Me.columnRecGood_Date = MyBase.Columns("RecGood_Date")
            Me.columnRemarks_Hdr = MyBase.Columns("Remarks_Hdr")
            Me.columnSubTotal_Hdr = MyBase.Columns("SubTotal_Hdr")
            Me.columnGrand_Total = MyBase.Columns("Grand_Total")
            Me.columnStatus_ID = MyBase.Columns("Status_ID")
            Me.columnSupplier_Name = MyBase.Columns("Supplier_Name")
            Me.columnItem_Name = MyBase.Columns("Item_Name")
            Me.columnStatus_Name = MyBase.Columns("Status_Name")
            Me.columnUang_Muka = MyBase.Columns("Uang_Muka")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPO_No = New Global.System.Data.DataColumn("PO_No", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPO_No)
            Me.columnPR_No = New Global.System.Data.DataColumn("PR_No", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPR_No)
            Me.columnItem_ID = New Global.System.Data.DataColumn("Item_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItem_ID)
            Me.columnQty = New Global.System.Data.DataColumn("Qty", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQty)
            Me.columnUoM = New Global.System.Data.DataColumn("UoM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUoM)
            Me.columnPrice = New Global.System.Data.DataColumn("Price", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrice)
            Me.columnDiskon = New Global.System.Data.DataColumn("Diskon", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDiskon)
            Me.columnSubTotal = New Global.System.Data.DataColumn("SubTotal", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubTotal)
            Me.columnRemarks = New Global.System.Data.DataColumn("Remarks", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemarks)
            Me.columnPO_Date = New Global.System.Data.DataColumn("PO_Date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPO_Date)
            Me.columnSupplier_ID = New Global.System.Data.DataColumn("Supplier_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSupplier_ID)
            Me.columnRecGood_Date = New Global.System.Data.DataColumn("RecGood_Date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecGood_Date)
            Me.columnRemarks_Hdr = New Global.System.Data.DataColumn("Remarks_Hdr", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemarks_Hdr)
            Me.columnSubTotal_Hdr = New Global.System.Data.DataColumn("SubTotal_Hdr", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubTotal_Hdr)
            Me.columnGrand_Total = New Global.System.Data.DataColumn("Grand_Total", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGrand_Total)
            Me.columnStatus_ID = New Global.System.Data.DataColumn("Status_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatus_ID)
            Me.columnSupplier_Name = New Global.System.Data.DataColumn("Supplier_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSupplier_Name)
            Me.columnItem_Name = New Global.System.Data.DataColumn("Item_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItem_Name)
            Me.columnStatus_Name = New Global.System.Data.DataColumn("Status_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatus_Name)
            Me.columnUang_Muka = New Global.System.Data.DataColumn("Uang_Muka", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUang_Muka)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPO_No, Me.columnPR_No, Me.columnItem_ID}, true))
            Me.columnPO_No.AllowDBNull = false
            Me.columnPO_No.MaxLength = 9
            Me.columnPR_No.AllowDBNull = false
            Me.columnPR_No.MaxLength = 9
            Me.columnItem_ID.AllowDBNull = false
            Me.columnItem_ID.MaxLength = 10
            Me.columnQty.AllowDBNull = false
            Me.columnUoM.AllowDBNull = false
            Me.columnUoM.MaxLength = 50
            Me.columnDiskon.AllowDBNull = false
            Me.columnRemarks.MaxLength = 100
            Me.columnSupplier_ID.MaxLength = 10
            Me.columnRemarks_Hdr.MaxLength = 2147483647
            Me.columnStatus_ID.MaxLength = 10
            Me.columnSupplier_Name.MaxLength = 50
            Me.columnItem_Name.MaxLength = 100
            Me.columnStatus_Name.MaxLength = 50
            Me.columnUang_Muka.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtPOItemByPONoRow() As dtPOItemByPONoRow
            Return CType(Me.NewRow,dtPOItemByPONoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtPOItemByPONoRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtPOItemByPONoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtPOItemByPONoRowChangedEvent) Is Nothing) Then
                RaiseEvent dtPOItemByPONoRowChanged(Me, New dtPOItemByPONoRowChangeEvent(CType(e.Row,dtPOItemByPONoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtPOItemByPONoRowChangingEvent) Is Nothing) Then
                RaiseEvent dtPOItemByPONoRowChanging(Me, New dtPOItemByPONoRowChangeEvent(CType(e.Row,dtPOItemByPONoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtPOItemByPONoRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtPOItemByPONoRowDeleted(Me, New dtPOItemByPONoRowChangeEvent(CType(e.Row,dtPOItemByPONoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtPOItemByPONoRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtPOItemByPONoRowDeleting(Me, New dtPOItemByPONoRowChangeEvent(CType(e.Row,dtPOItemByPONoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtPOItemByPONoRow(ByVal row As dtPOItemByPONoRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsReport = New dsReport
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtPOItemByPONoDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtPOJasaByPONoDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPO_No As Global.System.Data.DataColumn
        
        Private columnPR_No As Global.System.Data.DataColumn
        
        Private columnJasa_ID As Global.System.Data.DataColumn
        
        Private columnPrice As Global.System.Data.DataColumn
        
        Private columnRemarks As Global.System.Data.DataColumn
        
        Private columnPO_Date As Global.System.Data.DataColumn
        
        Private columnSupplier_ID As Global.System.Data.DataColumn
        
        Private columnRecGood_Date As Global.System.Data.DataColumn
        
        Private columnRemarks_Hdr As Global.System.Data.DataColumn
        
        Private columnSubTotal_Hdr As Global.System.Data.DataColumn
        
        Private columnGrand_Total As Global.System.Data.DataColumn
        
        Private columnStatus_ID As Global.System.Data.DataColumn
        
        Private columnSupplier_Name As Global.System.Data.DataColumn
        
        Private columnJasa_Name As Global.System.Data.DataColumn
        
        Private columnStatus_Name As Global.System.Data.DataColumn
        
        Private columnUang_Muka As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtPOJasaByPONo"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PO_NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPO_No
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PR_NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPR_No
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Jasa_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJasa_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrice
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RemarksColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemarks
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PO_DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPO_Date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Supplier_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSupplier_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RecGood_DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecGood_Date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Remarks_HdrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemarks_Hdr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubTotal_HdrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubTotal_Hdr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Grand_TotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGrand_Total
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Status_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatus_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Supplier_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSupplier_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Jasa_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJasa_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Status_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatus_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Uang_MukaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUang_Muka
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtPOJasaByPONoRow
            Get
                Return CType(Me.Rows(index),dtPOJasaByPONoRow)
            End Get
        End Property
        
        Public Event dtPOJasaByPONoRowChanging As dtPOJasaByPONoRowChangeEventHandler
        
        Public Event dtPOJasaByPONoRowChanged As dtPOJasaByPONoRowChangeEventHandler
        
        Public Event dtPOJasaByPONoRowDeleting As dtPOJasaByPONoRowChangeEventHandler
        
        Public Event dtPOJasaByPONoRowDeleted As dtPOJasaByPONoRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtPOJasaByPONoRow(ByVal row As dtPOJasaByPONoRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtPOJasaByPONoRow( _
                    ByVal PO_No As String,  _
                    ByVal PR_No As String,  _
                    ByVal Jasa_ID As String,  _
                    ByVal Price As Decimal,  _
                    ByVal Remarks As String,  _
                    ByVal PO_Date As Date,  _
                    ByVal Supplier_ID As String,  _
                    ByVal RecGood_Date As Date,  _
                    ByVal Remarks_Hdr As String,  _
                    ByVal SubTotal_Hdr As Decimal,  _
                    ByVal Grand_Total As Decimal,  _
                    ByVal Status_ID As String,  _
                    ByVal Supplier_Name As String,  _
                    ByVal Jasa_Name As String,  _
                    ByVal Status_Name As String,  _
                    ByVal Uang_Muka As Decimal) As dtPOJasaByPONoRow
            Dim rowdtPOJasaByPONoRow As dtPOJasaByPONoRow = CType(Me.NewRow,dtPOJasaByPONoRow)
            Dim columnValuesArray() As Object = New Object() {PO_No, PR_No, Jasa_ID, Price, Remarks, PO_Date, Supplier_ID, RecGood_Date, Remarks_Hdr, SubTotal_Hdr, Grand_Total, Status_ID, Supplier_Name, Jasa_Name, Status_Name, Uang_Muka}
            rowdtPOJasaByPONoRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtPOJasaByPONoRow)
            Return rowdtPOJasaByPONoRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByPO_NoPR_NoJasa_ID(ByVal PO_No As String, ByVal PR_No As String, ByVal Jasa_ID As String) As dtPOJasaByPONoRow
            Return CType(Me.Rows.Find(New Object() {PO_No, PR_No, Jasa_ID}),dtPOJasaByPONoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtPOJasaByPONoDataTable = CType(MyBase.Clone,dtPOJasaByPONoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtPOJasaByPONoDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPO_No = MyBase.Columns("PO_No")
            Me.columnPR_No = MyBase.Columns("PR_No")
            Me.columnJasa_ID = MyBase.Columns("Jasa_ID")
            Me.columnPrice = MyBase.Columns("Price")
            Me.columnRemarks = MyBase.Columns("Remarks")
            Me.columnPO_Date = MyBase.Columns("PO_Date")
            Me.columnSupplier_ID = MyBase.Columns("Supplier_ID")
            Me.columnRecGood_Date = MyBase.Columns("RecGood_Date")
            Me.columnRemarks_Hdr = MyBase.Columns("Remarks_Hdr")
            Me.columnSubTotal_Hdr = MyBase.Columns("SubTotal_Hdr")
            Me.columnGrand_Total = MyBase.Columns("Grand_Total")
            Me.columnStatus_ID = MyBase.Columns("Status_ID")
            Me.columnSupplier_Name = MyBase.Columns("Supplier_Name")
            Me.columnJasa_Name = MyBase.Columns("Jasa_Name")
            Me.columnStatus_Name = MyBase.Columns("Status_Name")
            Me.columnUang_Muka = MyBase.Columns("Uang_Muka")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPO_No = New Global.System.Data.DataColumn("PO_No", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPO_No)
            Me.columnPR_No = New Global.System.Data.DataColumn("PR_No", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPR_No)
            Me.columnJasa_ID = New Global.System.Data.DataColumn("Jasa_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJasa_ID)
            Me.columnPrice = New Global.System.Data.DataColumn("Price", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrice)
            Me.columnRemarks = New Global.System.Data.DataColumn("Remarks", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemarks)
            Me.columnPO_Date = New Global.System.Data.DataColumn("PO_Date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPO_Date)
            Me.columnSupplier_ID = New Global.System.Data.DataColumn("Supplier_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSupplier_ID)
            Me.columnRecGood_Date = New Global.System.Data.DataColumn("RecGood_Date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecGood_Date)
            Me.columnRemarks_Hdr = New Global.System.Data.DataColumn("Remarks_Hdr", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemarks_Hdr)
            Me.columnSubTotal_Hdr = New Global.System.Data.DataColumn("SubTotal_Hdr", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubTotal_Hdr)
            Me.columnGrand_Total = New Global.System.Data.DataColumn("Grand_Total", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGrand_Total)
            Me.columnStatus_ID = New Global.System.Data.DataColumn("Status_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatus_ID)
            Me.columnSupplier_Name = New Global.System.Data.DataColumn("Supplier_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSupplier_Name)
            Me.columnJasa_Name = New Global.System.Data.DataColumn("Jasa_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJasa_Name)
            Me.columnStatus_Name = New Global.System.Data.DataColumn("Status_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatus_Name)
            Me.columnUang_Muka = New Global.System.Data.DataColumn("Uang_Muka", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUang_Muka)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPO_No, Me.columnPR_No, Me.columnJasa_ID}, true))
            Me.columnPO_No.AllowDBNull = false
            Me.columnPO_No.MaxLength = 9
            Me.columnPR_No.AllowDBNull = false
            Me.columnPR_No.MaxLength = 9
            Me.columnJasa_ID.AllowDBNull = false
            Me.columnJasa_ID.MaxLength = 5
            Me.columnPrice.AllowDBNull = false
            Me.columnRemarks.AllowDBNull = false
            Me.columnRemarks.MaxLength = 200
            Me.columnSupplier_ID.MaxLength = 10
            Me.columnRemarks_Hdr.MaxLength = 2147483647
            Me.columnStatus_ID.MaxLength = 10
            Me.columnSupplier_Name.MaxLength = 50
            Me.columnJasa_Name.MaxLength = 50
            Me.columnStatus_Name.MaxLength = 50
            Me.columnUang_Muka.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtPOJasaByPONoRow() As dtPOJasaByPONoRow
            Return CType(Me.NewRow,dtPOJasaByPONoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtPOJasaByPONoRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtPOJasaByPONoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtPOJasaByPONoRowChangedEvent) Is Nothing) Then
                RaiseEvent dtPOJasaByPONoRowChanged(Me, New dtPOJasaByPONoRowChangeEvent(CType(e.Row,dtPOJasaByPONoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtPOJasaByPONoRowChangingEvent) Is Nothing) Then
                RaiseEvent dtPOJasaByPONoRowChanging(Me, New dtPOJasaByPONoRowChangeEvent(CType(e.Row,dtPOJasaByPONoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtPOJasaByPONoRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtPOJasaByPONoRowDeleted(Me, New dtPOJasaByPONoRowChangeEvent(CType(e.Row,dtPOJasaByPONoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtPOJasaByPONoRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtPOJasaByPONoRowDeleting(Me, New dtPOJasaByPONoRowChangeEvent(CType(e.Row,dtPOJasaByPONoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtPOJasaByPONoRow(ByVal row As dtPOJasaByPONoRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsReport = New dsReport
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtPOJasaByPONoDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtRetrieveReportSPKFormDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnSPK_Date As Global.System.Data.DataColumn
        
        Private columnSPK_No As Global.System.Data.DataColumn
        
        Private columnProject_No As Global.System.Data.DataColumn
        
        Private columnProject_Name As Global.System.Data.DataColumn
        
        Private columnCustName As Global.System.Data.DataColumn
        
        Private columnCust_HP As Global.System.Data.DataColumn
        
        Private columnContact_Person As Global.System.Data.DataColumn
        
        Private columnTeknisi_ID As Global.System.Data.DataColumn
        
        Private columnTeknisiName As Global.System.Data.DataColumn
        
        Private columnJasa_ID As Global.System.Data.DataColumn
        
        Private columnJasa_Name As Global.System.Data.DataColumn
        
        Private columnStart_Dt As Global.System.Data.DataColumn
        
        Private columnTotalHour As Global.System.Data.DataColumn
        
        Private columnRemarks As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtRetrieveReportSPKForm"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SPK_DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSPK_Date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SPK_NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSPK_No
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Project_NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProject_No
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Project_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProject_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Cust_HPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCust_HP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Contact_PersonColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnContact_Person
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Teknisi_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTeknisi_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TeknisiNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTeknisiName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Jasa_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJasa_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Jasa_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJasa_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Start_DtColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStart_Dt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalHourColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalHour
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RemarksColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemarks
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtRetrieveReportSPKFormRow
            Get
                Return CType(Me.Rows(index),dtRetrieveReportSPKFormRow)
            End Get
        End Property
        
        Public Event dtRetrieveReportSPKFormRowChanging As dtRetrieveReportSPKFormRowChangeEventHandler
        
        Public Event dtRetrieveReportSPKFormRowChanged As dtRetrieveReportSPKFormRowChangeEventHandler
        
        Public Event dtRetrieveReportSPKFormRowDeleting As dtRetrieveReportSPKFormRowChangeEventHandler
        
        Public Event dtRetrieveReportSPKFormRowDeleted As dtRetrieveReportSPKFormRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtRetrieveReportSPKFormRow(ByVal row As dtRetrieveReportSPKFormRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtRetrieveReportSPKFormRow(ByVal SPK_Date As Date, ByVal SPK_No As String, ByVal Project_No As String, ByVal Project_Name As String, ByVal CustName As String, ByVal Cust_HP As String, ByVal Contact_Person As String, ByVal Teknisi_ID As String, ByVal TeknisiName As String, ByVal Jasa_ID As String, ByVal Jasa_Name As String, ByVal Start_Dt As Date, ByVal TotalHour As Decimal, ByVal Remarks As String) As dtRetrieveReportSPKFormRow
            Dim rowdtRetrieveReportSPKFormRow As dtRetrieveReportSPKFormRow = CType(Me.NewRow,dtRetrieveReportSPKFormRow)
            Dim columnValuesArray() As Object = New Object() {SPK_Date, SPK_No, Project_No, Project_Name, CustName, Cust_HP, Contact_Person, Teknisi_ID, TeknisiName, Jasa_ID, Jasa_Name, Start_Dt, TotalHour, Remarks}
            rowdtRetrieveReportSPKFormRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtRetrieveReportSPKFormRow)
            Return rowdtRetrieveReportSPKFormRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySPK_NoTeknisi_IDJasa_IDStart_Dt(ByVal SPK_No As String, ByVal Teknisi_ID As String, ByVal Jasa_ID As String, ByVal Start_Dt As Date) As dtRetrieveReportSPKFormRow
            Return CType(Me.Rows.Find(New Object() {SPK_No, Teknisi_ID, Jasa_ID, Start_Dt}),dtRetrieveReportSPKFormRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtRetrieveReportSPKFormDataTable = CType(MyBase.Clone,dtRetrieveReportSPKFormDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtRetrieveReportSPKFormDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSPK_Date = MyBase.Columns("SPK_Date")
            Me.columnSPK_No = MyBase.Columns("SPK_No")
            Me.columnProject_No = MyBase.Columns("Project_No")
            Me.columnProject_Name = MyBase.Columns("Project_Name")
            Me.columnCustName = MyBase.Columns("CustName")
            Me.columnCust_HP = MyBase.Columns("Cust_HP")
            Me.columnContact_Person = MyBase.Columns("Contact_Person")
            Me.columnTeknisi_ID = MyBase.Columns("Teknisi_ID")
            Me.columnTeknisiName = MyBase.Columns("TeknisiName")
            Me.columnJasa_ID = MyBase.Columns("Jasa_ID")
            Me.columnJasa_Name = MyBase.Columns("Jasa_Name")
            Me.columnStart_Dt = MyBase.Columns("Start_Dt")
            Me.columnTotalHour = MyBase.Columns("TotalHour")
            Me.columnRemarks = MyBase.Columns("Remarks")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSPK_Date = New Global.System.Data.DataColumn("SPK_Date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPK_Date)
            Me.columnSPK_No = New Global.System.Data.DataColumn("SPK_No", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPK_No)
            Me.columnProject_No = New Global.System.Data.DataColumn("Project_No", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProject_No)
            Me.columnProject_Name = New Global.System.Data.DataColumn("Project_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProject_Name)
            Me.columnCustName = New Global.System.Data.DataColumn("CustName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustName)
            Me.columnCust_HP = New Global.System.Data.DataColumn("Cust_HP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCust_HP)
            Me.columnContact_Person = New Global.System.Data.DataColumn("Contact_Person", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContact_Person)
            Me.columnTeknisi_ID = New Global.System.Data.DataColumn("Teknisi_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTeknisi_ID)
            Me.columnTeknisiName = New Global.System.Data.DataColumn("TeknisiName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTeknisiName)
            Me.columnJasa_ID = New Global.System.Data.DataColumn("Jasa_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJasa_ID)
            Me.columnJasa_Name = New Global.System.Data.DataColumn("Jasa_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJasa_Name)
            Me.columnStart_Dt = New Global.System.Data.DataColumn("Start_Dt", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStart_Dt)
            Me.columnTotalHour = New Global.System.Data.DataColumn("TotalHour", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalHour)
            Me.columnRemarks = New Global.System.Data.DataColumn("Remarks", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemarks)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSPK_No, Me.columnTeknisi_ID, Me.columnJasa_ID, Me.columnStart_Dt}, true))
            Me.columnSPK_No.AllowDBNull = false
            Me.columnSPK_No.MaxLength = 9
            Me.columnProject_No.MaxLength = 9
            Me.columnProject_Name.ReadOnly = true
            Me.columnProject_Name.MaxLength = 100
            Me.columnCustName.ReadOnly = true
            Me.columnCustName.MaxLength = 100
            Me.columnCust_HP.ReadOnly = true
            Me.columnCust_HP.MaxLength = 20
            Me.columnContact_Person.ReadOnly = true
            Me.columnContact_Person.MaxLength = 100
            Me.columnTeknisi_ID.AllowDBNull = false
            Me.columnTeknisi_ID.MaxLength = 50
            Me.columnTeknisiName.ReadOnly = true
            Me.columnTeknisiName.MaxLength = 100
            Me.columnJasa_ID.AllowDBNull = false
            Me.columnJasa_ID.MaxLength = 5
            Me.columnJasa_Name.ReadOnly = true
            Me.columnJasa_Name.MaxLength = 50
            Me.columnStart_Dt.AllowDBNull = false
            Me.columnTotalHour.ReadOnly = true
            Me.columnRemarks.MaxLength = 100
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtRetrieveReportSPKFormRow() As dtRetrieveReportSPKFormRow
            Return CType(Me.NewRow,dtRetrieveReportSPKFormRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtRetrieveReportSPKFormRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtRetrieveReportSPKFormRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtRetrieveReportSPKFormRowChangedEvent) Is Nothing) Then
                RaiseEvent dtRetrieveReportSPKFormRowChanged(Me, New dtRetrieveReportSPKFormRowChangeEvent(CType(e.Row,dtRetrieveReportSPKFormRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtRetrieveReportSPKFormRowChangingEvent) Is Nothing) Then
                RaiseEvent dtRetrieveReportSPKFormRowChanging(Me, New dtRetrieveReportSPKFormRowChangeEvent(CType(e.Row,dtRetrieveReportSPKFormRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtRetrieveReportSPKFormRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtRetrieveReportSPKFormRowDeleted(Me, New dtRetrieveReportSPKFormRowChangeEvent(CType(e.Row,dtRetrieveReportSPKFormRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtRetrieveReportSPKFormRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtRetrieveReportSPKFormRowDeleting(Me, New dtRetrieveReportSPKFormRowChangeEvent(CType(e.Row,dtRetrieveReportSPKFormRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtRetrieveReportSPKFormRow(ByVal row As dtRetrieveReportSPKFormRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsReport = New dsReport
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtRetrieveReportSPKFormDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtRetrieveReportProgressProjectPerSPKDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnProject_No As Global.System.Data.DataColumn
        
        Private columnSPK_No As Global.System.Data.DataColumn
        
        Private columnSPK_Date As Global.System.Data.DataColumn
        
        Private columnCust_ID As Global.System.Data.DataColumn
        
        Private columnNama As Global.System.Data.DataColumn
        
        Private columnTeknisi_ID As Global.System.Data.DataColumn
        
        Private columnEmployeeName As Global.System.Data.DataColumn
        
        Private columnJasa_ID As Global.System.Data.DataColumn
        
        Private columnJasa_Name As Global.System.Data.DataColumn
        
        Private columnStart_Dt As Global.System.Data.DataColumn
        
        Private columnJumlahJamSPK As Global.System.Data.DataColumn
        
        Private columnTeknisiID_Log As Global.System.Data.DataColumn
        
        Private columnTeknisiName_Log As Global.System.Data.DataColumn
        
        Private columnLogDt As Global.System.Data.DataColumn
        
        Private columnJumlahJamLog As Global.System.Data.DataColumn
        
        Private columnRemarksLog As Global.System.Data.DataColumn
        
        Private columnRemarksSPKDetail As Global.System.Data.DataColumn
        
        Private columnProject_Name As Global.System.Data.DataColumn
        
        Private columnStatus_Name As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtRetrieveReportProgressProjectPerSPK"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Project_NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProject_No
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SPK_NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSPK_No
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SPK_DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSPK_Date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Cust_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCust_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NamaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNama
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Teknisi_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTeknisi_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EmployeeNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmployeeName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Jasa_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJasa_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Jasa_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJasa_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Start_DtColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStart_Dt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JumlahJamSPKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJumlahJamSPK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TeknisiID_LogColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTeknisiID_Log
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TeknisiName_LogColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTeknisiName_Log
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LogDtColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLogDt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JumlahJamLogColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJumlahJamLog
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RemarksLogColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemarksLog
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RemarksSPKDetailColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemarksSPKDetail
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Project_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProject_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Status_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatus_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtRetrieveReportProgressProjectPerSPKRow
            Get
                Return CType(Me.Rows(index),dtRetrieveReportProgressProjectPerSPKRow)
            End Get
        End Property
        
        Public Event dtRetrieveReportProgressProjectPerSPKRowChanging As dtRetrieveReportProgressProjectPerSPKRowChangeEventHandler
        
        Public Event dtRetrieveReportProgressProjectPerSPKRowChanged As dtRetrieveReportProgressProjectPerSPKRowChangeEventHandler
        
        Public Event dtRetrieveReportProgressProjectPerSPKRowDeleting As dtRetrieveReportProgressProjectPerSPKRowChangeEventHandler
        
        Public Event dtRetrieveReportProgressProjectPerSPKRowDeleted As dtRetrieveReportProgressProjectPerSPKRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtRetrieveReportProgressProjectPerSPKRow(ByVal row As dtRetrieveReportProgressProjectPerSPKRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtRetrieveReportProgressProjectPerSPKRow( _
                    ByVal Project_No As String,  _
                    ByVal SPK_No As String,  _
                    ByVal SPK_Date As Date,  _
                    ByVal Cust_ID As String,  _
                    ByVal Nama As String,  _
                    ByVal Teknisi_ID As String,  _
                    ByVal EmployeeName As String,  _
                    ByVal Jasa_ID As String,  _
                    ByVal Jasa_Name As String,  _
                    ByVal Start_Dt As Date,  _
                    ByVal JumlahJamSPK As Decimal,  _
                    ByVal TeknisiID_Log As String,  _
                    ByVal TeknisiName_Log As String,  _
                    ByVal LogDt As Date,  _
                    ByVal JumlahJamLog As Decimal,  _
                    ByVal RemarksLog As String,  _
                    ByVal RemarksSPKDetail As String,  _
                    ByVal Project_Name As String,  _
                    ByVal Status_Name As String) As dtRetrieveReportProgressProjectPerSPKRow
            Dim rowdtRetrieveReportProgressProjectPerSPKRow As dtRetrieveReportProgressProjectPerSPKRow = CType(Me.NewRow,dtRetrieveReportProgressProjectPerSPKRow)
            Dim columnValuesArray() As Object = New Object() {Project_No, SPK_No, SPK_Date, Cust_ID, Nama, Teknisi_ID, EmployeeName, Jasa_ID, Jasa_Name, Start_Dt, JumlahJamSPK, TeknisiID_Log, TeknisiName_Log, LogDt, JumlahJamLog, RemarksLog, RemarksSPKDetail, Project_Name, Status_Name}
            rowdtRetrieveReportProgressProjectPerSPKRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtRetrieveReportProgressProjectPerSPKRow)
            Return rowdtRetrieveReportProgressProjectPerSPKRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtRetrieveReportProgressProjectPerSPKDataTable = CType(MyBase.Clone,dtRetrieveReportProgressProjectPerSPKDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtRetrieveReportProgressProjectPerSPKDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnProject_No = MyBase.Columns("Project_No")
            Me.columnSPK_No = MyBase.Columns("SPK_No")
            Me.columnSPK_Date = MyBase.Columns("SPK_Date")
            Me.columnCust_ID = MyBase.Columns("Cust_ID")
            Me.columnNama = MyBase.Columns("Nama")
            Me.columnTeknisi_ID = MyBase.Columns("Teknisi_ID")
            Me.columnEmployeeName = MyBase.Columns("EmployeeName")
            Me.columnJasa_ID = MyBase.Columns("Jasa_ID")
            Me.columnJasa_Name = MyBase.Columns("Jasa_Name")
            Me.columnStart_Dt = MyBase.Columns("Start_Dt")
            Me.columnJumlahJamSPK = MyBase.Columns("JumlahJamSPK")
            Me.columnTeknisiID_Log = MyBase.Columns("TeknisiID_Log")
            Me.columnTeknisiName_Log = MyBase.Columns("TeknisiName_Log")
            Me.columnLogDt = MyBase.Columns("LogDt")
            Me.columnJumlahJamLog = MyBase.Columns("JumlahJamLog")
            Me.columnRemarksLog = MyBase.Columns("RemarksLog")
            Me.columnRemarksSPKDetail = MyBase.Columns("RemarksSPKDetail")
            Me.columnProject_Name = MyBase.Columns("Project_Name")
            Me.columnStatus_Name = MyBase.Columns("Status_Name")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnProject_No = New Global.System.Data.DataColumn("Project_No", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProject_No)
            Me.columnSPK_No = New Global.System.Data.DataColumn("SPK_No", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPK_No)
            Me.columnSPK_Date = New Global.System.Data.DataColumn("SPK_Date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPK_Date)
            Me.columnCust_ID = New Global.System.Data.DataColumn("Cust_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCust_ID)
            Me.columnNama = New Global.System.Data.DataColumn("Nama", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNama)
            Me.columnTeknisi_ID = New Global.System.Data.DataColumn("Teknisi_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTeknisi_ID)
            Me.columnEmployeeName = New Global.System.Data.DataColumn("EmployeeName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmployeeName)
            Me.columnJasa_ID = New Global.System.Data.DataColumn("Jasa_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJasa_ID)
            Me.columnJasa_Name = New Global.System.Data.DataColumn("Jasa_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJasa_Name)
            Me.columnStart_Dt = New Global.System.Data.DataColumn("Start_Dt", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStart_Dt)
            Me.columnJumlahJamSPK = New Global.System.Data.DataColumn("JumlahJamSPK", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJumlahJamSPK)
            Me.columnTeknisiID_Log = New Global.System.Data.DataColumn("TeknisiID_Log", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTeknisiID_Log)
            Me.columnTeknisiName_Log = New Global.System.Data.DataColumn("TeknisiName_Log", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTeknisiName_Log)
            Me.columnLogDt = New Global.System.Data.DataColumn("LogDt", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLogDt)
            Me.columnJumlahJamLog = New Global.System.Data.DataColumn("JumlahJamLog", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJumlahJamLog)
            Me.columnRemarksLog = New Global.System.Data.DataColumn("RemarksLog", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemarksLog)
            Me.columnRemarksSPKDetail = New Global.System.Data.DataColumn("RemarksSPKDetail", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemarksSPKDetail)
            Me.columnProject_Name = New Global.System.Data.DataColumn("Project_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProject_Name)
            Me.columnStatus_Name = New Global.System.Data.DataColumn("Status_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatus_Name)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtRetrieveReportProgressProjectPerSPKRow() As dtRetrieveReportProgressProjectPerSPKRow
            Return CType(Me.NewRow,dtRetrieveReportProgressProjectPerSPKRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtRetrieveReportProgressProjectPerSPKRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtRetrieveReportProgressProjectPerSPKRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtRetrieveReportProgressProjectPerSPKRowChangedEvent) Is Nothing) Then
                RaiseEvent dtRetrieveReportProgressProjectPerSPKRowChanged(Me, New dtRetrieveReportProgressProjectPerSPKRowChangeEvent(CType(e.Row,dtRetrieveReportProgressProjectPerSPKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtRetrieveReportProgressProjectPerSPKRowChangingEvent) Is Nothing) Then
                RaiseEvent dtRetrieveReportProgressProjectPerSPKRowChanging(Me, New dtRetrieveReportProgressProjectPerSPKRowChangeEvent(CType(e.Row,dtRetrieveReportProgressProjectPerSPKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtRetrieveReportProgressProjectPerSPKRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtRetrieveReportProgressProjectPerSPKRowDeleted(Me, New dtRetrieveReportProgressProjectPerSPKRowChangeEvent(CType(e.Row,dtRetrieveReportProgressProjectPerSPKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtRetrieveReportProgressProjectPerSPKRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtRetrieveReportProgressProjectPerSPKRowDeleting(Me, New dtRetrieveReportProgressProjectPerSPKRowChangeEvent(CType(e.Row,dtRetrieveReportProgressProjectPerSPKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtRetrieveReportProgressProjectPerSPKRow(ByVal row As dtRetrieveReportProgressProjectPerSPKRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsReport = New dsReport
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtRetrieveReportProgressProjectPerSPKDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtRetrieveReportRekapProjectDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnProject_No As Global.System.Data.DataColumn
        
        Private columnProject_Date As Global.System.Data.DataColumn
        
        Private columnPHM_No As Global.System.Data.DataColumn
        
        Private columnCust_ID As Global.System.Data.DataColumn
        
        Private columnNama As Global.System.Data.DataColumn
        
        Private columnPasal61_From As Global.System.Data.DataColumn
        
        Private columnPasal61_To As Global.System.Data.DataColumn
        
        Private columnPB_Date As Global.System.Data.DataColumn
        
        Private columnTotalRencana As Global.System.Data.DataColumn
        
        Private columnTotalRealisasi As Global.System.Data.DataColumn
        
        Private columnProject_Name As Global.System.Data.DataColumn
        
        Private columnStatus_Name As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtRetrieveReportRekapProject"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Project_NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProject_No
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Project_DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProject_Date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PHM_NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPHM_No
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Cust_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCust_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NamaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNama
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Pasal61_FromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPasal61_From
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Pasal61_ToColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPasal61_To
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PB_DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPB_Date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalRencanaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalRencana
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalRealisasiColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalRealisasi
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Project_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProject_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Status_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatus_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtRetrieveReportRekapProjectRow
            Get
                Return CType(Me.Rows(index),dtRetrieveReportRekapProjectRow)
            End Get
        End Property
        
        Public Event dtRetrieveReportRekapProjectRowChanging As dtRetrieveReportRekapProjectRowChangeEventHandler
        
        Public Event dtRetrieveReportRekapProjectRowChanged As dtRetrieveReportRekapProjectRowChangeEventHandler
        
        Public Event dtRetrieveReportRekapProjectRowDeleting As dtRetrieveReportRekapProjectRowChangeEventHandler
        
        Public Event dtRetrieveReportRekapProjectRowDeleted As dtRetrieveReportRekapProjectRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtRetrieveReportRekapProjectRow(ByVal row As dtRetrieveReportRekapProjectRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtRetrieveReportRekapProjectRow(ByVal Project_No As String, ByVal Project_Date As String, ByVal PHM_No As String, ByVal Cust_ID As String, ByVal Nama As String, ByVal Pasal61_From As String, ByVal Pasal61_To As String, ByVal PB_Date As String, ByVal TotalRencana As String, ByVal TotalRealisasi As String, ByVal Project_Name As String, ByVal Status_Name As String) As dtRetrieveReportRekapProjectRow
            Dim rowdtRetrieveReportRekapProjectRow As dtRetrieveReportRekapProjectRow = CType(Me.NewRow,dtRetrieveReportRekapProjectRow)
            Dim columnValuesArray() As Object = New Object() {Project_No, Project_Date, PHM_No, Cust_ID, Nama, Pasal61_From, Pasal61_To, PB_Date, TotalRencana, TotalRealisasi, Project_Name, Status_Name}
            rowdtRetrieveReportRekapProjectRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtRetrieveReportRekapProjectRow)
            Return rowdtRetrieveReportRekapProjectRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtRetrieveReportRekapProjectDataTable = CType(MyBase.Clone,dtRetrieveReportRekapProjectDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtRetrieveReportRekapProjectDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnProject_No = MyBase.Columns("Project_No")
            Me.columnProject_Date = MyBase.Columns("Project_Date")
            Me.columnPHM_No = MyBase.Columns("PHM_No")
            Me.columnCust_ID = MyBase.Columns("Cust_ID")
            Me.columnNama = MyBase.Columns("Nama")
            Me.columnPasal61_From = MyBase.Columns("Pasal61_From")
            Me.columnPasal61_To = MyBase.Columns("Pasal61_To")
            Me.columnPB_Date = MyBase.Columns("PB_Date")
            Me.columnTotalRencana = MyBase.Columns("TotalRencana")
            Me.columnTotalRealisasi = MyBase.Columns("TotalRealisasi")
            Me.columnProject_Name = MyBase.Columns("Project_Name")
            Me.columnStatus_Name = MyBase.Columns("Status_Name")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnProject_No = New Global.System.Data.DataColumn("Project_No", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProject_No)
            Me.columnProject_Date = New Global.System.Data.DataColumn("Project_Date", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProject_Date)
            Me.columnPHM_No = New Global.System.Data.DataColumn("PHM_No", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPHM_No)
            Me.columnCust_ID = New Global.System.Data.DataColumn("Cust_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCust_ID)
            Me.columnNama = New Global.System.Data.DataColumn("Nama", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNama)
            Me.columnPasal61_From = New Global.System.Data.DataColumn("Pasal61_From", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPasal61_From)
            Me.columnPasal61_To = New Global.System.Data.DataColumn("Pasal61_To", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPasal61_To)
            Me.columnPB_Date = New Global.System.Data.DataColumn("PB_Date", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPB_Date)
            Me.columnTotalRencana = New Global.System.Data.DataColumn("TotalRencana", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalRencana)
            Me.columnTotalRealisasi = New Global.System.Data.DataColumn("TotalRealisasi", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalRealisasi)
            Me.columnProject_Name = New Global.System.Data.DataColumn("Project_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProject_Name)
            Me.columnStatus_Name = New Global.System.Data.DataColumn("Status_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatus_Name)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtRetrieveReportRekapProjectRow() As dtRetrieveReportRekapProjectRow
            Return CType(Me.NewRow,dtRetrieveReportRekapProjectRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtRetrieveReportRekapProjectRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtRetrieveReportRekapProjectRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtRetrieveReportRekapProjectRowChangedEvent) Is Nothing) Then
                RaiseEvent dtRetrieveReportRekapProjectRowChanged(Me, New dtRetrieveReportRekapProjectRowChangeEvent(CType(e.Row,dtRetrieveReportRekapProjectRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtRetrieveReportRekapProjectRowChangingEvent) Is Nothing) Then
                RaiseEvent dtRetrieveReportRekapProjectRowChanging(Me, New dtRetrieveReportRekapProjectRowChangeEvent(CType(e.Row,dtRetrieveReportRekapProjectRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtRetrieveReportRekapProjectRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtRetrieveReportRekapProjectRowDeleted(Me, New dtRetrieveReportRekapProjectRowChangeEvent(CType(e.Row,dtRetrieveReportRekapProjectRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtRetrieveReportRekapProjectRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtRetrieveReportRekapProjectRowDeleting(Me, New dtRetrieveReportRekapProjectRowChangeEvent(CType(e.Row,dtRetrieveReportRekapProjectRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtRetrieveReportRekapProjectRow(ByVal row As dtRetrieveReportRekapProjectRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsReport = New dsReport
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtRetrieveReportRekapProjectDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtRetrieveReportRekapProgressProjectPerSPKDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnProject_No As Global.System.Data.DataColumn
        
        Private columnSPK_No As Global.System.Data.DataColumn
        
        Private columnSPK_Date As Global.System.Data.DataColumn
        
        Private columnCust_ID As Global.System.Data.DataColumn
        
        Private columnNama As Global.System.Data.DataColumn
        
        Private columnJasa_ID As Global.System.Data.DataColumn
        
        Private columnJasa_Name As Global.System.Data.DataColumn
        
        Private columnJumlahJamSPK As Global.System.Data.DataColumn
        
        Private columnJumlahJamLog As Global.System.Data.DataColumn
        
        Private columnProject_Name As Global.System.Data.DataColumn
        
        Private columnStatus_Name As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtRetrieveReportRekapProgressProjectPerSPK"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Project_NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProject_No
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SPK_NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSPK_No
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SPK_DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSPK_Date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Cust_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCust_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NamaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNama
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Jasa_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJasa_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Jasa_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJasa_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JumlahJamSPKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJumlahJamSPK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JumlahJamLogColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJumlahJamLog
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Project_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProject_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Status_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatus_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtRetrieveReportRekapProgressProjectPerSPKRow
            Get
                Return CType(Me.Rows(index),dtRetrieveReportRekapProgressProjectPerSPKRow)
            End Get
        End Property
        
        Public Event dtRetrieveReportRekapProgressProjectPerSPKRowChanging As dtRetrieveReportRekapProgressProjectPerSPKRowChangeEventHandler
        
        Public Event dtRetrieveReportRekapProgressProjectPerSPKRowChanged As dtRetrieveReportRekapProgressProjectPerSPKRowChangeEventHandler
        
        Public Event dtRetrieveReportRekapProgressProjectPerSPKRowDeleting As dtRetrieveReportRekapProgressProjectPerSPKRowChangeEventHandler
        
        Public Event dtRetrieveReportRekapProgressProjectPerSPKRowDeleted As dtRetrieveReportRekapProgressProjectPerSPKRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtRetrieveReportRekapProgressProjectPerSPKRow(ByVal row As dtRetrieveReportRekapProgressProjectPerSPKRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtRetrieveReportRekapProgressProjectPerSPKRow(ByVal Project_No As String, ByVal SPK_No As String, ByVal SPK_Date As String, ByVal Cust_ID As String, ByVal Nama As String, ByVal Jasa_ID As String, ByVal Jasa_Name As String, ByVal JumlahJamSPK As String, ByVal JumlahJamLog As String, ByVal Project_Name As String, ByVal Status_Name As String) As dtRetrieveReportRekapProgressProjectPerSPKRow
            Dim rowdtRetrieveReportRekapProgressProjectPerSPKRow As dtRetrieveReportRekapProgressProjectPerSPKRow = CType(Me.NewRow,dtRetrieveReportRekapProgressProjectPerSPKRow)
            Dim columnValuesArray() As Object = New Object() {Project_No, SPK_No, SPK_Date, Cust_ID, Nama, Jasa_ID, Jasa_Name, JumlahJamSPK, JumlahJamLog, Project_Name, Status_Name}
            rowdtRetrieveReportRekapProgressProjectPerSPKRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtRetrieveReportRekapProgressProjectPerSPKRow)
            Return rowdtRetrieveReportRekapProgressProjectPerSPKRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtRetrieveReportRekapProgressProjectPerSPKDataTable = CType(MyBase.Clone,dtRetrieveReportRekapProgressProjectPerSPKDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtRetrieveReportRekapProgressProjectPerSPKDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnProject_No = MyBase.Columns("Project_No")
            Me.columnSPK_No = MyBase.Columns("SPK_No")
            Me.columnSPK_Date = MyBase.Columns("SPK_Date")
            Me.columnCust_ID = MyBase.Columns("Cust_ID")
            Me.columnNama = MyBase.Columns("Nama")
            Me.columnJasa_ID = MyBase.Columns("Jasa_ID")
            Me.columnJasa_Name = MyBase.Columns("Jasa_Name")
            Me.columnJumlahJamSPK = MyBase.Columns("JumlahJamSPK")
            Me.columnJumlahJamLog = MyBase.Columns("JumlahJamLog")
            Me.columnProject_Name = MyBase.Columns("Project_Name")
            Me.columnStatus_Name = MyBase.Columns("Status_Name")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnProject_No = New Global.System.Data.DataColumn("Project_No", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProject_No)
            Me.columnSPK_No = New Global.System.Data.DataColumn("SPK_No", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPK_No)
            Me.columnSPK_Date = New Global.System.Data.DataColumn("SPK_Date", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPK_Date)
            Me.columnCust_ID = New Global.System.Data.DataColumn("Cust_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCust_ID)
            Me.columnNama = New Global.System.Data.DataColumn("Nama", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNama)
            Me.columnJasa_ID = New Global.System.Data.DataColumn("Jasa_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJasa_ID)
            Me.columnJasa_Name = New Global.System.Data.DataColumn("Jasa_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJasa_Name)
            Me.columnJumlahJamSPK = New Global.System.Data.DataColumn("JumlahJamSPK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJumlahJamSPK)
            Me.columnJumlahJamLog = New Global.System.Data.DataColumn("JumlahJamLog", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJumlahJamLog)
            Me.columnProject_Name = New Global.System.Data.DataColumn("Project_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProject_Name)
            Me.columnStatus_Name = New Global.System.Data.DataColumn("Status_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatus_Name)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtRetrieveReportRekapProgressProjectPerSPKRow() As dtRetrieveReportRekapProgressProjectPerSPKRow
            Return CType(Me.NewRow,dtRetrieveReportRekapProgressProjectPerSPKRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtRetrieveReportRekapProgressProjectPerSPKRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtRetrieveReportRekapProgressProjectPerSPKRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtRetrieveReportRekapProgressProjectPerSPKRowChangedEvent) Is Nothing) Then
                RaiseEvent dtRetrieveReportRekapProgressProjectPerSPKRowChanged(Me, New dtRetrieveReportRekapProgressProjectPerSPKRowChangeEvent(CType(e.Row,dtRetrieveReportRekapProgressProjectPerSPKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtRetrieveReportRekapProgressProjectPerSPKRowChangingEvent) Is Nothing) Then
                RaiseEvent dtRetrieveReportRekapProgressProjectPerSPKRowChanging(Me, New dtRetrieveReportRekapProgressProjectPerSPKRowChangeEvent(CType(e.Row,dtRetrieveReportRekapProgressProjectPerSPKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtRetrieveReportRekapProgressProjectPerSPKRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtRetrieveReportRekapProgressProjectPerSPKRowDeleted(Me, New dtRetrieveReportRekapProgressProjectPerSPKRowChangeEvent(CType(e.Row,dtRetrieveReportRekapProgressProjectPerSPKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtRetrieveReportRekapProgressProjectPerSPKRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtRetrieveReportRekapProgressProjectPerSPKRowDeleting(Me, New dtRetrieveReportRekapProgressProjectPerSPKRowChangeEvent(CType(e.Row,dtRetrieveReportRekapProgressProjectPerSPKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtRetrieveReportRekapProgressProjectPerSPKRow(ByVal row As dtRetrieveReportRekapProgressProjectPerSPKRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsReport = New dsReport
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtRetrieveReportRekapProgressProjectPerSPKDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_getPembelianItemDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPO_Date As Global.System.Data.DataColumn
        
        Private columnSupplier_ID As Global.System.Data.DataColumn
        
        Private columnNama As Global.System.Data.DataColumn
        
        Private columnTB_No As Global.System.Data.DataColumn
        
        Private columnPO_No As Global.System.Data.DataColumn
        
        Private columnTB_Date As Global.System.Data.DataColumn
        
        Private columnWarehouse_name As Global.System.Data.DataColumn
        
        Private columnitem_id As Global.System.Data.DataColumn
        
        Private columnitem_name As Global.System.Data.DataColumn
        
        Private columnUom As Global.System.Data.DataColumn
        
        Private columnqty As Global.System.Data.DataColumn
        
        Private columnprice As Global.System.Data.DataColumn
        
        Private columnsubtotal As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_getPembelianItem"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PO_DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPO_Date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Supplier_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSupplier_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NamaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNama
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TB_NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTB_No
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PO_NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPO_No
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TB_DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTB_Date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Warehouse_nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWarehouse_name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property item_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnitem_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property item_nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnitem_name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UomColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property qtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnqty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property priceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprice
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property subtotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsubtotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_getPembelianItemRow
            Get
                Return CType(Me.Rows(index),sp_getPembelianItemRow)
            End Get
        End Property
        
        Public Event sp_getPembelianItemRowChanging As sp_getPembelianItemRowChangeEventHandler
        
        Public Event sp_getPembelianItemRowChanged As sp_getPembelianItemRowChangeEventHandler
        
        Public Event sp_getPembelianItemRowDeleting As sp_getPembelianItemRowChangeEventHandler
        
        Public Event sp_getPembelianItemRowDeleted As sp_getPembelianItemRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_getPembelianItemRow(ByVal row As sp_getPembelianItemRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_getPembelianItemRow(ByVal PO_Date As Date, ByVal Supplier_ID As String, ByVal Nama As String, ByVal TB_No As String, ByVal PO_No As String, ByVal TB_Date As Date, ByVal Warehouse_name As String, ByVal item_id As String, ByVal item_name As String, ByVal Uom As String, ByVal qty As Integer, ByVal price As Decimal, ByVal subtotal As Decimal) As sp_getPembelianItemRow
            Dim rowsp_getPembelianItemRow As sp_getPembelianItemRow = CType(Me.NewRow,sp_getPembelianItemRow)
            Dim columnValuesArray() As Object = New Object() {PO_Date, Supplier_ID, Nama, TB_No, PO_No, TB_Date, Warehouse_name, item_id, item_name, Uom, qty, price, subtotal}
            rowsp_getPembelianItemRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_getPembelianItemRow)
            Return rowsp_getPembelianItemRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_getPembelianItemDataTable = CType(MyBase.Clone,sp_getPembelianItemDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_getPembelianItemDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPO_Date = MyBase.Columns("PO_Date")
            Me.columnSupplier_ID = MyBase.Columns("Supplier_ID")
            Me.columnNama = MyBase.Columns("Nama")
            Me.columnTB_No = MyBase.Columns("TB_No")
            Me.columnPO_No = MyBase.Columns("PO_No")
            Me.columnTB_Date = MyBase.Columns("TB_Date")
            Me.columnWarehouse_name = MyBase.Columns("Warehouse_name")
            Me.columnitem_id = MyBase.Columns("item_id")
            Me.columnitem_name = MyBase.Columns("item_name")
            Me.columnUom = MyBase.Columns("Uom")
            Me.columnqty = MyBase.Columns("qty")
            Me.columnprice = MyBase.Columns("price")
            Me.columnsubtotal = MyBase.Columns("subtotal")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPO_Date = New Global.System.Data.DataColumn("PO_Date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPO_Date)
            Me.columnSupplier_ID = New Global.System.Data.DataColumn("Supplier_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSupplier_ID)
            Me.columnNama = New Global.System.Data.DataColumn("Nama", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNama)
            Me.columnTB_No = New Global.System.Data.DataColumn("TB_No", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTB_No)
            Me.columnPO_No = New Global.System.Data.DataColumn("PO_No", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPO_No)
            Me.columnTB_Date = New Global.System.Data.DataColumn("TB_Date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTB_Date)
            Me.columnWarehouse_name = New Global.System.Data.DataColumn("Warehouse_name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWarehouse_name)
            Me.columnitem_id = New Global.System.Data.DataColumn("item_id", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnitem_id)
            Me.columnitem_name = New Global.System.Data.DataColumn("item_name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnitem_name)
            Me.columnUom = New Global.System.Data.DataColumn("Uom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUom)
            Me.columnqty = New Global.System.Data.DataColumn("qty", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnqty)
            Me.columnprice = New Global.System.Data.DataColumn("price", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprice)
            Me.columnsubtotal = New Global.System.Data.DataColumn("subtotal", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsubtotal)
            Me.columnSupplier_ID.MaxLength = 10
            Me.columnNama.MaxLength = 50
            Me.columnTB_No.AllowDBNull = false
            Me.columnTB_No.MaxLength = 9
            Me.columnPO_No.AllowDBNull = false
            Me.columnPO_No.MaxLength = 10
            Me.columnTB_Date.AllowDBNull = false
            Me.columnWarehouse_name.MaxLength = 100
            Me.columnitem_id.MaxLength = 10
            Me.columnitem_name.MaxLength = 100
            Me.columnUom.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_getPembelianItemRow() As sp_getPembelianItemRow
            Return CType(Me.NewRow,sp_getPembelianItemRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_getPembelianItemRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_getPembelianItemRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_getPembelianItemRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_getPembelianItemRowChanged(Me, New sp_getPembelianItemRowChangeEvent(CType(e.Row,sp_getPembelianItemRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_getPembelianItemRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_getPembelianItemRowChanging(Me, New sp_getPembelianItemRowChangeEvent(CType(e.Row,sp_getPembelianItemRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_getPembelianItemRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_getPembelianItemRowDeleted(Me, New sp_getPembelianItemRowChangeEvent(CType(e.Row,sp_getPembelianItemRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_getPembelianItemRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_getPembelianItemRowDeleting(Me, New sp_getPembelianItemRowChangeEvent(CType(e.Row,sp_getPembelianItemRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_getPembelianItemRow(ByVal row As sp_getPembelianItemRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsReport = New dsReport
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_getPembelianItemDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtPOPendingBasedOnTerimaBarangDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPO_Date As Global.System.Data.DataColumn
        
        Private columnSupplier_ID As Global.System.Data.DataColumn
        
        Private columnNama As Global.System.Data.DataColumn
        
        Private columnTB_No As Global.System.Data.DataColumn
        
        Private columnPO_No As Global.System.Data.DataColumn
        
        Private columnTB_Date As Global.System.Data.DataColumn
        
        Private columnWarehouse_ID As Global.System.Data.DataColumn
        
        Private columnWarehouse_Name As Global.System.Data.DataColumn
        
        Private columnItem_ID As Global.System.Data.DataColumn
        
        Private columnItem_Name As Global.System.Data.DataColumn
        
        Private columnUoM As Global.System.Data.DataColumn
        
        Private columnQty_Rec As Global.System.Data.DataColumn
        
        Private columnPrice As Global.System.Data.DataColumn
        
        Private columnDiskon As Global.System.Data.DataColumn
        
        Private columnSubTotal As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtPOPendingBasedOnTerimaBarang"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PO_DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPO_Date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Supplier_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSupplier_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NamaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNama
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TB_NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTB_No
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PO_NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPO_No
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TB_DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTB_Date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Warehouse_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWarehouse_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Warehouse_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWarehouse_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Item_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItem_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Item_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItem_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UoMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUoM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Qty_RecColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQty_Rec
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrice
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DiskonColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDiskon
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubTotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubTotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtPOPendingBasedOnTerimaBarangRow
            Get
                Return CType(Me.Rows(index),dtPOPendingBasedOnTerimaBarangRow)
            End Get
        End Property
        
        Public Event dtPOPendingBasedOnTerimaBarangRowChanging As dtPOPendingBasedOnTerimaBarangRowChangeEventHandler
        
        Public Event dtPOPendingBasedOnTerimaBarangRowChanged As dtPOPendingBasedOnTerimaBarangRowChangeEventHandler
        
        Public Event dtPOPendingBasedOnTerimaBarangRowDeleting As dtPOPendingBasedOnTerimaBarangRowChangeEventHandler
        
        Public Event dtPOPendingBasedOnTerimaBarangRowDeleted As dtPOPendingBasedOnTerimaBarangRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtPOPendingBasedOnTerimaBarangRow(ByVal row As dtPOPendingBasedOnTerimaBarangRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtPOPendingBasedOnTerimaBarangRow(ByVal PO_Date As Date, ByVal Supplier_ID As String, ByVal Nama As String, ByVal TB_No As String, ByVal PO_No As String, ByVal TB_Date As Date, ByVal Warehouse_ID As String, ByVal Warehouse_Name As String, ByVal Item_ID As String, ByVal Item_Name As String, ByVal UoM As String, ByVal Qty_Rec As Integer, ByVal Price As Decimal, ByVal Diskon As Decimal, ByVal SubTotal As Decimal) As dtPOPendingBasedOnTerimaBarangRow
            Dim rowdtPOPendingBasedOnTerimaBarangRow As dtPOPendingBasedOnTerimaBarangRow = CType(Me.NewRow,dtPOPendingBasedOnTerimaBarangRow)
            Dim columnValuesArray() As Object = New Object() {PO_Date, Supplier_ID, Nama, TB_No, PO_No, TB_Date, Warehouse_ID, Warehouse_Name, Item_ID, Item_Name, UoM, Qty_Rec, Price, Diskon, SubTotal}
            rowdtPOPendingBasedOnTerimaBarangRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtPOPendingBasedOnTerimaBarangRow)
            Return rowdtPOPendingBasedOnTerimaBarangRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtPOPendingBasedOnTerimaBarangDataTable = CType(MyBase.Clone,dtPOPendingBasedOnTerimaBarangDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtPOPendingBasedOnTerimaBarangDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPO_Date = MyBase.Columns("PO_Date")
            Me.columnSupplier_ID = MyBase.Columns("Supplier_ID")
            Me.columnNama = MyBase.Columns("Nama")
            Me.columnTB_No = MyBase.Columns("TB_No")
            Me.columnPO_No = MyBase.Columns("PO_No")
            Me.columnTB_Date = MyBase.Columns("TB_Date")
            Me.columnWarehouse_ID = MyBase.Columns("Warehouse_ID")
            Me.columnWarehouse_Name = MyBase.Columns("Warehouse_Name")
            Me.columnItem_ID = MyBase.Columns("Item_ID")
            Me.columnItem_Name = MyBase.Columns("Item_Name")
            Me.columnUoM = MyBase.Columns("UoM")
            Me.columnQty_Rec = MyBase.Columns("Qty_Rec")
            Me.columnPrice = MyBase.Columns("Price")
            Me.columnDiskon = MyBase.Columns("Diskon")
            Me.columnSubTotal = MyBase.Columns("SubTotal")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPO_Date = New Global.System.Data.DataColumn("PO_Date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPO_Date)
            Me.columnSupplier_ID = New Global.System.Data.DataColumn("Supplier_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSupplier_ID)
            Me.columnNama = New Global.System.Data.DataColumn("Nama", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNama)
            Me.columnTB_No = New Global.System.Data.DataColumn("TB_No", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTB_No)
            Me.columnPO_No = New Global.System.Data.DataColumn("PO_No", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPO_No)
            Me.columnTB_Date = New Global.System.Data.DataColumn("TB_Date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTB_Date)
            Me.columnWarehouse_ID = New Global.System.Data.DataColumn("Warehouse_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWarehouse_ID)
            Me.columnWarehouse_Name = New Global.System.Data.DataColumn("Warehouse_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWarehouse_Name)
            Me.columnItem_ID = New Global.System.Data.DataColumn("Item_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItem_ID)
            Me.columnItem_Name = New Global.System.Data.DataColumn("Item_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItem_Name)
            Me.columnUoM = New Global.System.Data.DataColumn("UoM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUoM)
            Me.columnQty_Rec = New Global.System.Data.DataColumn("Qty_Rec", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQty_Rec)
            Me.columnPrice = New Global.System.Data.DataColumn("Price", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrice)
            Me.columnDiskon = New Global.System.Data.DataColumn("Diskon", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDiskon)
            Me.columnSubTotal = New Global.System.Data.DataColumn("SubTotal", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubTotal)
            Me.columnPO_Date.AllowDBNull = false
            Me.columnSupplier_ID.AllowDBNull = false
            Me.columnSupplier_ID.MaxLength = 10
            Me.columnNama.MaxLength = 50
            Me.columnTB_No.AllowDBNull = false
            Me.columnTB_No.MaxLength = 9
            Me.columnPO_No.AllowDBNull = false
            Me.columnPO_No.MaxLength = 9
            Me.columnTB_Date.AllowDBNull = false
            Me.columnWarehouse_ID.AllowDBNull = false
            Me.columnWarehouse_ID.MaxLength = 5
            Me.columnWarehouse_Name.MaxLength = 100
            Me.columnItem_ID.AllowDBNull = false
            Me.columnItem_ID.MaxLength = 10
            Me.columnItem_Name.MaxLength = 100
            Me.columnUoM.MaxLength = 10
            Me.columnQty_Rec.AllowDBNull = false
            Me.columnPrice.AllowDBNull = false
            Me.columnSubTotal.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtPOPendingBasedOnTerimaBarangRow() As dtPOPendingBasedOnTerimaBarangRow
            Return CType(Me.NewRow,dtPOPendingBasedOnTerimaBarangRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtPOPendingBasedOnTerimaBarangRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtPOPendingBasedOnTerimaBarangRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtPOPendingBasedOnTerimaBarangRowChangedEvent) Is Nothing) Then
                RaiseEvent dtPOPendingBasedOnTerimaBarangRowChanged(Me, New dtPOPendingBasedOnTerimaBarangRowChangeEvent(CType(e.Row,dtPOPendingBasedOnTerimaBarangRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtPOPendingBasedOnTerimaBarangRowChangingEvent) Is Nothing) Then
                RaiseEvent dtPOPendingBasedOnTerimaBarangRowChanging(Me, New dtPOPendingBasedOnTerimaBarangRowChangeEvent(CType(e.Row,dtPOPendingBasedOnTerimaBarangRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtPOPendingBasedOnTerimaBarangRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtPOPendingBasedOnTerimaBarangRowDeleted(Me, New dtPOPendingBasedOnTerimaBarangRowChangeEvent(CType(e.Row,dtPOPendingBasedOnTerimaBarangRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtPOPendingBasedOnTerimaBarangRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtPOPendingBasedOnTerimaBarangRowDeleting(Me, New dtPOPendingBasedOnTerimaBarangRowChangeEvent(CType(e.Row,dtPOPendingBasedOnTerimaBarangRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtPOPendingBasedOnTerimaBarangRow(ByVal row As dtPOPendingBasedOnTerimaBarangRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsReport = New dsReport
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtPOPendingBasedOnTerimaBarangDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_GetCustomerReceivableAgingDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columncust_id As Global.System.Data.DataColumn
        
        Private columnnama As Global.System.Data.DataColumn
        
        Private columnsaldo_awal As Global.System.Data.DataColumn
        
        Private columnnilai_project As Global.System.Data.DataColumn
        
        Private columnpenjualan As Global.System.Data.DataColumn
        
        Private columntotal_invoice As Global.System.Data.DataColumn
        
        Private columninvoice_terbayarkan As Global.System.Data.DataColumn
        
        Private columnpotongan As Global.System.Data.DataColumn
        
        Private columnsisa_invoice As Global.System.Data.DataColumn
        
        Private _column0_30 As Global.System.Data.DataColumn
        
        Private _column30_60 As Global.System.Data.DataColumn
        
        Private _column_60 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_GetCustomerReceivableAging"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cust_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncust_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property namaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnama
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property saldo_awalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsaldo_awal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nilai_projectColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnilai_project
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property penjualanColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpenjualan
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property total_invoiceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntotal_invoice
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property invoice_terbayarkanColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columninvoice_terbayarkan
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property potonganColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpotongan
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sisa_invoiceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsisa_invoice
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _0_30Column() As Global.System.Data.DataColumn
            Get
                Return Me._column0_30
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _30_60Column() As Global.System.Data.DataColumn
            Get
                Return Me._column30_60
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property __60Column() As Global.System.Data.DataColumn
            Get
                Return Me._column_60
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_GetCustomerReceivableAgingRow
            Get
                Return CType(Me.Rows(index),sp_GetCustomerReceivableAgingRow)
            End Get
        End Property
        
        Public Event sp_GetCustomerReceivableAgingRowChanging As sp_GetCustomerReceivableAgingRowChangeEventHandler
        
        Public Event sp_GetCustomerReceivableAgingRowChanged As sp_GetCustomerReceivableAgingRowChangeEventHandler
        
        Public Event sp_GetCustomerReceivableAgingRowDeleting As sp_GetCustomerReceivableAgingRowChangeEventHandler
        
        Public Event sp_GetCustomerReceivableAgingRowDeleted As sp_GetCustomerReceivableAgingRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_GetCustomerReceivableAgingRow(ByVal row As sp_GetCustomerReceivableAgingRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_GetCustomerReceivableAgingRow(ByVal cust_id As String, ByVal nama As String, ByVal saldo_awal As Decimal, ByVal nilai_project As Decimal, ByVal penjualan As Decimal, ByVal total_invoice As Decimal, ByVal invoice_terbayarkan As Decimal, ByVal potongan As Decimal, ByVal sisa_invoice As Decimal, ByVal _0_30 As Decimal, ByVal _30_60 As Decimal, ByVal __60 As Decimal) As sp_GetCustomerReceivableAgingRow
            Dim rowsp_GetCustomerReceivableAgingRow As sp_GetCustomerReceivableAgingRow = CType(Me.NewRow,sp_GetCustomerReceivableAgingRow)
            Dim columnValuesArray() As Object = New Object() {cust_id, nama, saldo_awal, nilai_project, penjualan, total_invoice, invoice_terbayarkan, potongan, sisa_invoice, _0_30, _30_60, __60}
            rowsp_GetCustomerReceivableAgingRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_GetCustomerReceivableAgingRow)
            Return rowsp_GetCustomerReceivableAgingRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_GetCustomerReceivableAgingDataTable = CType(MyBase.Clone,sp_GetCustomerReceivableAgingDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_GetCustomerReceivableAgingDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columncust_id = MyBase.Columns("cust_id")
            Me.columnnama = MyBase.Columns("nama")
            Me.columnsaldo_awal = MyBase.Columns("saldo_awal")
            Me.columnnilai_project = MyBase.Columns("nilai_project")
            Me.columnpenjualan = MyBase.Columns("penjualan")
            Me.columntotal_invoice = MyBase.Columns("total_invoice")
            Me.columninvoice_terbayarkan = MyBase.Columns("invoice_terbayarkan")
            Me.columnpotongan = MyBase.Columns("potongan")
            Me.columnsisa_invoice = MyBase.Columns("sisa_invoice")
            Me._column0_30 = MyBase.Columns("0-30")
            Me._column30_60 = MyBase.Columns("30-60")
            Me._column_60 = MyBase.Columns(">60")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columncust_id = New Global.System.Data.DataColumn("cust_id", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncust_id)
            Me.columnnama = New Global.System.Data.DataColumn("nama", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnama)
            Me.columnsaldo_awal = New Global.System.Data.DataColumn("saldo_awal", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsaldo_awal)
            Me.columnnilai_project = New Global.System.Data.DataColumn("nilai_project", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnilai_project)
            Me.columnpenjualan = New Global.System.Data.DataColumn("penjualan", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpenjualan)
            Me.columntotal_invoice = New Global.System.Data.DataColumn("total_invoice", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntotal_invoice)
            Me.columninvoice_terbayarkan = New Global.System.Data.DataColumn("invoice_terbayarkan", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columninvoice_terbayarkan)
            Me.columnpotongan = New Global.System.Data.DataColumn("potongan", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpotongan)
            Me.columnsisa_invoice = New Global.System.Data.DataColumn("sisa_invoice", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsisa_invoice)
            Me._column0_30 = New Global.System.Data.DataColumn("0-30", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            Me._column0_30.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column0_30")
            Me._column0_30.ExtendedProperties.Add("Generator_UserColumnName", "0-30")
            MyBase.Columns.Add(Me._column0_30)
            Me._column30_60 = New Global.System.Data.DataColumn("30-60", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            Me._column30_60.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column30_60")
            Me._column30_60.ExtendedProperties.Add("Generator_UserColumnName", "30-60")
            MyBase.Columns.Add(Me._column30_60)
            Me._column_60 = New Global.System.Data.DataColumn(">60", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            Me._column_60.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column_60")
            Me._column_60.ExtendedProperties.Add("Generator_UserColumnName", ">60")
            MyBase.Columns.Add(Me._column_60)
            Me.columncust_id.MaxLength = 10
            Me.columnnama.MaxLength = 100
            Me.columnsaldo_awal.ReadOnly = true
            Me.columnnilai_project.ReadOnly = true
            Me.columnpenjualan.ReadOnly = true
            Me.columntotal_invoice.ReadOnly = true
            Me.columninvoice_terbayarkan.ReadOnly = true
            Me.columnpotongan.ReadOnly = true
            Me.columnsisa_invoice.ReadOnly = true
            Me._column0_30.ReadOnly = true
            Me._column30_60.ReadOnly = true
            Me._column_60.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_GetCustomerReceivableAgingRow() As sp_GetCustomerReceivableAgingRow
            Return CType(Me.NewRow,sp_GetCustomerReceivableAgingRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_GetCustomerReceivableAgingRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_GetCustomerReceivableAgingRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_GetCustomerReceivableAgingRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_GetCustomerReceivableAgingRowChanged(Me, New sp_GetCustomerReceivableAgingRowChangeEvent(CType(e.Row,sp_GetCustomerReceivableAgingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_GetCustomerReceivableAgingRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_GetCustomerReceivableAgingRowChanging(Me, New sp_GetCustomerReceivableAgingRowChangeEvent(CType(e.Row,sp_GetCustomerReceivableAgingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_GetCustomerReceivableAgingRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_GetCustomerReceivableAgingRowDeleted(Me, New sp_GetCustomerReceivableAgingRowChangeEvent(CType(e.Row,sp_GetCustomerReceivableAgingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_GetCustomerReceivableAgingRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_GetCustomerReceivableAgingRowDeleting(Me, New sp_GetCustomerReceivableAgingRowChangeEvent(CType(e.Row,sp_GetCustomerReceivableAgingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_GetCustomerReceivableAgingRow(ByVal row As sp_GetCustomerReceivableAgingRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsReport = New dsReport
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_GetCustomerReceivableAgingDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtRetrieveReportFormPenawaranMarketingHdrDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPHM_No As Global.System.Data.DataColumn
        
        Private columnPHM_Date As Global.System.Data.DataColumn
        
        Private columnCustName As Global.System.Data.DataColumn
        
        Private columnMICE_Main As Global.System.Data.DataColumn
        
        Private columnMarkUp_Pct As Global.System.Data.DataColumn
        
        Private columnMICE_Supporting As Global.System.Data.DataColumn
        
        Private columnTotalJasa As Global.System.Data.DataColumn
        
        Private columnAdminQC_Amt As Global.System.Data.DataColumn
        
        Private columnRemarks As Global.System.Data.DataColumn
        
        Private columnDiscAmt As Global.System.Data.DataColumn
        
        Private columnSurvey_Remark As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtRetrieveReportFormPenawaranMarketingHdr"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PHM_NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPHM_No
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PHM_DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPHM_Date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MICE_MainColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMICE_Main
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MarkUp_PctColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMarkUp_Pct
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MICE_SupportingColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMICE_Supporting
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalJasaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalJasa
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AdminQC_AmtColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAdminQC_Amt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RemarksColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemarks
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DiscAmtColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDiscAmt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Survey_RemarkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSurvey_Remark
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtRetrieveReportFormPenawaranMarketingHdrRow
            Get
                Return CType(Me.Rows(index),dtRetrieveReportFormPenawaranMarketingHdrRow)
            End Get
        End Property
        
        Public Event dtRetrieveReportFormPenawaranMarketingHdrRowChanging As dtRetrieveReportFormPenawaranMarketingHdrRowChangeEventHandler
        
        Public Event dtRetrieveReportFormPenawaranMarketingHdrRowChanged As dtRetrieveReportFormPenawaranMarketingHdrRowChangeEventHandler
        
        Public Event dtRetrieveReportFormPenawaranMarketingHdrRowDeleting As dtRetrieveReportFormPenawaranMarketingHdrRowChangeEventHandler
        
        Public Event dtRetrieveReportFormPenawaranMarketingHdrRowDeleted As dtRetrieveReportFormPenawaranMarketingHdrRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtRetrieveReportFormPenawaranMarketingHdrRow(ByVal row As dtRetrieveReportFormPenawaranMarketingHdrRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtRetrieveReportFormPenawaranMarketingHdrRow(ByVal PHM_No As String, ByVal PHM_Date As Date, ByVal CustName As String, ByVal MICE_Main As Decimal, ByVal MarkUp_Pct As Decimal, ByVal MICE_Supporting As Decimal, ByVal TotalJasa As Decimal, ByVal AdminQC_Amt As Decimal, ByVal Remarks As String, ByVal DiscAmt As Decimal, ByVal Survey_Remark As String) As dtRetrieveReportFormPenawaranMarketingHdrRow
            Dim rowdtRetrieveReportFormPenawaranMarketingHdrRow As dtRetrieveReportFormPenawaranMarketingHdrRow = CType(Me.NewRow,dtRetrieveReportFormPenawaranMarketingHdrRow)
            Dim columnValuesArray() As Object = New Object() {PHM_No, PHM_Date, CustName, MICE_Main, MarkUp_Pct, MICE_Supporting, TotalJasa, AdminQC_Amt, Remarks, DiscAmt, Survey_Remark}
            rowdtRetrieveReportFormPenawaranMarketingHdrRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtRetrieveReportFormPenawaranMarketingHdrRow)
            Return rowdtRetrieveReportFormPenawaranMarketingHdrRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtRetrieveReportFormPenawaranMarketingHdrDataTable = CType(MyBase.Clone,dtRetrieveReportFormPenawaranMarketingHdrDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtRetrieveReportFormPenawaranMarketingHdrDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPHM_No = MyBase.Columns("PHM_No")
            Me.columnPHM_Date = MyBase.Columns("PHM_Date")
            Me.columnCustName = MyBase.Columns("CustName")
            Me.columnMICE_Main = MyBase.Columns("MICE_Main")
            Me.columnMarkUp_Pct = MyBase.Columns("MarkUp_Pct")
            Me.columnMICE_Supporting = MyBase.Columns("MICE_Supporting")
            Me.columnTotalJasa = MyBase.Columns("TotalJasa")
            Me.columnAdminQC_Amt = MyBase.Columns("AdminQC_Amt")
            Me.columnRemarks = MyBase.Columns("Remarks")
            Me.columnDiscAmt = MyBase.Columns("DiscAmt")
            Me.columnSurvey_Remark = MyBase.Columns("Survey_Remark")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPHM_No = New Global.System.Data.DataColumn("PHM_No", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPHM_No)
            Me.columnPHM_Date = New Global.System.Data.DataColumn("PHM_Date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPHM_Date)
            Me.columnCustName = New Global.System.Data.DataColumn("CustName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustName)
            Me.columnMICE_Main = New Global.System.Data.DataColumn("MICE_Main", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMICE_Main)
            Me.columnMarkUp_Pct = New Global.System.Data.DataColumn("MarkUp_Pct", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMarkUp_Pct)
            Me.columnMICE_Supporting = New Global.System.Data.DataColumn("MICE_Supporting", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMICE_Supporting)
            Me.columnTotalJasa = New Global.System.Data.DataColumn("TotalJasa", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalJasa)
            Me.columnAdminQC_Amt = New Global.System.Data.DataColumn("AdminQC_Amt", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAdminQC_Amt)
            Me.columnRemarks = New Global.System.Data.DataColumn("Remarks", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemarks)
            Me.columnDiscAmt = New Global.System.Data.DataColumn("DiscAmt", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDiscAmt)
            Me.columnSurvey_Remark = New Global.System.Data.DataColumn("Survey_Remark", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSurvey_Remark)
            Me.columnPHM_No.AllowDBNull = false
            Me.columnPHM_No.MaxLength = 9
            Me.columnPHM_Date.AllowDBNull = false
            Me.columnCustName.ReadOnly = true
            Me.columnCustName.MaxLength = 100
            Me.columnMICE_Main.ReadOnly = true
            Me.columnMarkUp_Pct.AllowDBNull = false
            Me.columnMICE_Supporting.ReadOnly = true
            Me.columnTotalJasa.ReadOnly = true
            Me.columnAdminQC_Amt.AllowDBNull = false
            Me.columnRemarks.MaxLength = 100
            Me.columnDiscAmt.AllowDBNull = false
            Me.columnSurvey_Remark.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtRetrieveReportFormPenawaranMarketingHdrRow() As dtRetrieveReportFormPenawaranMarketingHdrRow
            Return CType(Me.NewRow,dtRetrieveReportFormPenawaranMarketingHdrRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtRetrieveReportFormPenawaranMarketingHdrRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtRetrieveReportFormPenawaranMarketingHdrRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtRetrieveReportFormPenawaranMarketingHdrRowChangedEvent) Is Nothing) Then
                RaiseEvent dtRetrieveReportFormPenawaranMarketingHdrRowChanged(Me, New dtRetrieveReportFormPenawaranMarketingHdrRowChangeEvent(CType(e.Row,dtRetrieveReportFormPenawaranMarketingHdrRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtRetrieveReportFormPenawaranMarketingHdrRowChangingEvent) Is Nothing) Then
                RaiseEvent dtRetrieveReportFormPenawaranMarketingHdrRowChanging(Me, New dtRetrieveReportFormPenawaranMarketingHdrRowChangeEvent(CType(e.Row,dtRetrieveReportFormPenawaranMarketingHdrRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtRetrieveReportFormPenawaranMarketingHdrRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtRetrieveReportFormPenawaranMarketingHdrRowDeleted(Me, New dtRetrieveReportFormPenawaranMarketingHdrRowChangeEvent(CType(e.Row,dtRetrieveReportFormPenawaranMarketingHdrRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtRetrieveReportFormPenawaranMarketingHdrRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtRetrieveReportFormPenawaranMarketingHdrRowDeleting(Me, New dtRetrieveReportFormPenawaranMarketingHdrRowChangeEvent(CType(e.Row,dtRetrieveReportFormPenawaranMarketingHdrRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtRetrieveReportFormPenawaranMarketingHdrRow(ByVal row As dtRetrieveReportFormPenawaranMarketingHdrRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsReport = New dsReport
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtRetrieveReportFormPenawaranMarketingHdrDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtRetrieveReportFormPenawaranMarketingDtlDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnSeq As Global.System.Data.DataColumn
        
        Private columnItem_Id As Global.System.Data.DataColumn
        
        Private columnItem_Name As Global.System.Data.DataColumn
        
        Private columnItem_Category As Global.System.Data.DataColumn
        
        Private columnUoM As Global.System.Data.DataColumn
        
        Private columnQty As Global.System.Data.DataColumn
        
        Private columnPrice_Marketing As Global.System.Data.DataColumn
        
        Private columnSubTotal As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtRetrieveReportFormPenawaranMarketingDtl"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SeqColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSeq
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Item_IdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItem_Id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Item_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItem_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Item_CategoryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItem_Category
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UoMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUoM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Price_MarketingColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrice_Marketing
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubTotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubTotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtRetrieveReportFormPenawaranMarketingDtlRow
            Get
                Return CType(Me.Rows(index),dtRetrieveReportFormPenawaranMarketingDtlRow)
            End Get
        End Property
        
        Public Event dtRetrieveReportFormPenawaranMarketingDtlRowChanging As dtRetrieveReportFormPenawaranMarketingDtlRowChangeEventHandler
        
        Public Event dtRetrieveReportFormPenawaranMarketingDtlRowChanged As dtRetrieveReportFormPenawaranMarketingDtlRowChangeEventHandler
        
        Public Event dtRetrieveReportFormPenawaranMarketingDtlRowDeleting As dtRetrieveReportFormPenawaranMarketingDtlRowChangeEventHandler
        
        Public Event dtRetrieveReportFormPenawaranMarketingDtlRowDeleted As dtRetrieveReportFormPenawaranMarketingDtlRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtRetrieveReportFormPenawaranMarketingDtlRow(ByVal row As dtRetrieveReportFormPenawaranMarketingDtlRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtRetrieveReportFormPenawaranMarketingDtlRow(ByVal Seq As Integer, ByVal Item_Id As String, ByVal Item_Name As String, ByVal Item_Category As String, ByVal UoM As String, ByVal Qty As Integer, ByVal Price_Marketing As Decimal, ByVal SubTotal As Decimal) As dtRetrieveReportFormPenawaranMarketingDtlRow
            Dim rowdtRetrieveReportFormPenawaranMarketingDtlRow As dtRetrieveReportFormPenawaranMarketingDtlRow = CType(Me.NewRow,dtRetrieveReportFormPenawaranMarketingDtlRow)
            Dim columnValuesArray() As Object = New Object() {Seq, Item_Id, Item_Name, Item_Category, UoM, Qty, Price_Marketing, SubTotal}
            rowdtRetrieveReportFormPenawaranMarketingDtlRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtRetrieveReportFormPenawaranMarketingDtlRow)
            Return rowdtRetrieveReportFormPenawaranMarketingDtlRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtRetrieveReportFormPenawaranMarketingDtlDataTable = CType(MyBase.Clone,dtRetrieveReportFormPenawaranMarketingDtlDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtRetrieveReportFormPenawaranMarketingDtlDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSeq = MyBase.Columns("Seq")
            Me.columnItem_Id = MyBase.Columns("Item_Id")
            Me.columnItem_Name = MyBase.Columns("Item_Name")
            Me.columnItem_Category = MyBase.Columns("Item_Category")
            Me.columnUoM = MyBase.Columns("UoM")
            Me.columnQty = MyBase.Columns("Qty")
            Me.columnPrice_Marketing = MyBase.Columns("Price_Marketing")
            Me.columnSubTotal = MyBase.Columns("SubTotal")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSeq = New Global.System.Data.DataColumn("Seq", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSeq)
            Me.columnItem_Id = New Global.System.Data.DataColumn("Item_Id", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItem_Id)
            Me.columnItem_Name = New Global.System.Data.DataColumn("Item_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItem_Name)
            Me.columnItem_Category = New Global.System.Data.DataColumn("Item_Category", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItem_Category)
            Me.columnUoM = New Global.System.Data.DataColumn("UoM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUoM)
            Me.columnQty = New Global.System.Data.DataColumn("Qty", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQty)
            Me.columnPrice_Marketing = New Global.System.Data.DataColumn("Price_Marketing", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrice_Marketing)
            Me.columnSubTotal = New Global.System.Data.DataColumn("SubTotal", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubTotal)
            Me.columnSeq.ReadOnly = true
            Me.columnItem_Id.ReadOnly = true
            Me.columnItem_Id.MaxLength = 9
            Me.columnItem_Name.ReadOnly = true
            Me.columnItem_Name.MaxLength = 100
            Me.columnItem_Category.ReadOnly = true
            Me.columnItem_Category.MaxLength = 20
            Me.columnUoM.ReadOnly = true
            Me.columnUoM.MaxLength = 10
            Me.columnQty.ReadOnly = true
            Me.columnPrice_Marketing.ReadOnly = true
            Me.columnSubTotal.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtRetrieveReportFormPenawaranMarketingDtlRow() As dtRetrieveReportFormPenawaranMarketingDtlRow
            Return CType(Me.NewRow,dtRetrieveReportFormPenawaranMarketingDtlRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtRetrieveReportFormPenawaranMarketingDtlRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtRetrieveReportFormPenawaranMarketingDtlRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtRetrieveReportFormPenawaranMarketingDtlRowChangedEvent) Is Nothing) Then
                RaiseEvent dtRetrieveReportFormPenawaranMarketingDtlRowChanged(Me, New dtRetrieveReportFormPenawaranMarketingDtlRowChangeEvent(CType(e.Row,dtRetrieveReportFormPenawaranMarketingDtlRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtRetrieveReportFormPenawaranMarketingDtlRowChangingEvent) Is Nothing) Then
                RaiseEvent dtRetrieveReportFormPenawaranMarketingDtlRowChanging(Me, New dtRetrieveReportFormPenawaranMarketingDtlRowChangeEvent(CType(e.Row,dtRetrieveReportFormPenawaranMarketingDtlRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtRetrieveReportFormPenawaranMarketingDtlRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtRetrieveReportFormPenawaranMarketingDtlRowDeleted(Me, New dtRetrieveReportFormPenawaranMarketingDtlRowChangeEvent(CType(e.Row,dtRetrieveReportFormPenawaranMarketingDtlRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtRetrieveReportFormPenawaranMarketingDtlRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtRetrieveReportFormPenawaranMarketingDtlRowDeleting(Me, New dtRetrieveReportFormPenawaranMarketingDtlRowChangeEvent(CType(e.Row,dtRetrieveReportFormPenawaranMarketingDtlRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtRetrieveReportFormPenawaranMarketingDtlRow(ByVal row As dtRetrieveReportFormPenawaranMarketingDtlRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsReport = New dsReport
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtRetrieveReportFormPenawaranMarketingDtlDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtRetrieveReportFormPenawaranMarketingJasaDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnJasa_ID As Global.System.Data.DataColumn
        
        Private columnJasa_Name As Global.System.Data.DataColumn
        
        Private columnJlh_Hari As Global.System.Data.DataColumn
        
        Private columnOngkos As Global.System.Data.DataColumn
        
        Private columnSubTotal As Global.System.Data.DataColumn
        
        Private columnRemarks As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtRetrieveReportFormPenawaranMarketingJasa"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Jasa_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJasa_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Jasa_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJasa_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Jlh_HariColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJlh_Hari
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OngkosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOngkos
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubTotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubTotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RemarksColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemarks
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtRetrieveReportFormPenawaranMarketingJasaRow
            Get
                Return CType(Me.Rows(index),dtRetrieveReportFormPenawaranMarketingJasaRow)
            End Get
        End Property
        
        Public Event dtRetrieveReportFormPenawaranMarketingJasaRowChanging As dtRetrieveReportFormPenawaranMarketingJasaRowChangeEventHandler
        
        Public Event dtRetrieveReportFormPenawaranMarketingJasaRowChanged As dtRetrieveReportFormPenawaranMarketingJasaRowChangeEventHandler
        
        Public Event dtRetrieveReportFormPenawaranMarketingJasaRowDeleting As dtRetrieveReportFormPenawaranMarketingJasaRowChangeEventHandler
        
        Public Event dtRetrieveReportFormPenawaranMarketingJasaRowDeleted As dtRetrieveReportFormPenawaranMarketingJasaRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtRetrieveReportFormPenawaranMarketingJasaRow(ByVal row As dtRetrieveReportFormPenawaranMarketingJasaRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtRetrieveReportFormPenawaranMarketingJasaRow(ByVal Jasa_ID As String, ByVal Jasa_Name As String, ByVal Jlh_Hari As Integer, ByVal Ongkos As Decimal, ByVal SubTotal As Decimal, ByVal Remarks As String) As dtRetrieveReportFormPenawaranMarketingJasaRow
            Dim rowdtRetrieveReportFormPenawaranMarketingJasaRow As dtRetrieveReportFormPenawaranMarketingJasaRow = CType(Me.NewRow,dtRetrieveReportFormPenawaranMarketingJasaRow)
            Dim columnValuesArray() As Object = New Object() {Jasa_ID, Jasa_Name, Jlh_Hari, Ongkos, SubTotal, Remarks}
            rowdtRetrieveReportFormPenawaranMarketingJasaRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtRetrieveReportFormPenawaranMarketingJasaRow)
            Return rowdtRetrieveReportFormPenawaranMarketingJasaRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtRetrieveReportFormPenawaranMarketingJasaDataTable = CType(MyBase.Clone,dtRetrieveReportFormPenawaranMarketingJasaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtRetrieveReportFormPenawaranMarketingJasaDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnJasa_ID = MyBase.Columns("Jasa_ID")
            Me.columnJasa_Name = MyBase.Columns("Jasa_Name")
            Me.columnJlh_Hari = MyBase.Columns("Jlh_Hari")
            Me.columnOngkos = MyBase.Columns("Ongkos")
            Me.columnSubTotal = MyBase.Columns("SubTotal")
            Me.columnRemarks = MyBase.Columns("Remarks")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnJasa_ID = New Global.System.Data.DataColumn("Jasa_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJasa_ID)
            Me.columnJasa_Name = New Global.System.Data.DataColumn("Jasa_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJasa_Name)
            Me.columnJlh_Hari = New Global.System.Data.DataColumn("Jlh_Hari", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJlh_Hari)
            Me.columnOngkos = New Global.System.Data.DataColumn("Ongkos", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOngkos)
            Me.columnSubTotal = New Global.System.Data.DataColumn("SubTotal", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubTotal)
            Me.columnRemarks = New Global.System.Data.DataColumn("Remarks", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemarks)
            Me.columnJasa_ID.AllowDBNull = false
            Me.columnJasa_ID.MaxLength = 5
            Me.columnJasa_Name.ReadOnly = true
            Me.columnJasa_Name.MaxLength = 50
            Me.columnJlh_Hari.AllowDBNull = false
            Me.columnOngkos.AllowDBNull = false
            Me.columnSubTotal.AllowDBNull = false
            Me.columnRemarks.AllowDBNull = false
            Me.columnRemarks.MaxLength = 100
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtRetrieveReportFormPenawaranMarketingJasaRow() As dtRetrieveReportFormPenawaranMarketingJasaRow
            Return CType(Me.NewRow,dtRetrieveReportFormPenawaranMarketingJasaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtRetrieveReportFormPenawaranMarketingJasaRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtRetrieveReportFormPenawaranMarketingJasaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtRetrieveReportFormPenawaranMarketingJasaRowChangedEvent) Is Nothing) Then
                RaiseEvent dtRetrieveReportFormPenawaranMarketingJasaRowChanged(Me, New dtRetrieveReportFormPenawaranMarketingJasaRowChangeEvent(CType(e.Row,dtRetrieveReportFormPenawaranMarketingJasaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtRetrieveReportFormPenawaranMarketingJasaRowChangingEvent) Is Nothing) Then
                RaiseEvent dtRetrieveReportFormPenawaranMarketingJasaRowChanging(Me, New dtRetrieveReportFormPenawaranMarketingJasaRowChangeEvent(CType(e.Row,dtRetrieveReportFormPenawaranMarketingJasaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtRetrieveReportFormPenawaranMarketingJasaRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtRetrieveReportFormPenawaranMarketingJasaRowDeleted(Me, New dtRetrieveReportFormPenawaranMarketingJasaRowChangeEvent(CType(e.Row,dtRetrieveReportFormPenawaranMarketingJasaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtRetrieveReportFormPenawaranMarketingJasaRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtRetrieveReportFormPenawaranMarketingJasaRowDeleting(Me, New dtRetrieveReportFormPenawaranMarketingJasaRowChangeEvent(CType(e.Row,dtRetrieveReportFormPenawaranMarketingJasaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtRetrieveReportFormPenawaranMarketingJasaRow(ByVal row As dtRetrieveReportFormPenawaranMarketingJasaRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsReport = New dsReport
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtRetrieveReportFormPenawaranMarketingJasaDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtPersediaanBarangDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPeriod As Global.System.Data.DataColumn
        
        Private columnWarehouse_ID As Global.System.Data.DataColumn
        
        Private columnWarehouse_name As Global.System.Data.DataColumn
        
        Private columnItem_Id As Global.System.Data.DataColumn
        
        Private columnItem_name As Global.System.Data.DataColumn
        
        Private columnUoM As Global.System.Data.DataColumn
        
        Private columnCurrent_Stock As Global.System.Data.DataColumn
        
        Private columnMin_Stock As Global.System.Data.DataColumn
        
        Private columnTB_Amount As Global.System.Data.DataColumn
        
        Private columnTB_Qty As Global.System.Data.DataColumn
        
        Private columnStockBB_Price As Global.System.Data.DataColumn
        
        Private columnStockBB_Qty As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtPersediaanBarang"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PeriodColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPeriod
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Warehouse_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWarehouse_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Warehouse_nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWarehouse_name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Item_IdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItem_Id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Item_nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItem_name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UoMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUoM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Current_StockColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCurrent_Stock
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Min_StockColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMin_Stock
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TB_AmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTB_Amount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TB_QtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTB_Qty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StockBB_PriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStockBB_Price
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StockBB_QtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStockBB_Qty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtPersediaanBarangRow
            Get
                Return CType(Me.Rows(index),dtPersediaanBarangRow)
            End Get
        End Property
        
        Public Event dtPersediaanBarangRowChanging As dtPersediaanBarangRowChangeEventHandler
        
        Public Event dtPersediaanBarangRowChanged As dtPersediaanBarangRowChangeEventHandler
        
        Public Event dtPersediaanBarangRowDeleting As dtPersediaanBarangRowChangeEventHandler
        
        Public Event dtPersediaanBarangRowDeleted As dtPersediaanBarangRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtPersediaanBarangRow(ByVal row As dtPersediaanBarangRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtPersediaanBarangRow(ByVal Period As String, ByVal Warehouse_ID As String, ByVal Warehouse_name As String, ByVal Item_Id As String, ByVal Item_name As String, ByVal UoM As String, ByVal Current_Stock As Decimal, ByVal Min_Stock As Decimal, ByVal TB_Amount As Decimal, ByVal TB_Qty As Integer, ByVal StockBB_Price As Decimal, ByVal StockBB_Qty As Decimal) As dtPersediaanBarangRow
            Dim rowdtPersediaanBarangRow As dtPersediaanBarangRow = CType(Me.NewRow,dtPersediaanBarangRow)
            Dim columnValuesArray() As Object = New Object() {Period, Warehouse_ID, Warehouse_name, Item_Id, Item_name, UoM, Current_Stock, Min_Stock, TB_Amount, TB_Qty, StockBB_Price, StockBB_Qty}
            rowdtPersediaanBarangRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtPersediaanBarangRow)
            Return rowdtPersediaanBarangRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByItem_Id(ByVal Item_Id As String) As dtPersediaanBarangRow
            Return CType(Me.Rows.Find(New Object() {Item_Id}),dtPersediaanBarangRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtPersediaanBarangDataTable = CType(MyBase.Clone,dtPersediaanBarangDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtPersediaanBarangDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPeriod = MyBase.Columns("Period")
            Me.columnWarehouse_ID = MyBase.Columns("Warehouse_ID")
            Me.columnWarehouse_name = MyBase.Columns("Warehouse_name")
            Me.columnItem_Id = MyBase.Columns("Item_Id")
            Me.columnItem_name = MyBase.Columns("Item_name")
            Me.columnUoM = MyBase.Columns("UoM")
            Me.columnCurrent_Stock = MyBase.Columns("Current_Stock")
            Me.columnMin_Stock = MyBase.Columns("Min_Stock")
            Me.columnTB_Amount = MyBase.Columns("TB_Amount")
            Me.columnTB_Qty = MyBase.Columns("TB_Qty")
            Me.columnStockBB_Price = MyBase.Columns("StockBB_Price")
            Me.columnStockBB_Qty = MyBase.Columns("StockBB_Qty")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPeriod = New Global.System.Data.DataColumn("Period", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPeriod)
            Me.columnWarehouse_ID = New Global.System.Data.DataColumn("Warehouse_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWarehouse_ID)
            Me.columnWarehouse_name = New Global.System.Data.DataColumn("Warehouse_name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWarehouse_name)
            Me.columnItem_Id = New Global.System.Data.DataColumn("Item_Id", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItem_Id)
            Me.columnItem_name = New Global.System.Data.DataColumn("Item_name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItem_name)
            Me.columnUoM = New Global.System.Data.DataColumn("UoM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUoM)
            Me.columnCurrent_Stock = New Global.System.Data.DataColumn("Current_Stock", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCurrent_Stock)
            Me.columnMin_Stock = New Global.System.Data.DataColumn("Min_Stock", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMin_Stock)
            Me.columnTB_Amount = New Global.System.Data.DataColumn("TB_Amount", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTB_Amount)
            Me.columnTB_Qty = New Global.System.Data.DataColumn("TB_Qty", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTB_Qty)
            Me.columnStockBB_Price = New Global.System.Data.DataColumn("StockBB_Price", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStockBB_Price)
            Me.columnStockBB_Qty = New Global.System.Data.DataColumn("StockBB_Qty", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStockBB_Qty)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnItem_Id}, true))
            Me.columnPeriod.ReadOnly = true
            Me.columnPeriod.MaxLength = 6
            Me.columnWarehouse_ID.AllowDBNull = false
            Me.columnWarehouse_ID.MaxLength = 5
            Me.columnWarehouse_name.MaxLength = 100
            Me.columnItem_Id.AllowDBNull = false
            Me.columnItem_Id.Unique = true
            Me.columnItem_Id.MaxLength = 10
            Me.columnItem_name.AllowDBNull = false
            Me.columnItem_name.MaxLength = 100
            Me.columnUoM.AllowDBNull = false
            Me.columnUoM.MaxLength = 10
            Me.columnCurrent_Stock.ReadOnly = true
            Me.columnMin_Stock.AllowDBNull = false
            Me.columnTB_Amount.ReadOnly = true
            Me.columnTB_Qty.ReadOnly = true
            Me.columnStockBB_Price.ReadOnly = true
            Me.columnStockBB_Qty.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtPersediaanBarangRow() As dtPersediaanBarangRow
            Return CType(Me.NewRow,dtPersediaanBarangRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtPersediaanBarangRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtPersediaanBarangRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtPersediaanBarangRowChangedEvent) Is Nothing) Then
                RaiseEvent dtPersediaanBarangRowChanged(Me, New dtPersediaanBarangRowChangeEvent(CType(e.Row,dtPersediaanBarangRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtPersediaanBarangRowChangingEvent) Is Nothing) Then
                RaiseEvent dtPersediaanBarangRowChanging(Me, New dtPersediaanBarangRowChangeEvent(CType(e.Row,dtPersediaanBarangRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtPersediaanBarangRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtPersediaanBarangRowDeleted(Me, New dtPersediaanBarangRowChangeEvent(CType(e.Row,dtPersediaanBarangRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtPersediaanBarangRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtPersediaanBarangRowDeleting(Me, New dtPersediaanBarangRowChangeEvent(CType(e.Row,dtPersediaanBarangRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtPersediaanBarangRow(ByVal row As dtPersediaanBarangRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsReport = New dsReport
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtPersediaanBarangDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtPenjualanTokoPerBarangDailyDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPT_Date As Global.System.Data.DataColumn
        
        Private columnItem_ID As Global.System.Data.DataColumn
        
        Private columnItem_Name As Global.System.Data.DataColumn
        
        Private columnUoM As Global.System.Data.DataColumn
        
        Private columnQty As Global.System.Data.DataColumn
        
        Private columnQty_MinRetur As Global.System.Data.DataColumn
        
        Private columnAmount As Global.System.Data.DataColumn
        
        Private columnAmount_MinRetur As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtPenjualanTokoPerBarangDaily"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PT_DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPT_Date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Item_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItem_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Item_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItem_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UoMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUoM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Qty_MinReturColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQty_MinRetur
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Amount_MinReturColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAmount_MinRetur
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtPenjualanTokoPerBarangDailyRow
            Get
                Return CType(Me.Rows(index),dtPenjualanTokoPerBarangDailyRow)
            End Get
        End Property
        
        Public Event dtPenjualanTokoPerBarangDailyRowChanging As dtPenjualanTokoPerBarangDailyRowChangeEventHandler
        
        Public Event dtPenjualanTokoPerBarangDailyRowChanged As dtPenjualanTokoPerBarangDailyRowChangeEventHandler
        
        Public Event dtPenjualanTokoPerBarangDailyRowDeleting As dtPenjualanTokoPerBarangDailyRowChangeEventHandler
        
        Public Event dtPenjualanTokoPerBarangDailyRowDeleted As dtPenjualanTokoPerBarangDailyRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtPenjualanTokoPerBarangDailyRow(ByVal row As dtPenjualanTokoPerBarangDailyRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtPenjualanTokoPerBarangDailyRow(ByVal PT_Date As Date, ByVal Item_ID As String, ByVal Item_Name As String, ByVal UoM As String, ByVal Qty As Integer, ByVal Qty_MinRetur As Integer, ByVal Amount As Decimal, ByVal Amount_MinRetur As Decimal) As dtPenjualanTokoPerBarangDailyRow
            Dim rowdtPenjualanTokoPerBarangDailyRow As dtPenjualanTokoPerBarangDailyRow = CType(Me.NewRow,dtPenjualanTokoPerBarangDailyRow)
            Dim columnValuesArray() As Object = New Object() {PT_Date, Item_ID, Item_Name, UoM, Qty, Qty_MinRetur, Amount, Amount_MinRetur}
            rowdtPenjualanTokoPerBarangDailyRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtPenjualanTokoPerBarangDailyRow)
            Return rowdtPenjualanTokoPerBarangDailyRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByItem_ID(ByVal Item_ID As String) As dtPenjualanTokoPerBarangDailyRow
            Return CType(Me.Rows.Find(New Object() {Item_ID}),dtPenjualanTokoPerBarangDailyRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtPenjualanTokoPerBarangDailyDataTable = CType(MyBase.Clone,dtPenjualanTokoPerBarangDailyDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtPenjualanTokoPerBarangDailyDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPT_Date = MyBase.Columns("PT_Date")
            Me.columnItem_ID = MyBase.Columns("Item_ID")
            Me.columnItem_Name = MyBase.Columns("Item_Name")
            Me.columnUoM = MyBase.Columns("UoM")
            Me.columnQty = MyBase.Columns("Qty")
            Me.columnQty_MinRetur = MyBase.Columns("Qty_MinRetur")
            Me.columnAmount = MyBase.Columns("Amount")
            Me.columnAmount_MinRetur = MyBase.Columns("Amount_MinRetur")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPT_Date = New Global.System.Data.DataColumn("PT_Date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPT_Date)
            Me.columnItem_ID = New Global.System.Data.DataColumn("Item_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItem_ID)
            Me.columnItem_Name = New Global.System.Data.DataColumn("Item_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItem_Name)
            Me.columnUoM = New Global.System.Data.DataColumn("UoM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUoM)
            Me.columnQty = New Global.System.Data.DataColumn("Qty", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQty)
            Me.columnQty_MinRetur = New Global.System.Data.DataColumn("Qty_MinRetur", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQty_MinRetur)
            Me.columnAmount = New Global.System.Data.DataColumn("Amount", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAmount)
            Me.columnAmount_MinRetur = New Global.System.Data.DataColumn("Amount_MinRetur", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAmount_MinRetur)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnItem_ID}, true))
            Me.columnPT_Date.AllowDBNull = false
            Me.columnItem_ID.AllowDBNull = false
            Me.columnItem_ID.Unique = true
            Me.columnItem_ID.MaxLength = 10
            Me.columnItem_Name.ReadOnly = true
            Me.columnItem_Name.MaxLength = 100
            Me.columnUoM.MaxLength = 10
            Me.columnQty.ReadOnly = true
            Me.columnQty_MinRetur.ReadOnly = true
            Me.columnAmount.ReadOnly = true
            Me.columnAmount_MinRetur.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtPenjualanTokoPerBarangDailyRow() As dtPenjualanTokoPerBarangDailyRow
            Return CType(Me.NewRow,dtPenjualanTokoPerBarangDailyRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtPenjualanTokoPerBarangDailyRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtPenjualanTokoPerBarangDailyRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtPenjualanTokoPerBarangDailyRowChangedEvent) Is Nothing) Then
                RaiseEvent dtPenjualanTokoPerBarangDailyRowChanged(Me, New dtPenjualanTokoPerBarangDailyRowChangeEvent(CType(e.Row,dtPenjualanTokoPerBarangDailyRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtPenjualanTokoPerBarangDailyRowChangingEvent) Is Nothing) Then
                RaiseEvent dtPenjualanTokoPerBarangDailyRowChanging(Me, New dtPenjualanTokoPerBarangDailyRowChangeEvent(CType(e.Row,dtPenjualanTokoPerBarangDailyRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtPenjualanTokoPerBarangDailyRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtPenjualanTokoPerBarangDailyRowDeleted(Me, New dtPenjualanTokoPerBarangDailyRowChangeEvent(CType(e.Row,dtPenjualanTokoPerBarangDailyRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtPenjualanTokoPerBarangDailyRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtPenjualanTokoPerBarangDailyRowDeleting(Me, New dtPenjualanTokoPerBarangDailyRowChangeEvent(CType(e.Row,dtPenjualanTokoPerBarangDailyRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtPenjualanTokoPerBarangDailyRow(ByVal row As dtPenjualanTokoPerBarangDailyRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsReport = New dsReport
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtPenjualanTokoPerBarangDailyDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtPenjualanTokoPerBarangMonthlyDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPT_Year As Global.System.Data.DataColumn
        
        Private columnPT_Month As Global.System.Data.DataColumn
        
        Private columnItem_ID As Global.System.Data.DataColumn
        
        Private columnItem_Name As Global.System.Data.DataColumn
        
        Private columnUoM As Global.System.Data.DataColumn
        
        Private columnQty As Global.System.Data.DataColumn
        
        Private columnQty_MinRetur As Global.System.Data.DataColumn
        
        Private columnAmount As Global.System.Data.DataColumn
        
        Private columnAmount_MinRetur As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtPenjualanTokoPerBarangMonthly"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PT_YearColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPT_Year
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PT_MonthColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPT_Month
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Item_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItem_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Item_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItem_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UoMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUoM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Qty_MinReturColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQty_MinRetur
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Amount_MinReturColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAmount_MinRetur
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtPenjualanTokoPerBarangMonthlyRow
            Get
                Return CType(Me.Rows(index),dtPenjualanTokoPerBarangMonthlyRow)
            End Get
        End Property
        
        Public Event dtPenjualanTokoPerBarangMonthlyRowChanging As dtPenjualanTokoPerBarangMonthlyRowChangeEventHandler
        
        Public Event dtPenjualanTokoPerBarangMonthlyRowChanged As dtPenjualanTokoPerBarangMonthlyRowChangeEventHandler
        
        Public Event dtPenjualanTokoPerBarangMonthlyRowDeleting As dtPenjualanTokoPerBarangMonthlyRowChangeEventHandler
        
        Public Event dtPenjualanTokoPerBarangMonthlyRowDeleted As dtPenjualanTokoPerBarangMonthlyRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtPenjualanTokoPerBarangMonthlyRow(ByVal row As dtPenjualanTokoPerBarangMonthlyRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtPenjualanTokoPerBarangMonthlyRow(ByVal PT_Year As Integer, ByVal PT_Month As Integer, ByVal Item_ID As String, ByVal Item_Name As String, ByVal UoM As String, ByVal Qty As Integer, ByVal Qty_MinRetur As Integer, ByVal Amount As Decimal, ByVal Amount_MinRetur As Decimal) As dtPenjualanTokoPerBarangMonthlyRow
            Dim rowdtPenjualanTokoPerBarangMonthlyRow As dtPenjualanTokoPerBarangMonthlyRow = CType(Me.NewRow,dtPenjualanTokoPerBarangMonthlyRow)
            Dim columnValuesArray() As Object = New Object() {PT_Year, PT_Month, Item_ID, Item_Name, UoM, Qty, Qty_MinRetur, Amount, Amount_MinRetur}
            rowdtPenjualanTokoPerBarangMonthlyRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtPenjualanTokoPerBarangMonthlyRow)
            Return rowdtPenjualanTokoPerBarangMonthlyRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByItem_ID(ByVal Item_ID As String) As dtPenjualanTokoPerBarangMonthlyRow
            Return CType(Me.Rows.Find(New Object() {Item_ID}),dtPenjualanTokoPerBarangMonthlyRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtPenjualanTokoPerBarangMonthlyDataTable = CType(MyBase.Clone,dtPenjualanTokoPerBarangMonthlyDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtPenjualanTokoPerBarangMonthlyDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPT_Year = MyBase.Columns("PT_Year")
            Me.columnPT_Month = MyBase.Columns("PT_Month")
            Me.columnItem_ID = MyBase.Columns("Item_ID")
            Me.columnItem_Name = MyBase.Columns("Item_Name")
            Me.columnUoM = MyBase.Columns("UoM")
            Me.columnQty = MyBase.Columns("Qty")
            Me.columnQty_MinRetur = MyBase.Columns("Qty_MinRetur")
            Me.columnAmount = MyBase.Columns("Amount")
            Me.columnAmount_MinRetur = MyBase.Columns("Amount_MinRetur")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPT_Year = New Global.System.Data.DataColumn("PT_Year", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPT_Year)
            Me.columnPT_Month = New Global.System.Data.DataColumn("PT_Month", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPT_Month)
            Me.columnItem_ID = New Global.System.Data.DataColumn("Item_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItem_ID)
            Me.columnItem_Name = New Global.System.Data.DataColumn("Item_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItem_Name)
            Me.columnUoM = New Global.System.Data.DataColumn("UoM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUoM)
            Me.columnQty = New Global.System.Data.DataColumn("Qty", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQty)
            Me.columnQty_MinRetur = New Global.System.Data.DataColumn("Qty_MinRetur", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQty_MinRetur)
            Me.columnAmount = New Global.System.Data.DataColumn("Amount", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAmount)
            Me.columnAmount_MinRetur = New Global.System.Data.DataColumn("Amount_MinRetur", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAmount_MinRetur)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnItem_ID}, true))
            Me.columnPT_Year.ReadOnly = true
            Me.columnPT_Month.ReadOnly = true
            Me.columnItem_ID.AllowDBNull = false
            Me.columnItem_ID.Unique = true
            Me.columnItem_ID.MaxLength = 10
            Me.columnItem_Name.ReadOnly = true
            Me.columnItem_Name.MaxLength = 100
            Me.columnUoM.MaxLength = 10
            Me.columnQty.ReadOnly = true
            Me.columnQty_MinRetur.ReadOnly = true
            Me.columnAmount.ReadOnly = true
            Me.columnAmount_MinRetur.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtPenjualanTokoPerBarangMonthlyRow() As dtPenjualanTokoPerBarangMonthlyRow
            Return CType(Me.NewRow,dtPenjualanTokoPerBarangMonthlyRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtPenjualanTokoPerBarangMonthlyRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtPenjualanTokoPerBarangMonthlyRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtPenjualanTokoPerBarangMonthlyRowChangedEvent) Is Nothing) Then
                RaiseEvent dtPenjualanTokoPerBarangMonthlyRowChanged(Me, New dtPenjualanTokoPerBarangMonthlyRowChangeEvent(CType(e.Row,dtPenjualanTokoPerBarangMonthlyRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtPenjualanTokoPerBarangMonthlyRowChangingEvent) Is Nothing) Then
                RaiseEvent dtPenjualanTokoPerBarangMonthlyRowChanging(Me, New dtPenjualanTokoPerBarangMonthlyRowChangeEvent(CType(e.Row,dtPenjualanTokoPerBarangMonthlyRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtPenjualanTokoPerBarangMonthlyRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtPenjualanTokoPerBarangMonthlyRowDeleted(Me, New dtPenjualanTokoPerBarangMonthlyRowChangeEvent(CType(e.Row,dtPenjualanTokoPerBarangMonthlyRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtPenjualanTokoPerBarangMonthlyRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtPenjualanTokoPerBarangMonthlyRowDeleting(Me, New dtPenjualanTokoPerBarangMonthlyRowChangeEvent(CType(e.Row,dtPenjualanTokoPerBarangMonthlyRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtPenjualanTokoPerBarangMonthlyRow(ByVal row As dtPenjualanTokoPerBarangMonthlyRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsReport = New dsReport
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtPenjualanTokoPerBarangMonthlyDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtPenjualanTokoPerCustomerDailyDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPT_Date As Global.System.Data.DataColumn
        
        Private columnCust_ID As Global.System.Data.DataColumn
        
        Private columnNama As Global.System.Data.DataColumn
        
        Private columnItem_ID As Global.System.Data.DataColumn
        
        Private columnItem_Name As Global.System.Data.DataColumn
        
        Private columnUoM As Global.System.Data.DataColumn
        
        Private columnQty As Global.System.Data.DataColumn
        
        Private columnQty_MinRetur As Global.System.Data.DataColumn
        
        Private columnAmount As Global.System.Data.DataColumn
        
        Private columnAmount_MinRetur As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtPenjualanTokoPerCustomerDaily"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PT_DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPT_Date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Cust_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCust_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NamaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNama
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Item_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItem_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Item_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItem_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UoMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUoM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Qty_MinReturColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQty_MinRetur
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Amount_MinReturColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAmount_MinRetur
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtPenjualanTokoPerCustomerDailyRow
            Get
                Return CType(Me.Rows(index),dtPenjualanTokoPerCustomerDailyRow)
            End Get
        End Property
        
        Public Event dtPenjualanTokoPerCustomerDailyRowChanging As dtPenjualanTokoPerCustomerDailyRowChangeEventHandler
        
        Public Event dtPenjualanTokoPerCustomerDailyRowChanged As dtPenjualanTokoPerCustomerDailyRowChangeEventHandler
        
        Public Event dtPenjualanTokoPerCustomerDailyRowDeleting As dtPenjualanTokoPerCustomerDailyRowChangeEventHandler
        
        Public Event dtPenjualanTokoPerCustomerDailyRowDeleted As dtPenjualanTokoPerCustomerDailyRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtPenjualanTokoPerCustomerDailyRow(ByVal row As dtPenjualanTokoPerCustomerDailyRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtPenjualanTokoPerCustomerDailyRow(ByVal PT_Date As Date, ByVal Cust_ID As String, ByVal Nama As String, ByVal Item_ID As String, ByVal Item_Name As String, ByVal UoM As String, ByVal Qty As Integer, ByVal Qty_MinRetur As Integer, ByVal Amount As Decimal, ByVal Amount_MinRetur As Decimal) As dtPenjualanTokoPerCustomerDailyRow
            Dim rowdtPenjualanTokoPerCustomerDailyRow As dtPenjualanTokoPerCustomerDailyRow = CType(Me.NewRow,dtPenjualanTokoPerCustomerDailyRow)
            Dim columnValuesArray() As Object = New Object() {PT_Date, Cust_ID, Nama, Item_ID, Item_Name, UoM, Qty, Qty_MinRetur, Amount, Amount_MinRetur}
            rowdtPenjualanTokoPerCustomerDailyRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtPenjualanTokoPerCustomerDailyRow)
            Return rowdtPenjualanTokoPerCustomerDailyRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByItem_ID(ByVal Item_ID As String) As dtPenjualanTokoPerCustomerDailyRow
            Return CType(Me.Rows.Find(New Object() {Item_ID}),dtPenjualanTokoPerCustomerDailyRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtPenjualanTokoPerCustomerDailyDataTable = CType(MyBase.Clone,dtPenjualanTokoPerCustomerDailyDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtPenjualanTokoPerCustomerDailyDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPT_Date = MyBase.Columns("PT_Date")
            Me.columnCust_ID = MyBase.Columns("Cust_ID")
            Me.columnNama = MyBase.Columns("Nama")
            Me.columnItem_ID = MyBase.Columns("Item_ID")
            Me.columnItem_Name = MyBase.Columns("Item_Name")
            Me.columnUoM = MyBase.Columns("UoM")
            Me.columnQty = MyBase.Columns("Qty")
            Me.columnQty_MinRetur = MyBase.Columns("Qty_MinRetur")
            Me.columnAmount = MyBase.Columns("Amount")
            Me.columnAmount_MinRetur = MyBase.Columns("Amount_MinRetur")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPT_Date = New Global.System.Data.DataColumn("PT_Date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPT_Date)
            Me.columnCust_ID = New Global.System.Data.DataColumn("Cust_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCust_ID)
            Me.columnNama = New Global.System.Data.DataColumn("Nama", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNama)
            Me.columnItem_ID = New Global.System.Data.DataColumn("Item_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItem_ID)
            Me.columnItem_Name = New Global.System.Data.DataColumn("Item_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItem_Name)
            Me.columnUoM = New Global.System.Data.DataColumn("UoM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUoM)
            Me.columnQty = New Global.System.Data.DataColumn("Qty", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQty)
            Me.columnQty_MinRetur = New Global.System.Data.DataColumn("Qty_MinRetur", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQty_MinRetur)
            Me.columnAmount = New Global.System.Data.DataColumn("Amount", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAmount)
            Me.columnAmount_MinRetur = New Global.System.Data.DataColumn("Amount_MinRetur", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAmount_MinRetur)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnItem_ID}, true))
            Me.columnPT_Date.AllowDBNull = false
            Me.columnCust_ID.AllowDBNull = false
            Me.columnCust_ID.MaxLength = 10
            Me.columnNama.MaxLength = 100
            Me.columnItem_ID.AllowDBNull = false
            Me.columnItem_ID.Unique = true
            Me.columnItem_ID.MaxLength = 10
            Me.columnItem_Name.ReadOnly = true
            Me.columnItem_Name.MaxLength = 100
            Me.columnUoM.MaxLength = 10
            Me.columnQty.ReadOnly = true
            Me.columnQty_MinRetur.ReadOnly = true
            Me.columnAmount.ReadOnly = true
            Me.columnAmount_MinRetur.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtPenjualanTokoPerCustomerDailyRow() As dtPenjualanTokoPerCustomerDailyRow
            Return CType(Me.NewRow,dtPenjualanTokoPerCustomerDailyRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtPenjualanTokoPerCustomerDailyRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtPenjualanTokoPerCustomerDailyRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtPenjualanTokoPerCustomerDailyRowChangedEvent) Is Nothing) Then
                RaiseEvent dtPenjualanTokoPerCustomerDailyRowChanged(Me, New dtPenjualanTokoPerCustomerDailyRowChangeEvent(CType(e.Row,dtPenjualanTokoPerCustomerDailyRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtPenjualanTokoPerCustomerDailyRowChangingEvent) Is Nothing) Then
                RaiseEvent dtPenjualanTokoPerCustomerDailyRowChanging(Me, New dtPenjualanTokoPerCustomerDailyRowChangeEvent(CType(e.Row,dtPenjualanTokoPerCustomerDailyRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtPenjualanTokoPerCustomerDailyRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtPenjualanTokoPerCustomerDailyRowDeleted(Me, New dtPenjualanTokoPerCustomerDailyRowChangeEvent(CType(e.Row,dtPenjualanTokoPerCustomerDailyRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtPenjualanTokoPerCustomerDailyRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtPenjualanTokoPerCustomerDailyRowDeleting(Me, New dtPenjualanTokoPerCustomerDailyRowChangeEvent(CType(e.Row,dtPenjualanTokoPerCustomerDailyRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtPenjualanTokoPerCustomerDailyRow(ByVal row As dtPenjualanTokoPerCustomerDailyRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsReport = New dsReport
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtPenjualanTokoPerCustomerDailyDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtPenjualanTokoPerCustomerMonthlyDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPT_Year As Global.System.Data.DataColumn
        
        Private columnPT_Month As Global.System.Data.DataColumn
        
        Private columnCust_ID As Global.System.Data.DataColumn
        
        Private columnNama As Global.System.Data.DataColumn
        
        Private columnItem_ID As Global.System.Data.DataColumn
        
        Private columnItem_Name As Global.System.Data.DataColumn
        
        Private columnUoM As Global.System.Data.DataColumn
        
        Private columnQty As Global.System.Data.DataColumn
        
        Private columnQty_MinRetur As Global.System.Data.DataColumn
        
        Private columnAmount As Global.System.Data.DataColumn
        
        Private columnAmount_MinRetur As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtPenjualanTokoPerCustomerMonthly"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PT_YearColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPT_Year
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PT_MonthColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPT_Month
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Cust_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCust_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NamaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNama
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Item_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItem_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Item_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItem_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UoMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUoM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Qty_MinReturColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQty_MinRetur
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Amount_MinReturColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAmount_MinRetur
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtPenjualanTokoPerCustomerMonthlyRow
            Get
                Return CType(Me.Rows(index),dtPenjualanTokoPerCustomerMonthlyRow)
            End Get
        End Property
        
        Public Event dtPenjualanTokoPerCustomerMonthlyRowChanging As dtPenjualanTokoPerCustomerMonthlyRowChangeEventHandler
        
        Public Event dtPenjualanTokoPerCustomerMonthlyRowChanged As dtPenjualanTokoPerCustomerMonthlyRowChangeEventHandler
        
        Public Event dtPenjualanTokoPerCustomerMonthlyRowDeleting As dtPenjualanTokoPerCustomerMonthlyRowChangeEventHandler
        
        Public Event dtPenjualanTokoPerCustomerMonthlyRowDeleted As dtPenjualanTokoPerCustomerMonthlyRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtPenjualanTokoPerCustomerMonthlyRow(ByVal row As dtPenjualanTokoPerCustomerMonthlyRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtPenjualanTokoPerCustomerMonthlyRow(ByVal PT_Year As Integer, ByVal PT_Month As Integer, ByVal Cust_ID As String, ByVal Nama As String, ByVal Item_ID As String, ByVal Item_Name As String, ByVal UoM As String, ByVal Qty As Integer, ByVal Qty_MinRetur As Integer, ByVal Amount As Decimal, ByVal Amount_MinRetur As Decimal) As dtPenjualanTokoPerCustomerMonthlyRow
            Dim rowdtPenjualanTokoPerCustomerMonthlyRow As dtPenjualanTokoPerCustomerMonthlyRow = CType(Me.NewRow,dtPenjualanTokoPerCustomerMonthlyRow)
            Dim columnValuesArray() As Object = New Object() {PT_Year, PT_Month, Cust_ID, Nama, Item_ID, Item_Name, UoM, Qty, Qty_MinRetur, Amount, Amount_MinRetur}
            rowdtPenjualanTokoPerCustomerMonthlyRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtPenjualanTokoPerCustomerMonthlyRow)
            Return rowdtPenjualanTokoPerCustomerMonthlyRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByItem_ID(ByVal Item_ID As String) As dtPenjualanTokoPerCustomerMonthlyRow
            Return CType(Me.Rows.Find(New Object() {Item_ID}),dtPenjualanTokoPerCustomerMonthlyRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtPenjualanTokoPerCustomerMonthlyDataTable = CType(MyBase.Clone,dtPenjualanTokoPerCustomerMonthlyDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtPenjualanTokoPerCustomerMonthlyDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPT_Year = MyBase.Columns("PT_Year")
            Me.columnPT_Month = MyBase.Columns("PT_Month")
            Me.columnCust_ID = MyBase.Columns("Cust_ID")
            Me.columnNama = MyBase.Columns("Nama")
            Me.columnItem_ID = MyBase.Columns("Item_ID")
            Me.columnItem_Name = MyBase.Columns("Item_Name")
            Me.columnUoM = MyBase.Columns("UoM")
            Me.columnQty = MyBase.Columns("Qty")
            Me.columnQty_MinRetur = MyBase.Columns("Qty_MinRetur")
            Me.columnAmount = MyBase.Columns("Amount")
            Me.columnAmount_MinRetur = MyBase.Columns("Amount_MinRetur")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPT_Year = New Global.System.Data.DataColumn("PT_Year", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPT_Year)
            Me.columnPT_Month = New Global.System.Data.DataColumn("PT_Month", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPT_Month)
            Me.columnCust_ID = New Global.System.Data.DataColumn("Cust_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCust_ID)
            Me.columnNama = New Global.System.Data.DataColumn("Nama", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNama)
            Me.columnItem_ID = New Global.System.Data.DataColumn("Item_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItem_ID)
            Me.columnItem_Name = New Global.System.Data.DataColumn("Item_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItem_Name)
            Me.columnUoM = New Global.System.Data.DataColumn("UoM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUoM)
            Me.columnQty = New Global.System.Data.DataColumn("Qty", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQty)
            Me.columnQty_MinRetur = New Global.System.Data.DataColumn("Qty_MinRetur", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQty_MinRetur)
            Me.columnAmount = New Global.System.Data.DataColumn("Amount", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAmount)
            Me.columnAmount_MinRetur = New Global.System.Data.DataColumn("Amount_MinRetur", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAmount_MinRetur)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnItem_ID}, true))
            Me.columnPT_Year.ReadOnly = true
            Me.columnPT_Month.ReadOnly = true
            Me.columnCust_ID.AllowDBNull = false
            Me.columnCust_ID.MaxLength = 10
            Me.columnNama.MaxLength = 100
            Me.columnItem_ID.AllowDBNull = false
            Me.columnItem_ID.Unique = true
            Me.columnItem_ID.MaxLength = 10
            Me.columnItem_Name.ReadOnly = true
            Me.columnItem_Name.MaxLength = 100
            Me.columnUoM.MaxLength = 10
            Me.columnQty.ReadOnly = true
            Me.columnQty_MinRetur.ReadOnly = true
            Me.columnAmount.ReadOnly = true
            Me.columnAmount_MinRetur.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtPenjualanTokoPerCustomerMonthlyRow() As dtPenjualanTokoPerCustomerMonthlyRow
            Return CType(Me.NewRow,dtPenjualanTokoPerCustomerMonthlyRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtPenjualanTokoPerCustomerMonthlyRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtPenjualanTokoPerCustomerMonthlyRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtPenjualanTokoPerCustomerMonthlyRowChangedEvent) Is Nothing) Then
                RaiseEvent dtPenjualanTokoPerCustomerMonthlyRowChanged(Me, New dtPenjualanTokoPerCustomerMonthlyRowChangeEvent(CType(e.Row,dtPenjualanTokoPerCustomerMonthlyRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtPenjualanTokoPerCustomerMonthlyRowChangingEvent) Is Nothing) Then
                RaiseEvent dtPenjualanTokoPerCustomerMonthlyRowChanging(Me, New dtPenjualanTokoPerCustomerMonthlyRowChangeEvent(CType(e.Row,dtPenjualanTokoPerCustomerMonthlyRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtPenjualanTokoPerCustomerMonthlyRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtPenjualanTokoPerCustomerMonthlyRowDeleted(Me, New dtPenjualanTokoPerCustomerMonthlyRowChangeEvent(CType(e.Row,dtPenjualanTokoPerCustomerMonthlyRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtPenjualanTokoPerCustomerMonthlyRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtPenjualanTokoPerCustomerMonthlyRowDeleting(Me, New dtPenjualanTokoPerCustomerMonthlyRowChangeEvent(CType(e.Row,dtPenjualanTokoPerCustomerMonthlyRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtPenjualanTokoPerCustomerMonthlyRow(ByVal row As dtPenjualanTokoPerCustomerMonthlyRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsReport = New dsReport
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtPenjualanTokoPerCustomerMonthlyDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtPenjualanInstalasiDailyDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnTgl_Faktur As Global.System.Data.DataColumn
        
        Private columnCust_ID As Global.System.Data.DataColumn
        
        Private columnNama As Global.System.Data.DataColumn
        
        Private columnFaktur_Tipe As Global.System.Data.DataColumn
        
        Private columnProject_No As Global.System.Data.DataColumn
        
        Private columnProject_Name As Global.System.Data.DataColumn
        
        Private columnDPP As Global.System.Data.DataColumn
        
        Private columnJumlah_Uang As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtPenjualanInstalasiDaily"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Tgl_FakturColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTgl_Faktur
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Cust_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCust_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NamaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNama
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Faktur_TipeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFaktur_Tipe
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Project_NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProject_No
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Project_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProject_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DPPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDPP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Jumlah_UangColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJumlah_Uang
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtPenjualanInstalasiDailyRow
            Get
                Return CType(Me.Rows(index),dtPenjualanInstalasiDailyRow)
            End Get
        End Property
        
        Public Event dtPenjualanInstalasiDailyRowChanging As dtPenjualanInstalasiDailyRowChangeEventHandler
        
        Public Event dtPenjualanInstalasiDailyRowChanged As dtPenjualanInstalasiDailyRowChangeEventHandler
        
        Public Event dtPenjualanInstalasiDailyRowDeleting As dtPenjualanInstalasiDailyRowChangeEventHandler
        
        Public Event dtPenjualanInstalasiDailyRowDeleted As dtPenjualanInstalasiDailyRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtPenjualanInstalasiDailyRow(ByVal row As dtPenjualanInstalasiDailyRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtPenjualanInstalasiDailyRow(ByVal Tgl_Faktur As Date, ByVal Cust_ID As String, ByVal Nama As String, ByVal Faktur_Tipe As String, ByVal Project_No As String, ByVal Project_Name As String, ByVal DPP As Decimal, ByVal Jumlah_Uang As Decimal) As dtPenjualanInstalasiDailyRow
            Dim rowdtPenjualanInstalasiDailyRow As dtPenjualanInstalasiDailyRow = CType(Me.NewRow,dtPenjualanInstalasiDailyRow)
            Dim columnValuesArray() As Object = New Object() {Tgl_Faktur, Cust_ID, Nama, Faktur_Tipe, Project_No, Project_Name, DPP, Jumlah_Uang}
            rowdtPenjualanInstalasiDailyRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtPenjualanInstalasiDailyRow)
            Return rowdtPenjualanInstalasiDailyRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtPenjualanInstalasiDailyDataTable = CType(MyBase.Clone,dtPenjualanInstalasiDailyDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtPenjualanInstalasiDailyDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnTgl_Faktur = MyBase.Columns("Tgl_Faktur")
            Me.columnCust_ID = MyBase.Columns("Cust_ID")
            Me.columnNama = MyBase.Columns("Nama")
            Me.columnFaktur_Tipe = MyBase.Columns("Faktur_Tipe")
            Me.columnProject_No = MyBase.Columns("Project_No")
            Me.columnProject_Name = MyBase.Columns("Project_Name")
            Me.columnDPP = MyBase.Columns("DPP")
            Me.columnJumlah_Uang = MyBase.Columns("Jumlah_Uang")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnTgl_Faktur = New Global.System.Data.DataColumn("Tgl_Faktur", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTgl_Faktur)
            Me.columnCust_ID = New Global.System.Data.DataColumn("Cust_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCust_ID)
            Me.columnNama = New Global.System.Data.DataColumn("Nama", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNama)
            Me.columnFaktur_Tipe = New Global.System.Data.DataColumn("Faktur_Tipe", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFaktur_Tipe)
            Me.columnProject_No = New Global.System.Data.DataColumn("Project_No", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProject_No)
            Me.columnProject_Name = New Global.System.Data.DataColumn("Project_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProject_Name)
            Me.columnDPP = New Global.System.Data.DataColumn("DPP", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDPP)
            Me.columnJumlah_Uang = New Global.System.Data.DataColumn("Jumlah_Uang", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJumlah_Uang)
            Me.columnTgl_Faktur.AllowDBNull = false
            Me.columnCust_ID.MaxLength = 10
            Me.columnNama.MaxLength = 100
            Me.columnFaktur_Tipe.MaxLength = 20
            Me.columnProject_No.AllowDBNull = false
            Me.columnProject_No.MaxLength = 10
            Me.columnProject_Name.ReadOnly = true
            Me.columnProject_Name.MaxLength = 100
            Me.columnDPP.ReadOnly = true
            Me.columnJumlah_Uang.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtPenjualanInstalasiDailyRow() As dtPenjualanInstalasiDailyRow
            Return CType(Me.NewRow,dtPenjualanInstalasiDailyRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtPenjualanInstalasiDailyRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtPenjualanInstalasiDailyRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtPenjualanInstalasiDailyRowChangedEvent) Is Nothing) Then
                RaiseEvent dtPenjualanInstalasiDailyRowChanged(Me, New dtPenjualanInstalasiDailyRowChangeEvent(CType(e.Row,dtPenjualanInstalasiDailyRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtPenjualanInstalasiDailyRowChangingEvent) Is Nothing) Then
                RaiseEvent dtPenjualanInstalasiDailyRowChanging(Me, New dtPenjualanInstalasiDailyRowChangeEvent(CType(e.Row,dtPenjualanInstalasiDailyRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtPenjualanInstalasiDailyRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtPenjualanInstalasiDailyRowDeleted(Me, New dtPenjualanInstalasiDailyRowChangeEvent(CType(e.Row,dtPenjualanInstalasiDailyRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtPenjualanInstalasiDailyRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtPenjualanInstalasiDailyRowDeleting(Me, New dtPenjualanInstalasiDailyRowChangeEvent(CType(e.Row,dtPenjualanInstalasiDailyRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtPenjualanInstalasiDailyRow(ByVal row As dtPenjualanInstalasiDailyRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsReport = New dsReport
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtPenjualanInstalasiDailyDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtPenjualanInstalasiMonthlyDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFaktur_Year As Global.System.Data.DataColumn
        
        Private columnFaktur_Month As Global.System.Data.DataColumn
        
        Private columnCust_ID As Global.System.Data.DataColumn
        
        Private columnNama As Global.System.Data.DataColumn
        
        Private columnFaktur_Tipe As Global.System.Data.DataColumn
        
        Private columnProject_No As Global.System.Data.DataColumn
        
        Private columnProject_Name As Global.System.Data.DataColumn
        
        Private columnDPP As Global.System.Data.DataColumn
        
        Private columnJumlah_Uang As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtPenjualanInstalasiMonthly"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Faktur_YearColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFaktur_Year
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Faktur_MonthColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFaktur_Month
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Cust_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCust_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NamaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNama
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Faktur_TipeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFaktur_Tipe
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Project_NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProject_No
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Project_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProject_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DPPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDPP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Jumlah_UangColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJumlah_Uang
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtPenjualanInstalasiMonthlyRow
            Get
                Return CType(Me.Rows(index),dtPenjualanInstalasiMonthlyRow)
            End Get
        End Property
        
        Public Event dtPenjualanInstalasiMonthlyRowChanging As dtPenjualanInstalasiMonthlyRowChangeEventHandler
        
        Public Event dtPenjualanInstalasiMonthlyRowChanged As dtPenjualanInstalasiMonthlyRowChangeEventHandler
        
        Public Event dtPenjualanInstalasiMonthlyRowDeleting As dtPenjualanInstalasiMonthlyRowChangeEventHandler
        
        Public Event dtPenjualanInstalasiMonthlyRowDeleted As dtPenjualanInstalasiMonthlyRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtPenjualanInstalasiMonthlyRow(ByVal row As dtPenjualanInstalasiMonthlyRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtPenjualanInstalasiMonthlyRow(ByVal Faktur_Year As Integer, ByVal Faktur_Month As Integer, ByVal Cust_ID As String, ByVal Nama As String, ByVal Faktur_Tipe As String, ByVal Project_No As String, ByVal Project_Name As String, ByVal DPP As Decimal, ByVal Jumlah_Uang As Decimal) As dtPenjualanInstalasiMonthlyRow
            Dim rowdtPenjualanInstalasiMonthlyRow As dtPenjualanInstalasiMonthlyRow = CType(Me.NewRow,dtPenjualanInstalasiMonthlyRow)
            Dim columnValuesArray() As Object = New Object() {Faktur_Year, Faktur_Month, Cust_ID, Nama, Faktur_Tipe, Project_No, Project_Name, DPP, Jumlah_Uang}
            rowdtPenjualanInstalasiMonthlyRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtPenjualanInstalasiMonthlyRow)
            Return rowdtPenjualanInstalasiMonthlyRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtPenjualanInstalasiMonthlyDataTable = CType(MyBase.Clone,dtPenjualanInstalasiMonthlyDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtPenjualanInstalasiMonthlyDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFaktur_Year = MyBase.Columns("Faktur_Year")
            Me.columnFaktur_Month = MyBase.Columns("Faktur_Month")
            Me.columnCust_ID = MyBase.Columns("Cust_ID")
            Me.columnNama = MyBase.Columns("Nama")
            Me.columnFaktur_Tipe = MyBase.Columns("Faktur_Tipe")
            Me.columnProject_No = MyBase.Columns("Project_No")
            Me.columnProject_Name = MyBase.Columns("Project_Name")
            Me.columnDPP = MyBase.Columns("DPP")
            Me.columnJumlah_Uang = MyBase.Columns("Jumlah_Uang")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFaktur_Year = New Global.System.Data.DataColumn("Faktur_Year", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFaktur_Year)
            Me.columnFaktur_Month = New Global.System.Data.DataColumn("Faktur_Month", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFaktur_Month)
            Me.columnCust_ID = New Global.System.Data.DataColumn("Cust_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCust_ID)
            Me.columnNama = New Global.System.Data.DataColumn("Nama", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNama)
            Me.columnFaktur_Tipe = New Global.System.Data.DataColumn("Faktur_Tipe", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFaktur_Tipe)
            Me.columnProject_No = New Global.System.Data.DataColumn("Project_No", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProject_No)
            Me.columnProject_Name = New Global.System.Data.DataColumn("Project_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProject_Name)
            Me.columnDPP = New Global.System.Data.DataColumn("DPP", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDPP)
            Me.columnJumlah_Uang = New Global.System.Data.DataColumn("Jumlah_Uang", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJumlah_Uang)
            Me.columnFaktur_Year.ReadOnly = true
            Me.columnFaktur_Month.ReadOnly = true
            Me.columnCust_ID.MaxLength = 10
            Me.columnNama.MaxLength = 100
            Me.columnFaktur_Tipe.MaxLength = 20
            Me.columnProject_No.AllowDBNull = false
            Me.columnProject_No.MaxLength = 10
            Me.columnProject_Name.ReadOnly = true
            Me.columnProject_Name.MaxLength = 100
            Me.columnDPP.ReadOnly = true
            Me.columnJumlah_Uang.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtPenjualanInstalasiMonthlyRow() As dtPenjualanInstalasiMonthlyRow
            Return CType(Me.NewRow,dtPenjualanInstalasiMonthlyRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtPenjualanInstalasiMonthlyRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtPenjualanInstalasiMonthlyRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtPenjualanInstalasiMonthlyRowChangedEvent) Is Nothing) Then
                RaiseEvent dtPenjualanInstalasiMonthlyRowChanged(Me, New dtPenjualanInstalasiMonthlyRowChangeEvent(CType(e.Row,dtPenjualanInstalasiMonthlyRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtPenjualanInstalasiMonthlyRowChangingEvent) Is Nothing) Then
                RaiseEvent dtPenjualanInstalasiMonthlyRowChanging(Me, New dtPenjualanInstalasiMonthlyRowChangeEvent(CType(e.Row,dtPenjualanInstalasiMonthlyRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtPenjualanInstalasiMonthlyRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtPenjualanInstalasiMonthlyRowDeleted(Me, New dtPenjualanInstalasiMonthlyRowChangeEvent(CType(e.Row,dtPenjualanInstalasiMonthlyRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtPenjualanInstalasiMonthlyRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtPenjualanInstalasiMonthlyRowDeleting(Me, New dtPenjualanInstalasiMonthlyRowChangeEvent(CType(e.Row,dtPenjualanInstalasiMonthlyRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtPenjualanInstalasiMonthlyRow(ByVal row As dtPenjualanInstalasiMonthlyRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsReport = New dsReport
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtPenjualanInstalasiMonthlyDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtReportQuestionnaireRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtReportQuestionnaire As dtReportQuestionnaireDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtReportQuestionnaire = CType(Me.Table,dtReportQuestionnaireDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Quest_ID() As String
            Get
                Return CType(Me(Me.tabledtReportQuestionnaire.Quest_IDColumn),String)
            End Get
            Set
                Me(Me.tabledtReportQuestionnaire.Quest_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Description() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtReportQuestionnaire.DescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Description' in table 'dtReportQuestionnaire' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtReportQuestionnaire.DescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Category() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtReportQuestionnaire.CategoryColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Category' in table 'dtReportQuestionnaire' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtReportQuestionnaire.CategoryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nama() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtReportQuestionnaire.NamaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Nama' in table 'dtReportQuestionnaire' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtReportQuestionnaire.NamaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Contact_Person() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtReportQuestionnaire.Contact_PersonColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Contact_Person' in table 'dtReportQuestionnaire' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tabledtReportQuestionnaire.Contact_PersonColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Respondent_Name() As String
            Get
                Return CType(Me(Me.tabledtReportQuestionnaire.Respondent_NameColumn),String)
            End Get
            Set
                Me(Me.tabledtReportQuestionnaire.Respondent_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Quest_Dt() As Date
            Get
                Return CType(Me(Me.tabledtReportQuestionnaire.Quest_DtColumn),Date)
            End Get
            Set
                Me(Me.tabledtReportQuestionnaire.Quest_DtColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AverageSection1() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtReportQuestionnaire.AverageSection1Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AverageSection1' in table 'dtReportQuestionnaire' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tabledtReportQuestionnaire.AverageSection1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AverageSection2() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtReportQuestionnaire.AverageSection2Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AverageSection2' in table 'dtReportQuestionnaire' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tabledtReportQuestionnaire.AverageSection2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AverageSection3() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtReportQuestionnaire.AverageSection3Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AverageSection3' in table 'dtReportQuestionnaire' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tabledtReportQuestionnaire.AverageSection3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AverageSection4() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtReportQuestionnaire.AverageSection4Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AverageSection4' in table 'dtReportQuestionnaire' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tabledtReportQuestionnaire.AverageSection4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AverageSection5() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtReportQuestionnaire.AverageSection5Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AverageSection5' in table 'dtReportQuestionnaire' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tabledtReportQuestionnaire.AverageSection5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Average() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtReportQuestionnaire.AverageColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Average' in table 'dtReportQuestionnaire' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtReportQuestionnaire.AverageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tabledtReportQuestionnaire.DescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescriptionNull()
            Me(Me.tabledtReportQuestionnaire.DescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCategoryNull() As Boolean
            Return Me.IsNull(Me.tabledtReportQuestionnaire.CategoryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCategoryNull()
            Me(Me.tabledtReportQuestionnaire.CategoryColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNamaNull() As Boolean
            Return Me.IsNull(Me.tabledtReportQuestionnaire.NamaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNamaNull()
            Me(Me.tabledtReportQuestionnaire.NamaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsContact_PersonNull() As Boolean
            Return Me.IsNull(Me.tabledtReportQuestionnaire.Contact_PersonColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetContact_PersonNull()
            Me(Me.tabledtReportQuestionnaire.Contact_PersonColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAverageSection1Null() As Boolean
            Return Me.IsNull(Me.tabledtReportQuestionnaire.AverageSection1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAverageSection1Null()
            Me(Me.tabledtReportQuestionnaire.AverageSection1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAverageSection2Null() As Boolean
            Return Me.IsNull(Me.tabledtReportQuestionnaire.AverageSection2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAverageSection2Null()
            Me(Me.tabledtReportQuestionnaire.AverageSection2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAverageSection3Null() As Boolean
            Return Me.IsNull(Me.tabledtReportQuestionnaire.AverageSection3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAverageSection3Null()
            Me(Me.tabledtReportQuestionnaire.AverageSection3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAverageSection4Null() As Boolean
            Return Me.IsNull(Me.tabledtReportQuestionnaire.AverageSection4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAverageSection4Null()
            Me(Me.tabledtReportQuestionnaire.AverageSection4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAverageSection5Null() As Boolean
            Return Me.IsNull(Me.tabledtReportQuestionnaire.AverageSection5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAverageSection5Null()
            Me(Me.tabledtReportQuestionnaire.AverageSection5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAverageNull() As Boolean
            Return Me.IsNull(Me.tabledtReportQuestionnaire.AverageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAverageNull()
            Me(Me.tabledtReportQuestionnaire.AverageColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtReportOrderPabrikasiRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtReportOrderPabrikasi As dtReportOrderPabrikasiDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtReportOrderPabrikasi = CType(Me.Table,dtReportOrderPabrikasiDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OP_No() As String
            Get
                Return CType(Me(Me.tabledtReportOrderPabrikasi.OP_NoColumn),String)
            End Get
            Set
                Me(Me.tabledtReportOrderPabrikasi.OP_NoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OP_Date() As Date
            Get
                Return CType(Me(Me.tabledtReportOrderPabrikasi.OP_DateColumn),Date)
            End Get
            Set
                Me(Me.tabledtReportOrderPabrikasi.OP_DateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Item_ID() As String
            Get
                Return CType(Me(Me.tabledtReportOrderPabrikasi.Item_IDColumn),String)
            End Get
            Set
                Me(Me.tabledtReportOrderPabrikasi.Item_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Item_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtReportOrderPabrikasi.Item_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Item_Name' in table 'dtReportOrderPabrikasi' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtReportOrderPabrikasi.Item_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Qty() As Integer
            Get
                Return CType(Me(Me.tabledtReportOrderPabrikasi.QtyColumn),Integer)
            End Get
            Set
                Me(Me.tabledtReportOrderPabrikasi.QtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ST_No() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtReportOrderPabrikasi.ST_NoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ST_No' in table 'dtReportOrderPabrikasi' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtReportOrderPabrikasi.ST_NoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ST_Date() As Date
            Get
                Try 
                    Return CType(Me(Me.tabledtReportOrderPabrikasi.ST_DateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ST_Date' in table 'dtReportOrderPabrikasi' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtReportOrderPabrikasi.ST_DateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Qty_Jadi() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledtReportOrderPabrikasi.Qty_JadiColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Qty_Jadi' in table 'dtReportOrderPabrikasi' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtReportOrderPabrikasi.Qty_JadiColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Remarks() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtReportOrderPabrikasi.RemarksColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Remarks' in table 'dtReportOrderPabrikasi' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtReportOrderPabrikasi.RemarksColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItem_NameNull() As Boolean
            Return Me.IsNull(Me.tabledtReportOrderPabrikasi.Item_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItem_NameNull()
            Me(Me.tabledtReportOrderPabrikasi.Item_NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsST_NoNull() As Boolean
            Return Me.IsNull(Me.tabledtReportOrderPabrikasi.ST_NoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetST_NoNull()
            Me(Me.tabledtReportOrderPabrikasi.ST_NoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsST_DateNull() As Boolean
            Return Me.IsNull(Me.tabledtReportOrderPabrikasi.ST_DateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetST_DateNull()
            Me(Me.tabledtReportOrderPabrikasi.ST_DateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQty_JadiNull() As Boolean
            Return Me.IsNull(Me.tabledtReportOrderPabrikasi.Qty_JadiColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQty_JadiNull()
            Me(Me.tabledtReportOrderPabrikasi.Qty_JadiColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRemarksNull() As Boolean
            Return Me.IsNull(Me.tabledtReportOrderPabrikasi.RemarksColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRemarksNull()
            Me(Me.tabledtReportOrderPabrikasi.RemarksColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtRetrieve_Report_ProspekOrderRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtRetrieve_Report_ProspekOrder As dtRetrieve_Report_ProspekOrderDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtRetrieve_Report_ProspekOrder = CType(Me.Table,dtRetrieve_Report_ProspekOrderDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Survey_Date() As Date
            Get
                Return CType(Me(Me.tabledtRetrieve_Report_ProspekOrder.Survey_DateColumn),Date)
            End Get
            Set
                Me(Me.tabledtRetrieve_Report_ProspekOrder.Survey_DateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Survey_No() As String
            Get
                Return CType(Me(Me.tabledtRetrieve_Report_ProspekOrder.Survey_NoColumn),String)
            End Get
            Set
                Me(Me.tabledtRetrieve_Report_ProspekOrder.Survey_NoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nama() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieve_Report_ProspekOrder.NamaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Nama' in table 'dtRetrieve_Report_ProspekOrder' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieve_Report_ProspekOrder.NamaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PHP_Date() As Date
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieve_Report_ProspekOrder.PHP_DateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PHP_Date' in table 'dtRetrieve_Report_ProspekOrder' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieve_Report_ProspekOrder.PHP_DateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PHP_No() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieve_Report_ProspekOrder.PHP_NoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PHP_No' in table 'dtRetrieve_Report_ProspekOrder' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieve_Report_ProspekOrder.PHP_NoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Total_PHP() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieve_Report_ProspekOrder.Total_PHPColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Total_PHP' in table 'dtRetrieve_Report_ProspekOrder' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieve_Report_ProspekOrder.Total_PHPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PHM_Date() As Date
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieve_Report_ProspekOrder.PHM_DateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PHM_Date' in table 'dtRetrieve_Report_ProspekOrder' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieve_Report_ProspekOrder.PHM_DateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PHM_No() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieve_Report_ProspekOrder.PHM_NoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PHM_No' in table 'dtRetrieve_Report_ProspekOrder' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieve_Report_ProspekOrder.PHM_NoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Total_PHM() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieve_Report_ProspekOrder.Total_PHMColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Total_PHM' in table 'dtRetrieve_Report_ProspekOrder' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieve_Report_ProspekOrder.Total_PHMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPK_Date() As Date
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieve_Report_ProspekOrder.SPK_DateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SPK_Date' in table 'dtRetrieve_Report_ProspekOrder' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieve_Report_ProspekOrder.SPK_DateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPK_No() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieve_Report_ProspekOrder.SPK_NoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SPK_No' in table 'dtRetrieve_Report_ProspekOrder' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieve_Report_ProspekOrder.SPK_NoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MoU_No() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieve_Report_ProspekOrder.MoU_NoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MoU_No' in table 'dtRetrieve_Report_ProspekOrder' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieve_Report_ProspekOrder.MoU_NoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nilai_Project() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieve_Report_ProspekOrder.Nilai_ProjectColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Nilai_Project' in table 'dtRetrieve_Report_ProspekOrder' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieve_Report_ProspekOrder.Nilai_ProjectColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MarketingName() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieve_Report_ProspekOrder.MarketingNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MarketingName' in table 'dtRetrieve_Report_ProspekOrder' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieve_Report_ProspekOrder.MarketingNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNamaNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieve_Report_ProspekOrder.NamaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNamaNull()
            Me(Me.tabledtRetrieve_Report_ProspekOrder.NamaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPHP_DateNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieve_Report_ProspekOrder.PHP_DateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPHP_DateNull()
            Me(Me.tabledtRetrieve_Report_ProspekOrder.PHP_DateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPHP_NoNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieve_Report_ProspekOrder.PHP_NoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPHP_NoNull()
            Me(Me.tabledtRetrieve_Report_ProspekOrder.PHP_NoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotal_PHPNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieve_Report_ProspekOrder.Total_PHPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotal_PHPNull()
            Me(Me.tabledtRetrieve_Report_ProspekOrder.Total_PHPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPHM_DateNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieve_Report_ProspekOrder.PHM_DateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPHM_DateNull()
            Me(Me.tabledtRetrieve_Report_ProspekOrder.PHM_DateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPHM_NoNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieve_Report_ProspekOrder.PHM_NoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPHM_NoNull()
            Me(Me.tabledtRetrieve_Report_ProspekOrder.PHM_NoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotal_PHMNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieve_Report_ProspekOrder.Total_PHMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotal_PHMNull()
            Me(Me.tabledtRetrieve_Report_ProspekOrder.Total_PHMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSPK_DateNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieve_Report_ProspekOrder.SPK_DateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSPK_DateNull()
            Me(Me.tabledtRetrieve_Report_ProspekOrder.SPK_DateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSPK_NoNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieve_Report_ProspekOrder.SPK_NoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSPK_NoNull()
            Me(Me.tabledtRetrieve_Report_ProspekOrder.SPK_NoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMoU_NoNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieve_Report_ProspekOrder.MoU_NoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMoU_NoNull()
            Me(Me.tabledtRetrieve_Report_ProspekOrder.MoU_NoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNilai_ProjectNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieve_Report_ProspekOrder.Nilai_ProjectColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNilai_ProjectNull()
            Me(Me.tabledtRetrieve_Report_ProspekOrder.Nilai_ProjectColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMarketingNameNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieve_Report_ProspekOrder.MarketingNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMarketingNameNull()
            Me(Me.tabledtRetrieve_Report_ProspekOrder.MarketingNameColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtManifoldDataRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtManifoldData As dtManifoldDataDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtManifoldData = CType(Me.Table,dtManifoldDataDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Item_ID() As String
            Get
                Return CType(Me(Me.tabledtManifoldData.Item_IDColumn),String)
            End Get
            Set
                Me(Me.tabledtManifoldData.Item_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Item_Name() As String
            Get
                Return CType(Me(Me.tabledtManifoldData.Item_NameColumn),String)
            End Get
            Set
                Me(Me.tabledtManifoldData.Item_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UOM() As String
            Get
                Return CType(Me(Me.tabledtManifoldData.UOMColumn),String)
            End Get
            Set
                Me(Me.tabledtManifoldData.UOMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Item_Size() As Decimal
            Get
                Return CType(Me(Me.tabledtManifoldData.Item_SizeColumn),Decimal)
            End Get
            Set
                Me(Me.tabledtManifoldData.Item_SizeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Item_Type() As String
            Get
                Return CType(Me(Me.tabledtManifoldData.Item_TypeColumn),String)
            End Get
            Set
                Me(Me.tabledtManifoldData.Item_TypeColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtPipeToKitchenRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtPipeToKitchen As dtPipeToKitchenDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtPipeToKitchen = CType(Me.Table,dtPipeToKitchenDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Item_ID() As String
            Get
                Return CType(Me(Me.tabledtPipeToKitchen.Item_IDColumn),String)
            End Get
            Set
                Me(Me.tabledtPipeToKitchen.Item_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Item_Name() As String
            Get
                Return CType(Me(Me.tabledtPipeToKitchen.Item_NameColumn),String)
            End Get
            Set
                Me(Me.tabledtPipeToKitchen.Item_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UOM() As String
            Get
                Return CType(Me(Me.tabledtPipeToKitchen.UOMColumn),String)
            End Get
            Set
                Me(Me.tabledtPipeToKitchen.UOMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Item_Size() As Decimal
            Get
                Return CType(Me(Me.tabledtPipeToKitchen.Item_SizeColumn),Decimal)
            End Get
            Set
                Me(Me.tabledtPipeToKitchen.Item_SizeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Item_Type() As String
            Get
                Return CType(Me(Me.tabledtPipeToKitchen.Item_TypeColumn),String)
            End Get
            Set
                Me(Me.tabledtPipeToKitchen.Item_TypeColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtSupportingMaterialRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtSupportingMaterial As dtSupportingMaterialDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtSupportingMaterial = CType(Me.Table,dtSupportingMaterialDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Item_ID() As String
            Get
                Return CType(Me(Me.tabledtSupportingMaterial.Item_IDColumn),String)
            End Get
            Set
                Me(Me.tabledtSupportingMaterial.Item_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Item_Name() As String
            Get
                Return CType(Me(Me.tabledtSupportingMaterial.Item_NameColumn),String)
            End Get
            Set
                Me(Me.tabledtSupportingMaterial.Item_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UOM() As String
            Get
                Return CType(Me(Me.tabledtSupportingMaterial.UOMColumn),String)
            End Get
            Set
                Me(Me.tabledtSupportingMaterial.UOMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Item_Size() As Decimal
            Get
                Return CType(Me(Me.tabledtSupportingMaterial.Item_SizeColumn),Decimal)
            End Get
            Set
                Me(Me.tabledtSupportingMaterial.Item_SizeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Item_Type() As String
            Get
                Return CType(Me(Me.tabledtSupportingMaterial.Item_TypeColumn),String)
            End Get
            Set
                Me(Me.tabledtSupportingMaterial.Item_TypeColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtTitikApiRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtTitikApi As dtTitikApiDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtTitikApi = CType(Me.Table,dtTitikApiDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Item_ID() As String
            Get
                Return CType(Me(Me.tabledtTitikApi.Item_IDColumn),String)
            End Get
            Set
                Me(Me.tabledtTitikApi.Item_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Item_Name() As String
            Get
                Return CType(Me(Me.tabledtTitikApi.Item_NameColumn),String)
            End Get
            Set
                Me(Me.tabledtTitikApi.Item_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UOM() As String
            Get
                Return CType(Me(Me.tabledtTitikApi.UOMColumn),String)
            End Get
            Set
                Me(Me.tabledtTitikApi.UOMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Item_Size() As Decimal
            Get
                Return CType(Me(Me.tabledtTitikApi.Item_SizeColumn),Decimal)
            End Get
            Set
                Me(Me.tabledtTitikApi.Item_SizeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Item_Type() As String
            Get
                Return CType(Me(Me.tabledtTitikApi.Item_TypeColumn),String)
            End Get
            Set
                Me(Me.tabledtTitikApi.Item_TypeColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Trans_MoURow
        Inherits Global.System.Data.DataRow
        
        Private tableTrans_MoU As Trans_MoUDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTrans_MoU = CType(Me.Table,Trans_MoUDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MoU_ID() As String
            Get
                Return CType(Me(Me.tableTrans_MoU.MoU_IDColumn),String)
            End Get
            Set
                Me(Me.tableTrans_MoU.MoU_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PHM_No() As String
            Get
                Return CType(Me(Me.tableTrans_MoU.PHM_NoColumn),String)
            End Get
            Set
                Me(Me.tableTrans_MoU.PHM_NoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SeqNum() As Integer
            Get
                Return CType(Me(Me.tableTrans_MoU.SeqNumColumn),Integer)
            End Get
            Set
                Me(Me.tableTrans_MoU.SeqNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Mou_Date() As Date
            Get
                Return CType(Me(Me.tableTrans_MoU.Mou_DateColumn),Date)
            End Get
            Set
                Me(Me.tableTrans_MoU.Mou_DateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Contract_date() As Date
            Get
                Return CType(Me(Me.tableTrans_MoU.Contract_dateColumn),Date)
            End Get
            Set
                Me(Me.tableTrans_MoU.Contract_dateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Company() As String
            Get
                Return CType(Me(Me.tableTrans_MoU.CompanyColumn),String)
            End Get
            Set
                Me(Me.tableTrans_MoU.CompanyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pihak1_name() As String
            Get
                Return CType(Me(Me.tableTrans_MoU.Pihak1_nameColumn),String)
            End Get
            Set
                Me(Me.tableTrans_MoU.Pihak1_nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pihak1_Jabatan() As String
            Get
                Return CType(Me(Me.tableTrans_MoU.Pihak1_JabatanColumn),String)
            End Get
            Set
                Me(Me.tableTrans_MoU.Pihak1_JabatanColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pihak1_Company() As String
            Get
                Return CType(Me(Me.tableTrans_MoU.Pihak1_CompanyColumn),String)
            End Get
            Set
                Me(Me.tableTrans_MoU.Pihak1_CompanyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pihak1_Alamat() As String
            Get
                Return CType(Me(Me.tableTrans_MoU.Pihak1_AlamatColumn),String)
            End Get
            Set
                Me(Me.tableTrans_MoU.Pihak1_AlamatColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pihak2_nama() As String
            Get
                Return CType(Me(Me.tableTrans_MoU.Pihak2_namaColumn),String)
            End Get
            Set
                Me(Me.tableTrans_MoU.Pihak2_namaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pihak2_Jabatan() As String
            Get
                Return CType(Me(Me.tableTrans_MoU.Pihak2_JabatanColumn),String)
            End Get
            Set
                Me(Me.tableTrans_MoU.Pihak2_JabatanColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pihak2_Company() As String
            Get
                Return CType(Me(Me.tableTrans_MoU.Pihak2_CompanyColumn),String)
            End Get
            Set
                Me(Me.tableTrans_MoU.Pihak2_CompanyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pihak2_Alamat() As String
            Get
                Return CType(Me(Me.tableTrans_MoU.Pihak2_AlamatColumn),String)
            End Get
            Set
                Me(Me.tableTrans_MoU.Pihak2_AlamatColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pasal11_Pekerjaan() As String
            Get
                Return CType(Me(Me.tableTrans_MoU.Pasal11_PekerjaanColumn),String)
            End Get
            Set
                Me(Me.tableTrans_MoU.Pasal11_PekerjaanColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pasal13_Kerjaan() As String
            Get
                Return CType(Me(Me.tableTrans_MoU.Pasal13_KerjaanColumn),String)
            End Get
            Set
                Me(Me.tableTrans_MoU.Pasal13_KerjaanColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pasal13_meliputi() As String
            Get
                Return CType(Me(Me.tableTrans_MoU.Pasal13_meliputiColumn),String)
            End Get
            Set
                Me(Me.tableTrans_MoU.Pasal13_meliputiColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pasal14_garansi() As String
            Get
                Return CType(Me(Me.tableTrans_MoU.Pasal14_garansiColumn),String)
            End Get
            Set
                Me(Me.tableTrans_MoU.Pasal14_garansiColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pasal41_DP() As Decimal
            Get
                Return CType(Me(Me.tableTrans_MoU.Pasal41_DPColumn),Decimal)
            End Get
            Set
                Me(Me.tableTrans_MoU.Pasal41_DPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pasal51_sebesar() As Decimal
            Get
                Return CType(Me(Me.tableTrans_MoU.Pasal51_sebesarColumn),Decimal)
            End Get
            Set
                Me(Me.tableTrans_MoU.Pasal51_sebesarColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pasal61_wktperngerjaan() As String
            Get
                Return CType(Me(Me.tableTrans_MoU.Pasal61_wktperngerjaanColumn),String)
            End Get
            Set
                Me(Me.tableTrans_MoU.Pasal61_wktperngerjaanColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pasal61_From() As Date
            Get
                Return CType(Me(Me.tableTrans_MoU.Pasal61_FromColumn),Date)
            End Get
            Set
                Me(Me.tableTrans_MoU.Pasal61_FromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pasal61_To() As Date
            Get
                Return CType(Me(Me.tableTrans_MoU.Pasal61_ToColumn),Date)
            End Get
            Set
                Me(Me.tableTrans_MoU.Pasal61_ToColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pasal61_untuk() As String
            Get
                Return CType(Me(Me.tableTrans_MoU.Pasal61_untukColumn),String)
            End Get
            Set
                Me(Me.tableTrans_MoU.Pasal61_untukColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pasal71_hari() As Integer
            Get
                Return CType(Me(Me.tableTrans_MoU.Pasal71_hariColumn),Integer)
            End Get
            Set
                Me(Me.tableTrans_MoU.Pasal71_hariColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Print_Total() As Integer
            Get
                Return CType(Me(Me.tableTrans_MoU.Print_TotalColumn),Integer)
            End Get
            Set
                Me(Me.tableTrans_MoU.Print_TotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Status_ID() As String
            Get
                Return CType(Me(Me.tableTrans_MoU.Status_IDColumn),String)
            End Get
            Set
                Me(Me.tableTrans_MoU.Status_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property id_created() As String
            Get
                Return CType(Me(Me.tableTrans_MoU.id_createdColumn),String)
            End Get
            Set
                Me(Me.tableTrans_MoU.id_createdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dt_created() As Date
            Get
                Return CType(Me(Me.tableTrans_MoU.dt_createdColumn),Date)
            End Get
            Set
                Me(Me.tableTrans_MoU.dt_createdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property id_lastupdated() As String
            Get
                Return CType(Me(Me.tableTrans_MoU.id_lastupdatedColumn),String)
            End Get
            Set
                Me(Me.tableTrans_MoU.id_lastupdatedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dt_lastupdated() As Date
            Get
                Return CType(Me(Me.tableTrans_MoU.dt_lastupdatedColumn),Date)
            End Get
            Set
                Me(Me.tableTrans_MoU.dt_lastupdatedColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_retrieve_DPPbyIDRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_retrieve_DPPbyID As sp_retrieve_DPPbyIDDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_retrieve_DPPbyID = CType(Me.Table,sp_retrieve_DPPbyIDDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DPP_No() As String
            Get
                Return CType(Me(Me.tablesp_retrieve_DPPbyID.DPP_NoColumn),String)
            End Get
            Set
                Me(Me.tablesp_retrieve_DPPbyID.DPP_NoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property faktur_no() As String
            Get
                Return CType(Me(Me.tablesp_retrieve_DPPbyID.faktur_noColumn),String)
            End Get
            Set
                Me(Me.tablesp_retrieve_DPPbyID.faktur_noColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tgl_faktur() As Date
            Get
                Return CType(Me(Me.tablesp_retrieve_DPPbyID.tgl_fakturColumn),Date)
            End Get
            Set
                Me(Me.tablesp_retrieve_DPPbyID.tgl_fakturColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tgl_jatuhtempo() As Date
            Get
                Return CType(Me(Me.tablesp_retrieve_DPPbyID.tgl_jatuhtempoColumn),Date)
            End Get
            Set
                Me(Me.tablesp_retrieve_DPPbyID.tgl_jatuhtempoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property project_no() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_retrieve_DPPbyID.project_noColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'project_no' in table 'sp_retrieve_DPPbyID' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_retrieve_DPPbyID.project_noColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customer_name() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_retrieve_DPPbyID.customer_nameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'customer_name' in table 'sp_retrieve_DPPbyID' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_retrieve_DPPbyID.customer_nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property salesman() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_retrieve_DPPbyID.salesmanColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'salesman' in table 'sp_retrieve_DPPbyID' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_retrieve_DPPbyID.salesmanColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property jumlah_uang() As Decimal
            Get
                Return CType(Me(Me.tablesp_retrieve_DPPbyID.jumlah_uangColumn),Decimal)
            End Get
            Set
                Me(Me.tablesp_retrieve_DPPbyID.jumlah_uangColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property outstanding() As Decimal
            Get
                Return CType(Me(Me.tablesp_retrieve_DPPbyID.outstandingColumn),Decimal)
            End Get
            Set
                Me(Me.tablesp_retrieve_DPPbyID.outstandingColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cust_id() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_retrieve_DPPbyID.cust_idColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'cust_id' in table 'sp_retrieve_DPPbyID' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_retrieve_DPPbyID.cust_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property employee_id() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_retrieve_DPPbyID.employee_idColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'employee_id' in table 'sp_retrieve_DPPbyID' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_retrieve_DPPbyID.employee_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isproject_noNull() As Boolean
            Return Me.IsNull(Me.tablesp_retrieve_DPPbyID.project_noColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setproject_noNull()
            Me(Me.tablesp_retrieve_DPPbyID.project_noColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iscustomer_nameNull() As Boolean
            Return Me.IsNull(Me.tablesp_retrieve_DPPbyID.customer_nameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setcustomer_nameNull()
            Me(Me.tablesp_retrieve_DPPbyID.customer_nameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssalesmanNull() As Boolean
            Return Me.IsNull(Me.tablesp_retrieve_DPPbyID.salesmanColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsalesmanNull()
            Me(Me.tablesp_retrieve_DPPbyID.salesmanColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iscust_idNull() As Boolean
            Return Me.IsNull(Me.tablesp_retrieve_DPPbyID.cust_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setcust_idNull()
            Me(Me.tablesp_retrieve_DPPbyID.cust_idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isemployee_idNull() As Boolean
            Return Me.IsNull(Me.tablesp_retrieve_DPPbyID.employee_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setemployee_idNull()
            Me(Me.tablesp_retrieve_DPPbyID.employee_idColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtInvoicePiutangRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtInvoicePiutang As dtInvoicePiutangDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtInvoicePiutang = CType(Me.Table,dtInvoicePiutangDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Faktur_No() As String
            Get
                Return CType(Me(Me.tabledtInvoicePiutang.Faktur_NoColumn),String)
            End Get
            Set
                Me(Me.tabledtInvoicePiutang.Faktur_NoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tgl_Faktur() As Date
            Get
                Return CType(Me(Me.tabledtInvoicePiutang.Tgl_FakturColumn),Date)
            End Get
            Set
                Me(Me.tabledtInvoicePiutang.Tgl_FakturColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tgl_JatuhTempo() As Date
            Get
                Try 
                    Return CType(Me(Me.tabledtInvoicePiutang.Tgl_JatuhTempoColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Tgl_JatuhTempo' in table 'dtInvoicePiutang' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtInvoicePiutang.Tgl_JatuhTempoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Faktur_Tipe() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtInvoicePiutang.Faktur_TipeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Faktur_Tipe' in table 'dtInvoicePiutang' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtInvoicePiutang.Faktur_TipeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cust_ID() As String
            Get
                Return CType(Me(Me.tabledtInvoicePiutang.Cust_IDColumn),String)
            End Get
            Set
                Me(Me.tabledtInvoicePiutang.Cust_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Employee_ID() As String
            Get
                Return CType(Me(Me.tabledtInvoicePiutang.Employee_IDColumn),String)
            End Get
            Set
                Me(Me.tabledtInvoicePiutang.Employee_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Project_No() As String
            Get
                Return CType(Me(Me.tabledtInvoicePiutang.Project_NoColumn),String)
            End Get
            Set
                Me(Me.tabledtInvoicePiutang.Project_NoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Jumlah_Uang() As Decimal
            Get
                Return CType(Me(Me.tabledtInvoicePiutang.Jumlah_UangColumn),Decimal)
            End Get
            Set
                Me(Me.tabledtInvoicePiutang.Jumlah_UangColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Keterangan() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtInvoicePiutang.KeteranganColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Keterangan' in table 'dtInvoicePiutang' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtInvoicePiutang.KeteranganColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTgl_JatuhTempoNull() As Boolean
            Return Me.IsNull(Me.tabledtInvoicePiutang.Tgl_JatuhTempoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTgl_JatuhTempoNull()
            Me(Me.tabledtInvoicePiutang.Tgl_JatuhTempoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFaktur_TipeNull() As Boolean
            Return Me.IsNull(Me.tabledtInvoicePiutang.Faktur_TipeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFaktur_TipeNull()
            Me(Me.tabledtInvoicePiutang.Faktur_TipeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsKeteranganNull() As Boolean
            Return Me.IsNull(Me.tabledtInvoicePiutang.KeteranganColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetKeteranganNull()
            Me(Me.tabledtInvoicePiutang.KeteranganColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtDaftarPelunasanHutangRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtDaftarPelunasanHutang As dtDaftarPelunasanHutangDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtDaftarPelunasanHutang = CType(Me.Table,dtDaftarPelunasanHutangDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DPH_No() As String
            Get
                Return CType(Me(Me.tabledtDaftarPelunasanHutang.DPH_NoColumn),String)
            End Get
            Set
                Me(Me.tabledtDaftarPelunasanHutang.DPH_NoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Supp_ID() As String
            Get
                Return CType(Me(Me.tabledtDaftarPelunasanHutang.Supp_IDColumn),String)
            End Get
            Set
                Me(Me.tabledtDaftarPelunasanHutang.Supp_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nama() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtDaftarPelunasanHutang.NamaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Nama' in table 'dtDaftarPelunasanHutang' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtDaftarPelunasanHutang.NamaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tgl_Terima_Barang() As Date
            Get
                Return CType(Me(Me.tabledtDaftarPelunasanHutang.Tgl_Terima_BarangColumn),Date)
            End Get
            Set
                Me(Me.tabledtDaftarPelunasanHutang.Tgl_Terima_BarangColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Faktur_no() As String
            Get
                Return CType(Me(Me.tabledtDaftarPelunasanHutang.Faktur_noColumn),String)
            End Get
            Set
                Me(Me.tabledtDaftarPelunasanHutang.Faktur_noColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SuratJalan_no() As String
            Get
                Return CType(Me(Me.tabledtDaftarPelunasanHutang.SuratJalan_noColumn),String)
            End Get
            Set
                Me(Me.tabledtDaftarPelunasanHutang.SuratJalan_noColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property No_BST() As String
            Get
                Return CType(Me(Me.tabledtDaftarPelunasanHutang.No_BSTColumn),String)
            End Get
            Set
                Me(Me.tabledtDaftarPelunasanHutang.No_BSTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Jatuh_Tempo() As Date
            Get
                Return CType(Me(Me.tabledtDaftarPelunasanHutang.Jatuh_TempoColumn),Date)
            End Get
            Set
                Me(Me.tabledtDaftarPelunasanHutang.Jatuh_TempoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Outstanding() As Decimal
            Get
                Return CType(Me(Me.tabledtDaftarPelunasanHutang.OutstandingColumn),Decimal)
            End Get
            Set
                Me(Me.tabledtDaftarPelunasanHutang.OutstandingColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NilaiPO() As Decimal
            Get
                Return CType(Me(Me.tabledtDaftarPelunasanHutang.NilaiPOColumn),Decimal)
            End Get
            Set
                Me(Me.tabledtDaftarPelunasanHutang.NilaiPOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNamaNull() As Boolean
            Return Me.IsNull(Me.tabledtDaftarPelunasanHutang.NamaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNamaNull()
            Me(Me.tabledtDaftarPelunasanHutang.NamaColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtGLDetailRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtGLDetail As dtGLDetailDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtGLDetail = CType(Me.Table,dtGLDetailDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property journalDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tabledtGLDetail.journalDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'journalDate' in table 'dtGLDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtGLDetail.journalDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property accountid() As String
            Get
                Return CType(Me(Me.tabledtGLDetail.accountidColumn),String)
            End Get
            Set
                Me(Me.tabledtGLDetail.accountidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property account_name() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtGLDetail.account_nameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'account_name' in table 'dtGLDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtGLDetail.account_nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property notes() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtGLDetail.notesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'notes' in table 'dtGLDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtGLDetail.notesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property journalID() As String
            Get
                Return CType(Me(Me.tabledtGLDetail.journalIDColumn),String)
            End Get
            Set
                Me(Me.tabledtGLDetail.journalIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property refno() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtGLDetail.refnoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'refno' in table 'dtGLDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtGLDetail.refnoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property saldoawal() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtGLDetail.saldoawalColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'saldoawal' in table 'dtGLDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtGLDetail.saldoawalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property amountDR() As Double
            Get
                Try 
                    Return CType(Me(Me.tabledtGLDetail.amountDRColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'amountDR' in table 'dtGLDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtGLDetail.amountDRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property amountCR() As Double
            Get
                Try 
                    Return CType(Me(Me.tabledtGLDetail.amountCRColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'amountCR' in table 'dtGLDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtGLDetail.amountCRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property saldoakhir() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtGLDetail.saldoakhirColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'saldoakhir' in table 'dtGLDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtGLDetail.saldoakhirColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsjournalDateNull() As Boolean
            Return Me.IsNull(Me.tabledtGLDetail.journalDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetjournalDateNull()
            Me(Me.tabledtGLDetail.journalDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isaccount_nameNull() As Boolean
            Return Me.IsNull(Me.tabledtGLDetail.account_nameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setaccount_nameNull()
            Me(Me.tabledtGLDetail.account_nameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnotesNull() As Boolean
            Return Me.IsNull(Me.tabledtGLDetail.notesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnotesNull()
            Me(Me.tabledtGLDetail.notesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsrefnoNull() As Boolean
            Return Me.IsNull(Me.tabledtGLDetail.refnoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetrefnoNull()
            Me(Me.tabledtGLDetail.refnoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssaldoawalNull() As Boolean
            Return Me.IsNull(Me.tabledtGLDetail.saldoawalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsaldoawalNull()
            Me(Me.tabledtGLDetail.saldoawalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsamountDRNull() As Boolean
            Return Me.IsNull(Me.tabledtGLDetail.amountDRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetamountDRNull()
            Me(Me.tabledtGLDetail.amountDRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsamountCRNull() As Boolean
            Return Me.IsNull(Me.tabledtGLDetail.amountCRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetamountCRNull()
            Me(Me.tabledtGLDetail.amountCRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssaldoakhirNull() As Boolean
            Return Me.IsNull(Me.tabledtGLDetail.saldoakhirColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsaldoakhirNull()
            Me(Me.tabledtGLDetail.saldoakhirColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtReportPORow
        Inherits Global.System.Data.DataRow
        
        Private tabledtReportPO As dtReportPODataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtReportPO = CType(Me.Table,dtReportPODataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PO_Date() As Date
            Get
                Return CType(Me(Me.tabledtReportPO.PO_DateColumn),Date)
            End Get
            Set
                Me(Me.tabledtReportPO.PO_DateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Supplier_ID() As String
            Get
                Return CType(Me(Me.tabledtReportPO.Supplier_IDColumn),String)
            End Get
            Set
                Me(Me.tabledtReportPO.Supplier_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nama() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtReportPO.NamaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Nama' in table 'dtReportPO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtReportPO.NamaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TB_No() As String
            Get
                Return CType(Me(Me.tabledtReportPO.TB_NoColumn),String)
            End Get
            Set
                Me(Me.tabledtReportPO.TB_NoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PO_No() As String
            Get
                Return CType(Me(Me.tabledtReportPO.PO_NoColumn),String)
            End Get
            Set
                Me(Me.tabledtReportPO.PO_NoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TB_Date() As Date
            Get
                Return CType(Me(Me.tabledtReportPO.TB_DateColumn),Date)
            End Get
            Set
                Me(Me.tabledtReportPO.TB_DateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Warehouse_ID() As String
            Get
                Return CType(Me(Me.tabledtReportPO.Warehouse_IDColumn),String)
            End Get
            Set
                Me(Me.tabledtReportPO.Warehouse_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Warehouse_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtReportPO.Warehouse_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Warehouse_Name' in table 'dtReportPO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtReportPO.Warehouse_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Item_ID() As String
            Get
                Return CType(Me(Me.tabledtReportPO.Item_IDColumn),String)
            End Get
            Set
                Me(Me.tabledtReportPO.Item_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Item_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtReportPO.Item_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Item_Name' in table 'dtReportPO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtReportPO.Item_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UoM() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtReportPO.UoMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UoM' in table 'dtReportPO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtReportPO.UoMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Qty_Rec() As Integer
            Get
                Return CType(Me(Me.tabledtReportPO.Qty_RecColumn),Integer)
            End Get
            Set
                Me(Me.tabledtReportPO.Qty_RecColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Price() As Decimal
            Get
                Return CType(Me(Me.tabledtReportPO.PriceColumn),Decimal)
            End Get
            Set
                Me(Me.tabledtReportPO.PriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Diskon() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtReportPO.DiskonColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Diskon' in table 'dtReportPO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtReportPO.DiskonColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubTotal() As Decimal
            Get
                Return CType(Me(Me.tabledtReportPO.SubTotalColumn),Decimal)
            End Get
            Set
                Me(Me.tabledtReportPO.SubTotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNamaNull() As Boolean
            Return Me.IsNull(Me.tabledtReportPO.NamaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNamaNull()
            Me(Me.tabledtReportPO.NamaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWarehouse_NameNull() As Boolean
            Return Me.IsNull(Me.tabledtReportPO.Warehouse_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWarehouse_NameNull()
            Me(Me.tabledtReportPO.Warehouse_NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItem_NameNull() As Boolean
            Return Me.IsNull(Me.tabledtReportPO.Item_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItem_NameNull()
            Me(Me.tabledtReportPO.Item_NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUoMNull() As Boolean
            Return Me.IsNull(Me.tabledtReportPO.UoMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUoMNull()
            Me(Me.tabledtReportPO.UoMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDiskonNull() As Boolean
            Return Me.IsNull(Me.tabledtReportPO.DiskonColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDiskonNull()
            Me(Me.tabledtReportPO.DiskonColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtPembayaranKartuHutangDSRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtPembayaranKartuHutangDS As dtPembayaranKartuHutangDSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtPembayaranKartuHutangDS = CType(Me.Table,dtPembayaranKartuHutangDSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tanggal() As Date
            Get
                Try 
                    Return CType(Me(Me.tabledtPembayaranKartuHutangDS.TanggalColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Tanggal' in table 'dtPembayaranKartuHutangDS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPembayaranKartuHutangDS.TanggalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TB_no() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPembayaranKartuHutangDS.TB_noColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TB_no' in table 'dtPembayaranKartuHutangDS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPembayaranKartuHutangDS.TB_noColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Doc_No() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPembayaranKartuHutangDS.Doc_NoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Doc_No' in table 'dtPembayaranKartuHutangDS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPembayaranKartuHutangDS.Doc_NoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property saldoawal() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPembayaranKartuHutangDS.saldoawalColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'saldoawal' in table 'dtPembayaranKartuHutangDS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPembayaranKartuHutangDS.saldoawalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property jumlah_bayar() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtPembayaranKartuHutangDS.jumlah_bayarColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'jumlah_bayar' in table 'dtPembayaranKartuHutangDS' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPembayaranKartuHutangDS.jumlah_bayarColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property retur() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtPembayaranKartuHutangDS.returColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'retur' in table 'dtPembayaranKartuHutangDS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPembayaranKartuHutangDS.returColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property potongan() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtPembayaranKartuHutangDS.potonganColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'potongan' in table 'dtPembayaranKartuHutangDS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPembayaranKartuHutangDS.potonganColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property saldoakhir() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPembayaranKartuHutangDS.saldoakhirColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'saldoakhir' in table 'dtPembayaranKartuHutangDS' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPembayaranKartuHutangDS.saldoakhirColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property keterangan() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPembayaranKartuHutangDS.keteranganColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'keterangan' in table 'dtPembayaranKartuHutangDS' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPembayaranKartuHutangDS.keteranganColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nama() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPembayaranKartuHutangDS.namaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nama' in table 'dtPembayaranKartuHutangDS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPembayaranKartuHutangDS.namaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTanggalNull() As Boolean
            Return Me.IsNull(Me.tabledtPembayaranKartuHutangDS.TanggalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTanggalNull()
            Me(Me.tabledtPembayaranKartuHutangDS.TanggalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTB_noNull() As Boolean
            Return Me.IsNull(Me.tabledtPembayaranKartuHutangDS.TB_noColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTB_noNull()
            Me(Me.tabledtPembayaranKartuHutangDS.TB_noColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDoc_NoNull() As Boolean
            Return Me.IsNull(Me.tabledtPembayaranKartuHutangDS.Doc_NoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDoc_NoNull()
            Me(Me.tabledtPembayaranKartuHutangDS.Doc_NoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssaldoawalNull() As Boolean
            Return Me.IsNull(Me.tabledtPembayaranKartuHutangDS.saldoawalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsaldoawalNull()
            Me(Me.tabledtPembayaranKartuHutangDS.saldoawalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isjumlah_bayarNull() As Boolean
            Return Me.IsNull(Me.tabledtPembayaranKartuHutangDS.jumlah_bayarColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setjumlah_bayarNull()
            Me(Me.tabledtPembayaranKartuHutangDS.jumlah_bayarColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsreturNull() As Boolean
            Return Me.IsNull(Me.tabledtPembayaranKartuHutangDS.returColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetreturNull()
            Me(Me.tabledtPembayaranKartuHutangDS.returColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspotonganNull() As Boolean
            Return Me.IsNull(Me.tabledtPembayaranKartuHutangDS.potonganColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpotonganNull()
            Me(Me.tabledtPembayaranKartuHutangDS.potonganColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssaldoakhirNull() As Boolean
            Return Me.IsNull(Me.tabledtPembayaranKartuHutangDS.saldoakhirColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsaldoakhirNull()
            Me(Me.tabledtPembayaranKartuHutangDS.saldoakhirColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsketeranganNull() As Boolean
            Return Me.IsNull(Me.tabledtPembayaranKartuHutangDS.keteranganColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetketeranganNull()
            Me(Me.tabledtPembayaranKartuHutangDS.keteranganColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnamaNull() As Boolean
            Return Me.IsNull(Me.tabledtPembayaranKartuHutangDS.namaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnamaNull()
            Me(Me.tabledtPembayaranKartuHutangDS.namaColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtReportOrderMaintenanceRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtReportOrderMaintenance As dtReportOrderMaintenanceDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtReportOrderMaintenance = CType(Me.Table,dtReportOrderMaintenanceDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OrderMaint_No() As String
            Get
                Return CType(Me(Me.tabledtReportOrderMaintenance.OrderMaint_NoColumn),String)
            End Get
            Set
                Me(Me.tabledtReportOrderMaintenance.OrderMaint_NoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OrderMaint_dt() As Date
            Get
                Return CType(Me(Me.tabledtReportOrderMaintenance.OrderMaint_dtColumn),Date)
            End Get
            Set
                Me(Me.tabledtReportOrderMaintenance.OrderMaint_dtColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Customer() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtReportOrderMaintenance.CustomerColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Customer' in table 'dtReportOrderMaintenance' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtReportOrderMaintenance.CustomerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Project_No() As String
            Get
                Return CType(Me(Me.tabledtReportOrderMaintenance.Project_NoColumn),String)
            End Get
            Set
                Me(Me.tabledtReportOrderMaintenance.Project_NoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Location() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtReportOrderMaintenance.LocationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Location' in table 'dtReportOrderMaintenance' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtReportOrderMaintenance.LocationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PIC() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtReportOrderMaintenance.PICColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PIC' in table 'dtReportOrderMaintenance' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtReportOrderMaintenance.PICColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Telepon() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtReportOrderMaintenance.TeleponColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Telepon' in table 'dtReportOrderMaintenance' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtReportOrderMaintenance.TeleponColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Status() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtReportOrderMaintenance.StatusColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Status' in table 'dtReportOrderMaintenance' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtReportOrderMaintenance.StatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustomerNull() As Boolean
            Return Me.IsNull(Me.tabledtReportOrderMaintenance.CustomerColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustomerNull()
            Me(Me.tabledtReportOrderMaintenance.CustomerColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLocationNull() As Boolean
            Return Me.IsNull(Me.tabledtReportOrderMaintenance.LocationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLocationNull()
            Me(Me.tabledtReportOrderMaintenance.LocationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPICNull() As Boolean
            Return Me.IsNull(Me.tabledtReportOrderMaintenance.PICColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPICNull()
            Me(Me.tabledtReportOrderMaintenance.PICColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTeleponNull() As Boolean
            Return Me.IsNull(Me.tabledtReportOrderMaintenance.TeleponColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTeleponNull()
            Me(Me.tabledtReportOrderMaintenance.TeleponColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStatusNull() As Boolean
            Return Me.IsNull(Me.tabledtReportOrderMaintenance.StatusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStatusNull()
            Me(Me.tabledtReportOrderMaintenance.StatusColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtReportBPBRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtReportBPB As dtReportBPBDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtReportBPB = CType(Me.Table,dtReportBPBDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BPB_No() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtReportBPB.BPB_NoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BPB_No' in table 'dtReportBPB' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtReportBPB.BPB_NoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BPB_Date() As Date
            Get
                Try 
                    Return CType(Me(Me.tabledtReportBPB.BPB_DateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BPB_Date' in table 'dtReportBPB' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtReportBPB.BPB_DateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Category() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtReportBPB.CategoryColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Category' in table 'dtReportBPB' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtReportBPB.CategoryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ref_No() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtReportBPB.Ref_NoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Ref_No' in table 'dtReportBPB' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtReportBPB.Ref_NoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Account_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtReportBPB.Account_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Account_ID' in table 'dtReportBPB' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtReportBPB.Account_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Required_Date() As Date
            Get
                Try 
                    Return CType(Me(Me.tabledtReportBPB.Required_DateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Required_Date' in table 'dtReportBPB' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtReportBPB.Required_DateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Status() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtReportBPB.StatusColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Status' in table 'dtReportBPB' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtReportBPB.StatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Item_ID() As String
            Get
                Return CType(Me(Me.tabledtReportBPB.Item_IDColumn),String)
            End Get
            Set
                Me(Me.tabledtReportBPB.Item_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Item_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtReportBPB.Item_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Item_Name' in table 'dtReportBPB' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtReportBPB.Item_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Qty_Required() As Integer
            Get
                Return CType(Me(Me.tabledtReportBPB.Qty_RequiredColumn),Integer)
            End Get
            Set
                Me(Me.tabledtReportBPB.Qty_RequiredColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Qty_Approved() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledtReportBPB.Qty_ApprovedColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Qty_Approved' in table 'dtReportBPB' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtReportBPB.Qty_ApprovedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBPB_NoNull() As Boolean
            Return Me.IsNull(Me.tabledtReportBPB.BPB_NoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBPB_NoNull()
            Me(Me.tabledtReportBPB.BPB_NoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBPB_DateNull() As Boolean
            Return Me.IsNull(Me.tabledtReportBPB.BPB_DateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBPB_DateNull()
            Me(Me.tabledtReportBPB.BPB_DateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCategoryNull() As Boolean
            Return Me.IsNull(Me.tabledtReportBPB.CategoryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCategoryNull()
            Me(Me.tabledtReportBPB.CategoryColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRef_NoNull() As Boolean
            Return Me.IsNull(Me.tabledtReportBPB.Ref_NoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRef_NoNull()
            Me(Me.tabledtReportBPB.Ref_NoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAccount_IDNull() As Boolean
            Return Me.IsNull(Me.tabledtReportBPB.Account_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAccount_IDNull()
            Me(Me.tabledtReportBPB.Account_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRequired_DateNull() As Boolean
            Return Me.IsNull(Me.tabledtReportBPB.Required_DateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRequired_DateNull()
            Me(Me.tabledtReportBPB.Required_DateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStatusNull() As Boolean
            Return Me.IsNull(Me.tabledtReportBPB.StatusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStatusNull()
            Me(Me.tabledtReportBPB.StatusColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItem_NameNull() As Boolean
            Return Me.IsNull(Me.tabledtReportBPB.Item_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItem_NameNull()
            Me(Me.tabledtReportBPB.Item_NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQty_ApprovedNull() As Boolean
            Return Me.IsNull(Me.tabledtReportBPB.Qty_ApprovedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQty_ApprovedNull()
            Me(Me.tabledtReportBPB.Qty_ApprovedColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtRetrieveReportRekapPemakaianBahanPerSPKRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtRetrieveReportRekapPemakaianBahanPerSPK As dtRetrieveReportRekapPemakaianBahanPerSPKDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtRetrieveReportRekapPemakaianBahanPerSPK = CType(Me.Table,dtRetrieveReportRekapPemakaianBahanPerSPKDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Project_No() As String
            Get
                Return CType(Me(Me.tabledtRetrieveReportRekapPemakaianBahanPerSPK.Project_NoColumn),String)
            End Get
            Set
                Me(Me.tabledtRetrieveReportRekapPemakaianBahanPerSPK.Project_NoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPK_No() As String
            Get
                Return CType(Me(Me.tabledtRetrieveReportRekapPemakaianBahanPerSPK.SPK_NoColumn),String)
            End Get
            Set
                Me(Me.tabledtRetrieveReportRekapPemakaianBahanPerSPK.SPK_NoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPK_Date() As Date
            Get
                Return CType(Me(Me.tabledtRetrieveReportRekapPemakaianBahanPerSPK.SPK_DateColumn),Date)
            End Get
            Set
                Me(Me.tabledtRetrieveReportRekapPemakaianBahanPerSPK.SPK_DateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cust_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieveReportRekapPemakaianBahanPerSPK.Cust_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cust_ID' in table 'dtRetrieveReportRekapPemakaianBahanPerSP"& _ 
                            "K' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieveReportRekapPemakaianBahanPerSPK.Cust_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nama() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieveReportRekapPemakaianBahanPerSPK.NamaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Nama' in table 'dtRetrieveReportRekapPemakaianBahanPerSPK' "& _ 
                            "is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieveReportRekapPemakaianBahanPerSPK.NamaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Item_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieveReportRekapPemakaianBahanPerSPK.Item_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Item_ID' in table 'dtRetrieveReportRekapPemakaianBahanPerSP"& _ 
                            "K' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieveReportRekapPemakaianBahanPerSPK.Item_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Item_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieveReportRekapPemakaianBahanPerSPK.Item_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Item_Name' in table 'dtRetrieveReportRekapPemakaianBahanPer"& _ 
                            "SPK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieveReportRekapPemakaianBahanPerSPK.Item_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UOM() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieveReportRekapPemakaianBahanPerSPK.UOMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UOM' in table 'dtRetrieveReportRekapPemakaianBahanPerSPK' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieveReportRekapPemakaianBahanPerSPK.UOMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BPB_Date() As Date
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieveReportRekapPemakaianBahanPerSPK.BPB_DateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BPB_Date' in table 'dtRetrieveReportRekapPemakaianBahanPerS"& _ 
                            "PK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieveReportRekapPemakaianBahanPerSPK.BPB_DateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QtyPHM() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieveReportRekapPemakaianBahanPerSPK.QtyPHMColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QtyPHM' in table 'dtRetrieveReportRekapPemakaianBahanPerSPK"& _ 
                            "' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieveReportRekapPemakaianBahanPerSPK.QtyPHMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Qty_Approved() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieveReportRekapPemakaianBahanPerSPK.Qty_ApprovedColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Qty_Approved' in table 'dtRetrieveReportRekapPemakaianBahan"& _ 
                            "PerSPK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieveReportRekapPemakaianBahanPerSPK.Qty_ApprovedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Qty_Pakai() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieveReportRekapPemakaianBahanPerSPK.Qty_PakaiColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Qty_Pakai' in table 'dtRetrieveReportRekapPemakaianBahanPer"& _ 
                            "SPK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieveReportRekapPemakaianBahanPerSPK.Qty_PakaiColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Project_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieveReportRekapPemakaianBahanPerSPK.Project_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Project_Name' in table 'dtRetrieveReportRekapPemakaianBahan"& _ 
                            "PerSPK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieveReportRekapPemakaianBahanPerSPK.Project_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCust_IDNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieveReportRekapPemakaianBahanPerSPK.Cust_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCust_IDNull()
            Me(Me.tabledtRetrieveReportRekapPemakaianBahanPerSPK.Cust_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNamaNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieveReportRekapPemakaianBahanPerSPK.NamaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNamaNull()
            Me(Me.tabledtRetrieveReportRekapPemakaianBahanPerSPK.NamaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItem_IDNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieveReportRekapPemakaianBahanPerSPK.Item_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItem_IDNull()
            Me(Me.tabledtRetrieveReportRekapPemakaianBahanPerSPK.Item_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItem_NameNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieveReportRekapPemakaianBahanPerSPK.Item_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItem_NameNull()
            Me(Me.tabledtRetrieveReportRekapPemakaianBahanPerSPK.Item_NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUOMNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieveReportRekapPemakaianBahanPerSPK.UOMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUOMNull()
            Me(Me.tabledtRetrieveReportRekapPemakaianBahanPerSPK.UOMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBPB_DateNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieveReportRekapPemakaianBahanPerSPK.BPB_DateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBPB_DateNull()
            Me(Me.tabledtRetrieveReportRekapPemakaianBahanPerSPK.BPB_DateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQtyPHMNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieveReportRekapPemakaianBahanPerSPK.QtyPHMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQtyPHMNull()
            Me(Me.tabledtRetrieveReportRekapPemakaianBahanPerSPK.QtyPHMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQty_ApprovedNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieveReportRekapPemakaianBahanPerSPK.Qty_ApprovedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQty_ApprovedNull()
            Me(Me.tabledtRetrieveReportRekapPemakaianBahanPerSPK.Qty_ApprovedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQty_PakaiNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieveReportRekapPemakaianBahanPerSPK.Qty_PakaiColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQty_PakaiNull()
            Me(Me.tabledtRetrieveReportRekapPemakaianBahanPerSPK.Qty_PakaiColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProject_NameNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieveReportRekapPemakaianBahanPerSPK.Project_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProject_NameNull()
            Me(Me.tabledtRetrieveReportRekapPemakaianBahanPerSPK.Project_NameColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtRetrieveReportRekapPemakaianBahanPerProjectRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtRetrieveReportRekapPemakaianBahanPerProject As dtRetrieveReportRekapPemakaianBahanPerProjectDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtRetrieveReportRekapPemakaianBahanPerProject = CType(Me.Table,dtRetrieveReportRekapPemakaianBahanPerProjectDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Project_No() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieveReportRekapPemakaianBahanPerProject.Project_NoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Project_No' in table 'dtRetrieveReportRekapPemakaianBahanPe"& _ 
                            "rProject' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieveReportRekapPemakaianBahanPerProject.Project_NoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Project_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieveReportRekapPemakaianBahanPerProject.Project_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Project_Name' in table 'dtRetrieveReportRekapPemakaianBahan"& _ 
                            "PerProject' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieveReportRekapPemakaianBahanPerProject.Project_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Project_Date() As Date
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieveReportRekapPemakaianBahanPerProject.Project_DateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Project_Date' in table 'dtRetrieveReportRekapPemakaianBahan"& _ 
                            "PerProject' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieveReportRekapPemakaianBahanPerProject.Project_DateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cust_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieveReportRekapPemakaianBahanPerProject.Cust_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cust_ID' in table 'dtRetrieveReportRekapPemakaianBahanPerPr"& _ 
                            "oject' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieveReportRekapPemakaianBahanPerProject.Cust_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nama() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieveReportRekapPemakaianBahanPerProject.NamaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Nama' in table 'dtRetrieveReportRekapPemakaianBahanPerProje"& _ 
                            "ct' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieveReportRekapPemakaianBahanPerProject.NamaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Item_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieveReportRekapPemakaianBahanPerProject.Item_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Item_ID' in table 'dtRetrieveReportRekapPemakaianBahanPerPr"& _ 
                            "oject' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieveReportRekapPemakaianBahanPerProject.Item_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Item_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieveReportRekapPemakaianBahanPerProject.Item_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Item_Name' in table 'dtRetrieveReportRekapPemakaianBahanPer"& _ 
                            "Project' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieveReportRekapPemakaianBahanPerProject.Item_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UOM() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieveReportRekapPemakaianBahanPerProject.UOMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UOM' in table 'dtRetrieveReportRekapPemakaianBahanPerProjec"& _ 
                            "t' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieveReportRekapPemakaianBahanPerProject.UOMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QtyPHM() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieveReportRekapPemakaianBahanPerProject.QtyPHMColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QtyPHM' in table 'dtRetrieveReportRekapPemakaianBahanPerPro"& _ 
                            "ject' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieveReportRekapPemakaianBahanPerProject.QtyPHMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Qty_Approved() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieveReportRekapPemakaianBahanPerProject.Qty_ApprovedColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Qty_Approved' in table 'dtRetrieveReportRekapPemakaianBahan"& _ 
                            "PerProject' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieveReportRekapPemakaianBahanPerProject.Qty_ApprovedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Qty_Pakai() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieveReportRekapPemakaianBahanPerProject.Qty_PakaiColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Qty_Pakai' in table 'dtRetrieveReportRekapPemakaianBahanPer"& _ 
                            "Project' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieveReportRekapPemakaianBahanPerProject.Qty_PakaiColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProject_NoNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieveReportRekapPemakaianBahanPerProject.Project_NoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProject_NoNull()
            Me(Me.tabledtRetrieveReportRekapPemakaianBahanPerProject.Project_NoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProject_NameNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieveReportRekapPemakaianBahanPerProject.Project_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProject_NameNull()
            Me(Me.tabledtRetrieveReportRekapPemakaianBahanPerProject.Project_NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProject_DateNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieveReportRekapPemakaianBahanPerProject.Project_DateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProject_DateNull()
            Me(Me.tabledtRetrieveReportRekapPemakaianBahanPerProject.Project_DateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCust_IDNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieveReportRekapPemakaianBahanPerProject.Cust_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCust_IDNull()
            Me(Me.tabledtRetrieveReportRekapPemakaianBahanPerProject.Cust_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNamaNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieveReportRekapPemakaianBahanPerProject.NamaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNamaNull()
            Me(Me.tabledtRetrieveReportRekapPemakaianBahanPerProject.NamaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItem_IDNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieveReportRekapPemakaianBahanPerProject.Item_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItem_IDNull()
            Me(Me.tabledtRetrieveReportRekapPemakaianBahanPerProject.Item_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItem_NameNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieveReportRekapPemakaianBahanPerProject.Item_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItem_NameNull()
            Me(Me.tabledtRetrieveReportRekapPemakaianBahanPerProject.Item_NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUOMNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieveReportRekapPemakaianBahanPerProject.UOMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUOMNull()
            Me(Me.tabledtRetrieveReportRekapPemakaianBahanPerProject.UOMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQtyPHMNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieveReportRekapPemakaianBahanPerProject.QtyPHMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQtyPHMNull()
            Me(Me.tabledtRetrieveReportRekapPemakaianBahanPerProject.QtyPHMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQty_ApprovedNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieveReportRekapPemakaianBahanPerProject.Qty_ApprovedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQty_ApprovedNull()
            Me(Me.tabledtRetrieveReportRekapPemakaianBahanPerProject.Qty_ApprovedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQty_PakaiNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieveReportRekapPemakaianBahanPerProject.Qty_PakaiColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQty_PakaiNull()
            Me(Me.tabledtRetrieveReportRekapPemakaianBahanPerProject.Qty_PakaiColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtPOItemByPONoRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtPOItemByPONo As dtPOItemByPONoDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtPOItemByPONo = CType(Me.Table,dtPOItemByPONoDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PO_No() As String
            Get
                Return CType(Me(Me.tabledtPOItemByPONo.PO_NoColumn),String)
            End Get
            Set
                Me(Me.tabledtPOItemByPONo.PO_NoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PR_No() As String
            Get
                Return CType(Me(Me.tabledtPOItemByPONo.PR_NoColumn),String)
            End Get
            Set
                Me(Me.tabledtPOItemByPONo.PR_NoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Item_ID() As String
            Get
                Return CType(Me(Me.tabledtPOItemByPONo.Item_IDColumn),String)
            End Get
            Set
                Me(Me.tabledtPOItemByPONo.Item_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Qty() As Integer
            Get
                Return CType(Me(Me.tabledtPOItemByPONo.QtyColumn),Integer)
            End Get
            Set
                Me(Me.tabledtPOItemByPONo.QtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UoM() As String
            Get
                Return CType(Me(Me.tabledtPOItemByPONo.UoMColumn),String)
            End Get
            Set
                Me(Me.tabledtPOItemByPONo.UoMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Price() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtPOItemByPONo.PriceColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Price' in table 'dtPOItemByPONo' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPOItemByPONo.PriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Diskon() As Decimal
            Get
                Return CType(Me(Me.tabledtPOItemByPONo.DiskonColumn),Decimal)
            End Get
            Set
                Me(Me.tabledtPOItemByPONo.DiskonColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubTotal() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtPOItemByPONo.SubTotalColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SubTotal' in table 'dtPOItemByPONo' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPOItemByPONo.SubTotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Remarks() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPOItemByPONo.RemarksColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Remarks' in table 'dtPOItemByPONo' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPOItemByPONo.RemarksColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PO_Date() As Date
            Get
                Try 
                    Return CType(Me(Me.tabledtPOItemByPONo.PO_DateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PO_Date' in table 'dtPOItemByPONo' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPOItemByPONo.PO_DateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Supplier_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPOItemByPONo.Supplier_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Supplier_ID' in table 'dtPOItemByPONo' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPOItemByPONo.Supplier_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RecGood_Date() As Date
            Get
                Try 
                    Return CType(Me(Me.tabledtPOItemByPONo.RecGood_DateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecGood_Date' in table 'dtPOItemByPONo' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPOItemByPONo.RecGood_DateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Remarks_Hdr() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPOItemByPONo.Remarks_HdrColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Remarks_Hdr' in table 'dtPOItemByPONo' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPOItemByPONo.Remarks_HdrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubTotal_Hdr() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtPOItemByPONo.SubTotal_HdrColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SubTotal_Hdr' in table 'dtPOItemByPONo' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPOItemByPONo.SubTotal_HdrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Grand_Total() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtPOItemByPONo.Grand_TotalColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Grand_Total' in table 'dtPOItemByPONo' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPOItemByPONo.Grand_TotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Status_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPOItemByPONo.Status_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Status_ID' in table 'dtPOItemByPONo' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPOItemByPONo.Status_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Supplier_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPOItemByPONo.Supplier_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Supplier_Name' in table 'dtPOItemByPONo' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPOItemByPONo.Supplier_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Item_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPOItemByPONo.Item_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Item_Name' in table 'dtPOItemByPONo' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPOItemByPONo.Item_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Status_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPOItemByPONo.Status_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Status_Name' in table 'dtPOItemByPONo' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPOItemByPONo.Status_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Uang_Muka() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtPOItemByPONo.Uang_MukaColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Uang_Muka' in table 'dtPOItemByPONo' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPOItemByPONo.Uang_MukaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPriceNull() As Boolean
            Return Me.IsNull(Me.tabledtPOItemByPONo.PriceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPriceNull()
            Me(Me.tabledtPOItemByPONo.PriceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubTotalNull() As Boolean
            Return Me.IsNull(Me.tabledtPOItemByPONo.SubTotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubTotalNull()
            Me(Me.tabledtPOItemByPONo.SubTotalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRemarksNull() As Boolean
            Return Me.IsNull(Me.tabledtPOItemByPONo.RemarksColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRemarksNull()
            Me(Me.tabledtPOItemByPONo.RemarksColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPO_DateNull() As Boolean
            Return Me.IsNull(Me.tabledtPOItemByPONo.PO_DateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPO_DateNull()
            Me(Me.tabledtPOItemByPONo.PO_DateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSupplier_IDNull() As Boolean
            Return Me.IsNull(Me.tabledtPOItemByPONo.Supplier_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSupplier_IDNull()
            Me(Me.tabledtPOItemByPONo.Supplier_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRecGood_DateNull() As Boolean
            Return Me.IsNull(Me.tabledtPOItemByPONo.RecGood_DateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRecGood_DateNull()
            Me(Me.tabledtPOItemByPONo.RecGood_DateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRemarks_HdrNull() As Boolean
            Return Me.IsNull(Me.tabledtPOItemByPONo.Remarks_HdrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRemarks_HdrNull()
            Me(Me.tabledtPOItemByPONo.Remarks_HdrColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubTotal_HdrNull() As Boolean
            Return Me.IsNull(Me.tabledtPOItemByPONo.SubTotal_HdrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubTotal_HdrNull()
            Me(Me.tabledtPOItemByPONo.SubTotal_HdrColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGrand_TotalNull() As Boolean
            Return Me.IsNull(Me.tabledtPOItemByPONo.Grand_TotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGrand_TotalNull()
            Me(Me.tabledtPOItemByPONo.Grand_TotalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStatus_IDNull() As Boolean
            Return Me.IsNull(Me.tabledtPOItemByPONo.Status_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStatus_IDNull()
            Me(Me.tabledtPOItemByPONo.Status_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSupplier_NameNull() As Boolean
            Return Me.IsNull(Me.tabledtPOItemByPONo.Supplier_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSupplier_NameNull()
            Me(Me.tabledtPOItemByPONo.Supplier_NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItem_NameNull() As Boolean
            Return Me.IsNull(Me.tabledtPOItemByPONo.Item_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItem_NameNull()
            Me(Me.tabledtPOItemByPONo.Item_NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStatus_NameNull() As Boolean
            Return Me.IsNull(Me.tabledtPOItemByPONo.Status_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStatus_NameNull()
            Me(Me.tabledtPOItemByPONo.Status_NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUang_MukaNull() As Boolean
            Return Me.IsNull(Me.tabledtPOItemByPONo.Uang_MukaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUang_MukaNull()
            Me(Me.tabledtPOItemByPONo.Uang_MukaColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtPOJasaByPONoRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtPOJasaByPONo As dtPOJasaByPONoDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtPOJasaByPONo = CType(Me.Table,dtPOJasaByPONoDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PO_No() As String
            Get
                Return CType(Me(Me.tabledtPOJasaByPONo.PO_NoColumn),String)
            End Get
            Set
                Me(Me.tabledtPOJasaByPONo.PO_NoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PR_No() As String
            Get
                Return CType(Me(Me.tabledtPOJasaByPONo.PR_NoColumn),String)
            End Get
            Set
                Me(Me.tabledtPOJasaByPONo.PR_NoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Jasa_ID() As String
            Get
                Return CType(Me(Me.tabledtPOJasaByPONo.Jasa_IDColumn),String)
            End Get
            Set
                Me(Me.tabledtPOJasaByPONo.Jasa_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Price() As Decimal
            Get
                Return CType(Me(Me.tabledtPOJasaByPONo.PriceColumn),Decimal)
            End Get
            Set
                Me(Me.tabledtPOJasaByPONo.PriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Remarks() As String
            Get
                Return CType(Me(Me.tabledtPOJasaByPONo.RemarksColumn),String)
            End Get
            Set
                Me(Me.tabledtPOJasaByPONo.RemarksColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PO_Date() As Date
            Get
                Try 
                    Return CType(Me(Me.tabledtPOJasaByPONo.PO_DateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PO_Date' in table 'dtPOJasaByPONo' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPOJasaByPONo.PO_DateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Supplier_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPOJasaByPONo.Supplier_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Supplier_ID' in table 'dtPOJasaByPONo' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPOJasaByPONo.Supplier_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RecGood_Date() As Date
            Get
                Try 
                    Return CType(Me(Me.tabledtPOJasaByPONo.RecGood_DateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecGood_Date' in table 'dtPOJasaByPONo' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPOJasaByPONo.RecGood_DateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Remarks_Hdr() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPOJasaByPONo.Remarks_HdrColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Remarks_Hdr' in table 'dtPOJasaByPONo' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPOJasaByPONo.Remarks_HdrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubTotal_Hdr() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtPOJasaByPONo.SubTotal_HdrColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SubTotal_Hdr' in table 'dtPOJasaByPONo' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPOJasaByPONo.SubTotal_HdrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Grand_Total() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtPOJasaByPONo.Grand_TotalColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Grand_Total' in table 'dtPOJasaByPONo' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPOJasaByPONo.Grand_TotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Status_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPOJasaByPONo.Status_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Status_ID' in table 'dtPOJasaByPONo' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPOJasaByPONo.Status_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Supplier_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPOJasaByPONo.Supplier_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Supplier_Name' in table 'dtPOJasaByPONo' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPOJasaByPONo.Supplier_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Jasa_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPOJasaByPONo.Jasa_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Jasa_Name' in table 'dtPOJasaByPONo' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPOJasaByPONo.Jasa_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Status_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPOJasaByPONo.Status_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Status_Name' in table 'dtPOJasaByPONo' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPOJasaByPONo.Status_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Uang_Muka() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtPOJasaByPONo.Uang_MukaColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Uang_Muka' in table 'dtPOJasaByPONo' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPOJasaByPONo.Uang_MukaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPO_DateNull() As Boolean
            Return Me.IsNull(Me.tabledtPOJasaByPONo.PO_DateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPO_DateNull()
            Me(Me.tabledtPOJasaByPONo.PO_DateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSupplier_IDNull() As Boolean
            Return Me.IsNull(Me.tabledtPOJasaByPONo.Supplier_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSupplier_IDNull()
            Me(Me.tabledtPOJasaByPONo.Supplier_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRecGood_DateNull() As Boolean
            Return Me.IsNull(Me.tabledtPOJasaByPONo.RecGood_DateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRecGood_DateNull()
            Me(Me.tabledtPOJasaByPONo.RecGood_DateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRemarks_HdrNull() As Boolean
            Return Me.IsNull(Me.tabledtPOJasaByPONo.Remarks_HdrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRemarks_HdrNull()
            Me(Me.tabledtPOJasaByPONo.Remarks_HdrColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubTotal_HdrNull() As Boolean
            Return Me.IsNull(Me.tabledtPOJasaByPONo.SubTotal_HdrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubTotal_HdrNull()
            Me(Me.tabledtPOJasaByPONo.SubTotal_HdrColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGrand_TotalNull() As Boolean
            Return Me.IsNull(Me.tabledtPOJasaByPONo.Grand_TotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGrand_TotalNull()
            Me(Me.tabledtPOJasaByPONo.Grand_TotalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStatus_IDNull() As Boolean
            Return Me.IsNull(Me.tabledtPOJasaByPONo.Status_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStatus_IDNull()
            Me(Me.tabledtPOJasaByPONo.Status_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSupplier_NameNull() As Boolean
            Return Me.IsNull(Me.tabledtPOJasaByPONo.Supplier_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSupplier_NameNull()
            Me(Me.tabledtPOJasaByPONo.Supplier_NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJasa_NameNull() As Boolean
            Return Me.IsNull(Me.tabledtPOJasaByPONo.Jasa_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJasa_NameNull()
            Me(Me.tabledtPOJasaByPONo.Jasa_NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStatus_NameNull() As Boolean
            Return Me.IsNull(Me.tabledtPOJasaByPONo.Status_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStatus_NameNull()
            Me(Me.tabledtPOJasaByPONo.Status_NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUang_MukaNull() As Boolean
            Return Me.IsNull(Me.tabledtPOJasaByPONo.Uang_MukaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUang_MukaNull()
            Me(Me.tabledtPOJasaByPONo.Uang_MukaColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtRetrieveReportSPKFormRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtRetrieveReportSPKForm As dtRetrieveReportSPKFormDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtRetrieveReportSPKForm = CType(Me.Table,dtRetrieveReportSPKFormDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPK_Date() As Date
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieveReportSPKForm.SPK_DateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SPK_Date' in table 'dtRetrieveReportSPKForm' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieveReportSPKForm.SPK_DateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPK_No() As String
            Get
                Return CType(Me(Me.tabledtRetrieveReportSPKForm.SPK_NoColumn),String)
            End Get
            Set
                Me(Me.tabledtRetrieveReportSPKForm.SPK_NoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Project_No() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieveReportSPKForm.Project_NoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Project_No' in table 'dtRetrieveReportSPKForm' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieveReportSPKForm.Project_NoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Project_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieveReportSPKForm.Project_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Project_Name' in table 'dtRetrieveReportSPKForm' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieveReportSPKForm.Project_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CustName() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieveReportSPKForm.CustNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CustName' in table 'dtRetrieveReportSPKForm' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieveReportSPKForm.CustNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cust_HP() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieveReportSPKForm.Cust_HPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cust_HP' in table 'dtRetrieveReportSPKForm' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieveReportSPKForm.Cust_HPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Contact_Person() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieveReportSPKForm.Contact_PersonColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Contact_Person' in table 'dtRetrieveReportSPKForm' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieveReportSPKForm.Contact_PersonColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Teknisi_ID() As String
            Get
                Return CType(Me(Me.tabledtRetrieveReportSPKForm.Teknisi_IDColumn),String)
            End Get
            Set
                Me(Me.tabledtRetrieveReportSPKForm.Teknisi_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TeknisiName() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieveReportSPKForm.TeknisiNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TeknisiName' in table 'dtRetrieveReportSPKForm' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieveReportSPKForm.TeknisiNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Jasa_ID() As String
            Get
                Return CType(Me(Me.tabledtRetrieveReportSPKForm.Jasa_IDColumn),String)
            End Get
            Set
                Me(Me.tabledtRetrieveReportSPKForm.Jasa_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Jasa_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieveReportSPKForm.Jasa_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Jasa_Name' in table 'dtRetrieveReportSPKForm' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieveReportSPKForm.Jasa_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Start_Dt() As Date
            Get
                Return CType(Me(Me.tabledtRetrieveReportSPKForm.Start_DtColumn),Date)
            End Get
            Set
                Me(Me.tabledtRetrieveReportSPKForm.Start_DtColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalHour() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieveReportSPKForm.TotalHourColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalHour' in table 'dtRetrieveReportSPKForm' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieveReportSPKForm.TotalHourColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Remarks() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieveReportSPKForm.RemarksColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Remarks' in table 'dtRetrieveReportSPKForm' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieveReportSPKForm.RemarksColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSPK_DateNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieveReportSPKForm.SPK_DateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSPK_DateNull()
            Me(Me.tabledtRetrieveReportSPKForm.SPK_DateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProject_NoNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieveReportSPKForm.Project_NoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProject_NoNull()
            Me(Me.tabledtRetrieveReportSPKForm.Project_NoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProject_NameNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieveReportSPKForm.Project_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProject_NameNull()
            Me(Me.tabledtRetrieveReportSPKForm.Project_NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustNameNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieveReportSPKForm.CustNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustNameNull()
            Me(Me.tabledtRetrieveReportSPKForm.CustNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCust_HPNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieveReportSPKForm.Cust_HPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCust_HPNull()
            Me(Me.tabledtRetrieveReportSPKForm.Cust_HPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsContact_PersonNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieveReportSPKForm.Contact_PersonColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetContact_PersonNull()
            Me(Me.tabledtRetrieveReportSPKForm.Contact_PersonColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTeknisiNameNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieveReportSPKForm.TeknisiNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTeknisiNameNull()
            Me(Me.tabledtRetrieveReportSPKForm.TeknisiNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJasa_NameNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieveReportSPKForm.Jasa_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJasa_NameNull()
            Me(Me.tabledtRetrieveReportSPKForm.Jasa_NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalHourNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieveReportSPKForm.TotalHourColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalHourNull()
            Me(Me.tabledtRetrieveReportSPKForm.TotalHourColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRemarksNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieveReportSPKForm.RemarksColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRemarksNull()
            Me(Me.tabledtRetrieveReportSPKForm.RemarksColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtRetrieveReportProgressProjectPerSPKRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtRetrieveReportProgressProjectPerSPK As dtRetrieveReportProgressProjectPerSPKDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtRetrieveReportProgressProjectPerSPK = CType(Me.Table,dtRetrieveReportProgressProjectPerSPKDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Project_No() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieveReportProgressProjectPerSPK.Project_NoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Project_No' in table 'dtRetrieveReportProgressProjectPerSPK"& _ 
                            "' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieveReportProgressProjectPerSPK.Project_NoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPK_No() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieveReportProgressProjectPerSPK.SPK_NoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SPK_No' in table 'dtRetrieveReportProgressProjectPerSPK' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieveReportProgressProjectPerSPK.SPK_NoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPK_Date() As Date
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieveReportProgressProjectPerSPK.SPK_DateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SPK_Date' in table 'dtRetrieveReportProgressProjectPerSPK' "& _ 
                            "is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieveReportProgressProjectPerSPK.SPK_DateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cust_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieveReportProgressProjectPerSPK.Cust_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cust_ID' in table 'dtRetrieveReportProgressProjectPerSPK' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieveReportProgressProjectPerSPK.Cust_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nama() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieveReportProgressProjectPerSPK.NamaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Nama' in table 'dtRetrieveReportProgressProjectPerSPK' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieveReportProgressProjectPerSPK.NamaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Teknisi_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieveReportProgressProjectPerSPK.Teknisi_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Teknisi_ID' in table 'dtRetrieveReportProgressProjectPerSPK"& _ 
                            "' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieveReportProgressProjectPerSPK.Teknisi_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EmployeeName() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieveReportProgressProjectPerSPK.EmployeeNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EmployeeName' in table 'dtRetrieveReportProgressProjectPerS"& _ 
                            "PK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieveReportProgressProjectPerSPK.EmployeeNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Jasa_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieveReportProgressProjectPerSPK.Jasa_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Jasa_ID' in table 'dtRetrieveReportProgressProjectPerSPK' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieveReportProgressProjectPerSPK.Jasa_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Jasa_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieveReportProgressProjectPerSPK.Jasa_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Jasa_Name' in table 'dtRetrieveReportProgressProjectPerSPK'"& _ 
                            " is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieveReportProgressProjectPerSPK.Jasa_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Start_Dt() As Date
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieveReportProgressProjectPerSPK.Start_DtColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Start_Dt' in table 'dtRetrieveReportProgressProjectPerSPK' "& _ 
                            "is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieveReportProgressProjectPerSPK.Start_DtColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JumlahJamSPK() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieveReportProgressProjectPerSPK.JumlahJamSPKColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JumlahJamSPK' in table 'dtRetrieveReportProgressProjectPerS"& _ 
                            "PK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieveReportProgressProjectPerSPK.JumlahJamSPKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TeknisiID_Log() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieveReportProgressProjectPerSPK.TeknisiID_LogColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TeknisiID_Log' in table 'dtRetrieveReportProgressProjectPer"& _ 
                            "SPK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieveReportProgressProjectPerSPK.TeknisiID_LogColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TeknisiName_Log() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieveReportProgressProjectPerSPK.TeknisiName_LogColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TeknisiName_Log' in table 'dtRetrieveReportProgressProjectP"& _ 
                            "erSPK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieveReportProgressProjectPerSPK.TeknisiName_LogColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LogDt() As Date
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieveReportProgressProjectPerSPK.LogDtColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LogDt' in table 'dtRetrieveReportProgressProjectPerSPK' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieveReportProgressProjectPerSPK.LogDtColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JumlahJamLog() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieveReportProgressProjectPerSPK.JumlahJamLogColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JumlahJamLog' in table 'dtRetrieveReportProgressProjectPerS"& _ 
                            "PK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieveReportProgressProjectPerSPK.JumlahJamLogColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RemarksLog() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieveReportProgressProjectPerSPK.RemarksLogColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RemarksLog' in table 'dtRetrieveReportProgressProjectPerSPK"& _ 
                            "' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieveReportProgressProjectPerSPK.RemarksLogColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RemarksSPKDetail() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieveReportProgressProjectPerSPK.RemarksSPKDetailColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RemarksSPKDetail' in table 'dtRetrieveReportProgressProject"& _ 
                            "PerSPK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieveReportProgressProjectPerSPK.RemarksSPKDetailColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Project_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieveReportProgressProjectPerSPK.Project_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Project_Name' in table 'dtRetrieveReportProgressProjectPerS"& _ 
                            "PK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieveReportProgressProjectPerSPK.Project_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Status_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieveReportProgressProjectPerSPK.Status_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Status_Name' in table 'dtRetrieveReportProgressProjectPerSP"& _ 
                            "K' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieveReportProgressProjectPerSPK.Status_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProject_NoNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieveReportProgressProjectPerSPK.Project_NoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProject_NoNull()
            Me(Me.tabledtRetrieveReportProgressProjectPerSPK.Project_NoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSPK_NoNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieveReportProgressProjectPerSPK.SPK_NoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSPK_NoNull()
            Me(Me.tabledtRetrieveReportProgressProjectPerSPK.SPK_NoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSPK_DateNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieveReportProgressProjectPerSPK.SPK_DateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSPK_DateNull()
            Me(Me.tabledtRetrieveReportProgressProjectPerSPK.SPK_DateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCust_IDNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieveReportProgressProjectPerSPK.Cust_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCust_IDNull()
            Me(Me.tabledtRetrieveReportProgressProjectPerSPK.Cust_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNamaNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieveReportProgressProjectPerSPK.NamaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNamaNull()
            Me(Me.tabledtRetrieveReportProgressProjectPerSPK.NamaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTeknisi_IDNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieveReportProgressProjectPerSPK.Teknisi_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTeknisi_IDNull()
            Me(Me.tabledtRetrieveReportProgressProjectPerSPK.Teknisi_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEmployeeNameNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieveReportProgressProjectPerSPK.EmployeeNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEmployeeNameNull()
            Me(Me.tabledtRetrieveReportProgressProjectPerSPK.EmployeeNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJasa_IDNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieveReportProgressProjectPerSPK.Jasa_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJasa_IDNull()
            Me(Me.tabledtRetrieveReportProgressProjectPerSPK.Jasa_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJasa_NameNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieveReportProgressProjectPerSPK.Jasa_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJasa_NameNull()
            Me(Me.tabledtRetrieveReportProgressProjectPerSPK.Jasa_NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStart_DtNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieveReportProgressProjectPerSPK.Start_DtColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStart_DtNull()
            Me(Me.tabledtRetrieveReportProgressProjectPerSPK.Start_DtColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJumlahJamSPKNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieveReportProgressProjectPerSPK.JumlahJamSPKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJumlahJamSPKNull()
            Me(Me.tabledtRetrieveReportProgressProjectPerSPK.JumlahJamSPKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTeknisiID_LogNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieveReportProgressProjectPerSPK.TeknisiID_LogColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTeknisiID_LogNull()
            Me(Me.tabledtRetrieveReportProgressProjectPerSPK.TeknisiID_LogColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTeknisiName_LogNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieveReportProgressProjectPerSPK.TeknisiName_LogColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTeknisiName_LogNull()
            Me(Me.tabledtRetrieveReportProgressProjectPerSPK.TeknisiName_LogColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLogDtNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieveReportProgressProjectPerSPK.LogDtColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLogDtNull()
            Me(Me.tabledtRetrieveReportProgressProjectPerSPK.LogDtColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJumlahJamLogNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieveReportProgressProjectPerSPK.JumlahJamLogColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJumlahJamLogNull()
            Me(Me.tabledtRetrieveReportProgressProjectPerSPK.JumlahJamLogColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRemarksLogNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieveReportProgressProjectPerSPK.RemarksLogColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRemarksLogNull()
            Me(Me.tabledtRetrieveReportProgressProjectPerSPK.RemarksLogColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRemarksSPKDetailNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieveReportProgressProjectPerSPK.RemarksSPKDetailColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRemarksSPKDetailNull()
            Me(Me.tabledtRetrieveReportProgressProjectPerSPK.RemarksSPKDetailColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProject_NameNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieveReportProgressProjectPerSPK.Project_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProject_NameNull()
            Me(Me.tabledtRetrieveReportProgressProjectPerSPK.Project_NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStatus_NameNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieveReportProgressProjectPerSPK.Status_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStatus_NameNull()
            Me(Me.tabledtRetrieveReportProgressProjectPerSPK.Status_NameColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtRetrieveReportRekapProjectRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtRetrieveReportRekapProject As dtRetrieveReportRekapProjectDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtRetrieveReportRekapProject = CType(Me.Table,dtRetrieveReportRekapProjectDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Project_No() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieveReportRekapProject.Project_NoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Project_No' in table 'dtRetrieveReportRekapProject' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieveReportRekapProject.Project_NoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Project_Date() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieveReportRekapProject.Project_DateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Project_Date' in table 'dtRetrieveReportRekapProject' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieveReportRekapProject.Project_DateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PHM_No() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieveReportRekapProject.PHM_NoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PHM_No' in table 'dtRetrieveReportRekapProject' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieveReportRekapProject.PHM_NoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cust_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieveReportRekapProject.Cust_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cust_ID' in table 'dtRetrieveReportRekapProject' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieveReportRekapProject.Cust_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nama() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieveReportRekapProject.NamaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Nama' in table 'dtRetrieveReportRekapProject' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieveReportRekapProject.NamaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pasal61_From() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieveReportRekapProject.Pasal61_FromColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Pasal61_From' in table 'dtRetrieveReportRekapProject' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieveReportRekapProject.Pasal61_FromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pasal61_To() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieveReportRekapProject.Pasal61_ToColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Pasal61_To' in table 'dtRetrieveReportRekapProject' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieveReportRekapProject.Pasal61_ToColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PB_Date() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieveReportRekapProject.PB_DateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PB_Date' in table 'dtRetrieveReportRekapProject' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieveReportRekapProject.PB_DateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalRencana() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieveReportRekapProject.TotalRencanaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalRencana' in table 'dtRetrieveReportRekapProject' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieveReportRekapProject.TotalRencanaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalRealisasi() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieveReportRekapProject.TotalRealisasiColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalRealisasi' in table 'dtRetrieveReportRekapProject' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieveReportRekapProject.TotalRealisasiColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Project_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieveReportRekapProject.Project_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Project_Name' in table 'dtRetrieveReportRekapProject' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieveReportRekapProject.Project_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Status_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieveReportRekapProject.Status_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Status_Name' in table 'dtRetrieveReportRekapProject' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieveReportRekapProject.Status_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProject_NoNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieveReportRekapProject.Project_NoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProject_NoNull()
            Me(Me.tabledtRetrieveReportRekapProject.Project_NoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProject_DateNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieveReportRekapProject.Project_DateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProject_DateNull()
            Me(Me.tabledtRetrieveReportRekapProject.Project_DateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPHM_NoNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieveReportRekapProject.PHM_NoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPHM_NoNull()
            Me(Me.tabledtRetrieveReportRekapProject.PHM_NoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCust_IDNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieveReportRekapProject.Cust_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCust_IDNull()
            Me(Me.tabledtRetrieveReportRekapProject.Cust_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNamaNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieveReportRekapProject.NamaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNamaNull()
            Me(Me.tabledtRetrieveReportRekapProject.NamaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPasal61_FromNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieveReportRekapProject.Pasal61_FromColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPasal61_FromNull()
            Me(Me.tabledtRetrieveReportRekapProject.Pasal61_FromColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPasal61_ToNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieveReportRekapProject.Pasal61_ToColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPasal61_ToNull()
            Me(Me.tabledtRetrieveReportRekapProject.Pasal61_ToColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPB_DateNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieveReportRekapProject.PB_DateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPB_DateNull()
            Me(Me.tabledtRetrieveReportRekapProject.PB_DateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalRencanaNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieveReportRekapProject.TotalRencanaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalRencanaNull()
            Me(Me.tabledtRetrieveReportRekapProject.TotalRencanaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalRealisasiNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieveReportRekapProject.TotalRealisasiColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalRealisasiNull()
            Me(Me.tabledtRetrieveReportRekapProject.TotalRealisasiColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProject_NameNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieveReportRekapProject.Project_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProject_NameNull()
            Me(Me.tabledtRetrieveReportRekapProject.Project_NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStatus_NameNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieveReportRekapProject.Status_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStatus_NameNull()
            Me(Me.tabledtRetrieveReportRekapProject.Status_NameColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtRetrieveReportRekapProgressProjectPerSPKRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtRetrieveReportRekapProgressProjectPerSPK As dtRetrieveReportRekapProgressProjectPerSPKDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtRetrieveReportRekapProgressProjectPerSPK = CType(Me.Table,dtRetrieveReportRekapProgressProjectPerSPKDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Project_No() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieveReportRekapProgressProjectPerSPK.Project_NoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Project_No' in table 'dtRetrieveReportRekapProgressProjectP"& _ 
                            "erSPK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieveReportRekapProgressProjectPerSPK.Project_NoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPK_No() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieveReportRekapProgressProjectPerSPK.SPK_NoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SPK_No' in table 'dtRetrieveReportRekapProgressProjectPerSP"& _ 
                            "K' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieveReportRekapProgressProjectPerSPK.SPK_NoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPK_Date() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieveReportRekapProgressProjectPerSPK.SPK_DateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SPK_Date' in table 'dtRetrieveReportRekapProgressProjectPer"& _ 
                            "SPK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieveReportRekapProgressProjectPerSPK.SPK_DateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cust_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieveReportRekapProgressProjectPerSPK.Cust_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cust_ID' in table 'dtRetrieveReportRekapProgressProjectPerS"& _ 
                            "PK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieveReportRekapProgressProjectPerSPK.Cust_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nama() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieveReportRekapProgressProjectPerSPK.NamaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Nama' in table 'dtRetrieveReportRekapProgressProjectPerSPK'"& _ 
                            " is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieveReportRekapProgressProjectPerSPK.NamaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Jasa_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieveReportRekapProgressProjectPerSPK.Jasa_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Jasa_ID' in table 'dtRetrieveReportRekapProgressProjectPerS"& _ 
                            "PK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieveReportRekapProgressProjectPerSPK.Jasa_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Jasa_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieveReportRekapProgressProjectPerSPK.Jasa_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Jasa_Name' in table 'dtRetrieveReportRekapProgressProjectPe"& _ 
                            "rSPK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieveReportRekapProgressProjectPerSPK.Jasa_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JumlahJamSPK() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieveReportRekapProgressProjectPerSPK.JumlahJamSPKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JumlahJamSPK' in table 'dtRetrieveReportRekapProgressProjec"& _ 
                            "tPerSPK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieveReportRekapProgressProjectPerSPK.JumlahJamSPKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JumlahJamLog() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieveReportRekapProgressProjectPerSPK.JumlahJamLogColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JumlahJamLog' in table 'dtRetrieveReportRekapProgressProjec"& _ 
                            "tPerSPK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieveReportRekapProgressProjectPerSPK.JumlahJamLogColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Project_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieveReportRekapProgressProjectPerSPK.Project_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Project_Name' in table 'dtRetrieveReportRekapProgressProjec"& _ 
                            "tPerSPK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieveReportRekapProgressProjectPerSPK.Project_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Status_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieveReportRekapProgressProjectPerSPK.Status_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Status_Name' in table 'dtRetrieveReportRekapProgressProject"& _ 
                            "PerSPK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieveReportRekapProgressProjectPerSPK.Status_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProject_NoNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieveReportRekapProgressProjectPerSPK.Project_NoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProject_NoNull()
            Me(Me.tabledtRetrieveReportRekapProgressProjectPerSPK.Project_NoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSPK_NoNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieveReportRekapProgressProjectPerSPK.SPK_NoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSPK_NoNull()
            Me(Me.tabledtRetrieveReportRekapProgressProjectPerSPK.SPK_NoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSPK_DateNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieveReportRekapProgressProjectPerSPK.SPK_DateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSPK_DateNull()
            Me(Me.tabledtRetrieveReportRekapProgressProjectPerSPK.SPK_DateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCust_IDNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieveReportRekapProgressProjectPerSPK.Cust_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCust_IDNull()
            Me(Me.tabledtRetrieveReportRekapProgressProjectPerSPK.Cust_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNamaNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieveReportRekapProgressProjectPerSPK.NamaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNamaNull()
            Me(Me.tabledtRetrieveReportRekapProgressProjectPerSPK.NamaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJasa_IDNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieveReportRekapProgressProjectPerSPK.Jasa_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJasa_IDNull()
            Me(Me.tabledtRetrieveReportRekapProgressProjectPerSPK.Jasa_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJasa_NameNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieveReportRekapProgressProjectPerSPK.Jasa_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJasa_NameNull()
            Me(Me.tabledtRetrieveReportRekapProgressProjectPerSPK.Jasa_NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJumlahJamSPKNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieveReportRekapProgressProjectPerSPK.JumlahJamSPKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJumlahJamSPKNull()
            Me(Me.tabledtRetrieveReportRekapProgressProjectPerSPK.JumlahJamSPKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJumlahJamLogNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieveReportRekapProgressProjectPerSPK.JumlahJamLogColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJumlahJamLogNull()
            Me(Me.tabledtRetrieveReportRekapProgressProjectPerSPK.JumlahJamLogColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProject_NameNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieveReportRekapProgressProjectPerSPK.Project_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProject_NameNull()
            Me(Me.tabledtRetrieveReportRekapProgressProjectPerSPK.Project_NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStatus_NameNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieveReportRekapProgressProjectPerSPK.Status_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStatus_NameNull()
            Me(Me.tabledtRetrieveReportRekapProgressProjectPerSPK.Status_NameColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_getPembelianItemRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_getPembelianItem As sp_getPembelianItemDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_getPembelianItem = CType(Me.Table,sp_getPembelianItemDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PO_Date() As Date
            Get
                Try 
                    Return CType(Me(Me.tablesp_getPembelianItem.PO_DateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PO_Date' in table 'sp_getPembelianItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_getPembelianItem.PO_DateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Supplier_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_getPembelianItem.Supplier_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Supplier_ID' in table 'sp_getPembelianItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_getPembelianItem.Supplier_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nama() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_getPembelianItem.NamaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Nama' in table 'sp_getPembelianItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_getPembelianItem.NamaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TB_No() As String
            Get
                Return CType(Me(Me.tablesp_getPembelianItem.TB_NoColumn),String)
            End Get
            Set
                Me(Me.tablesp_getPembelianItem.TB_NoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PO_No() As String
            Get
                Return CType(Me(Me.tablesp_getPembelianItem.PO_NoColumn),String)
            End Get
            Set
                Me(Me.tablesp_getPembelianItem.PO_NoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TB_Date() As Date
            Get
                Return CType(Me(Me.tablesp_getPembelianItem.TB_DateColumn),Date)
            End Get
            Set
                Me(Me.tablesp_getPembelianItem.TB_DateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Warehouse_name() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_getPembelianItem.Warehouse_nameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Warehouse_name' in table 'sp_getPembelianItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_getPembelianItem.Warehouse_nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property item_id() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_getPembelianItem.item_idColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'item_id' in table 'sp_getPembelianItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_getPembelianItem.item_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property item_name() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_getPembelianItem.item_nameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'item_name' in table 'sp_getPembelianItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_getPembelianItem.item_nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Uom() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_getPembelianItem.UomColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Uom' in table 'sp_getPembelianItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_getPembelianItem.UomColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property qty() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_getPembelianItem.qtyColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'qty' in table 'sp_getPembelianItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_getPembelianItem.qtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property price() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_getPembelianItem.priceColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'price' in table 'sp_getPembelianItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_getPembelianItem.priceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property subtotal() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_getPembelianItem.subtotalColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'subtotal' in table 'sp_getPembelianItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_getPembelianItem.subtotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPO_DateNull() As Boolean
            Return Me.IsNull(Me.tablesp_getPembelianItem.PO_DateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPO_DateNull()
            Me(Me.tablesp_getPembelianItem.PO_DateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSupplier_IDNull() As Boolean
            Return Me.IsNull(Me.tablesp_getPembelianItem.Supplier_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSupplier_IDNull()
            Me(Me.tablesp_getPembelianItem.Supplier_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNamaNull() As Boolean
            Return Me.IsNull(Me.tablesp_getPembelianItem.NamaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNamaNull()
            Me(Me.tablesp_getPembelianItem.NamaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWarehouse_nameNull() As Boolean
            Return Me.IsNull(Me.tablesp_getPembelianItem.Warehouse_nameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWarehouse_nameNull()
            Me(Me.tablesp_getPembelianItem.Warehouse_nameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isitem_idNull() As Boolean
            Return Me.IsNull(Me.tablesp_getPembelianItem.item_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setitem_idNull()
            Me(Me.tablesp_getPembelianItem.item_idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isitem_nameNull() As Boolean
            Return Me.IsNull(Me.tablesp_getPembelianItem.item_nameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setitem_nameNull()
            Me(Me.tablesp_getPembelianItem.item_nameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUomNull() As Boolean
            Return Me.IsNull(Me.tablesp_getPembelianItem.UomColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUomNull()
            Me(Me.tablesp_getPembelianItem.UomColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsqtyNull() As Boolean
            Return Me.IsNull(Me.tablesp_getPembelianItem.qtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetqtyNull()
            Me(Me.tablesp_getPembelianItem.qtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspriceNull() As Boolean
            Return Me.IsNull(Me.tablesp_getPembelianItem.priceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpriceNull()
            Me(Me.tablesp_getPembelianItem.priceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssubtotalNull() As Boolean
            Return Me.IsNull(Me.tablesp_getPembelianItem.subtotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsubtotalNull()
            Me(Me.tablesp_getPembelianItem.subtotalColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtPOPendingBasedOnTerimaBarangRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtPOPendingBasedOnTerimaBarang As dtPOPendingBasedOnTerimaBarangDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtPOPendingBasedOnTerimaBarang = CType(Me.Table,dtPOPendingBasedOnTerimaBarangDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PO_Date() As Date
            Get
                Return CType(Me(Me.tabledtPOPendingBasedOnTerimaBarang.PO_DateColumn),Date)
            End Get
            Set
                Me(Me.tabledtPOPendingBasedOnTerimaBarang.PO_DateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Supplier_ID() As String
            Get
                Return CType(Me(Me.tabledtPOPendingBasedOnTerimaBarang.Supplier_IDColumn),String)
            End Get
            Set
                Me(Me.tabledtPOPendingBasedOnTerimaBarang.Supplier_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nama() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPOPendingBasedOnTerimaBarang.NamaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Nama' in table 'dtPOPendingBasedOnTerimaBarang' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPOPendingBasedOnTerimaBarang.NamaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TB_No() As String
            Get
                Return CType(Me(Me.tabledtPOPendingBasedOnTerimaBarang.TB_NoColumn),String)
            End Get
            Set
                Me(Me.tabledtPOPendingBasedOnTerimaBarang.TB_NoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PO_No() As String
            Get
                Return CType(Me(Me.tabledtPOPendingBasedOnTerimaBarang.PO_NoColumn),String)
            End Get
            Set
                Me(Me.tabledtPOPendingBasedOnTerimaBarang.PO_NoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TB_Date() As Date
            Get
                Return CType(Me(Me.tabledtPOPendingBasedOnTerimaBarang.TB_DateColumn),Date)
            End Get
            Set
                Me(Me.tabledtPOPendingBasedOnTerimaBarang.TB_DateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Warehouse_ID() As String
            Get
                Return CType(Me(Me.tabledtPOPendingBasedOnTerimaBarang.Warehouse_IDColumn),String)
            End Get
            Set
                Me(Me.tabledtPOPendingBasedOnTerimaBarang.Warehouse_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Warehouse_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPOPendingBasedOnTerimaBarang.Warehouse_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Warehouse_Name' in table 'dtPOPendingBasedOnTerimaBarang' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPOPendingBasedOnTerimaBarang.Warehouse_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Item_ID() As String
            Get
                Return CType(Me(Me.tabledtPOPendingBasedOnTerimaBarang.Item_IDColumn),String)
            End Get
            Set
                Me(Me.tabledtPOPendingBasedOnTerimaBarang.Item_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Item_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPOPendingBasedOnTerimaBarang.Item_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Item_Name' in table 'dtPOPendingBasedOnTerimaBarang' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPOPendingBasedOnTerimaBarang.Item_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UoM() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPOPendingBasedOnTerimaBarang.UoMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UoM' in table 'dtPOPendingBasedOnTerimaBarang' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPOPendingBasedOnTerimaBarang.UoMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Qty_Rec() As Integer
            Get
                Return CType(Me(Me.tabledtPOPendingBasedOnTerimaBarang.Qty_RecColumn),Integer)
            End Get
            Set
                Me(Me.tabledtPOPendingBasedOnTerimaBarang.Qty_RecColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Price() As Decimal
            Get
                Return CType(Me(Me.tabledtPOPendingBasedOnTerimaBarang.PriceColumn),Decimal)
            End Get
            Set
                Me(Me.tabledtPOPendingBasedOnTerimaBarang.PriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Diskon() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtPOPendingBasedOnTerimaBarang.DiskonColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Diskon' in table 'dtPOPendingBasedOnTerimaBarang' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPOPendingBasedOnTerimaBarang.DiskonColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubTotal() As Decimal
            Get
                Return CType(Me(Me.tabledtPOPendingBasedOnTerimaBarang.SubTotalColumn),Decimal)
            End Get
            Set
                Me(Me.tabledtPOPendingBasedOnTerimaBarang.SubTotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNamaNull() As Boolean
            Return Me.IsNull(Me.tabledtPOPendingBasedOnTerimaBarang.NamaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNamaNull()
            Me(Me.tabledtPOPendingBasedOnTerimaBarang.NamaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWarehouse_NameNull() As Boolean
            Return Me.IsNull(Me.tabledtPOPendingBasedOnTerimaBarang.Warehouse_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWarehouse_NameNull()
            Me(Me.tabledtPOPendingBasedOnTerimaBarang.Warehouse_NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItem_NameNull() As Boolean
            Return Me.IsNull(Me.tabledtPOPendingBasedOnTerimaBarang.Item_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItem_NameNull()
            Me(Me.tabledtPOPendingBasedOnTerimaBarang.Item_NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUoMNull() As Boolean
            Return Me.IsNull(Me.tabledtPOPendingBasedOnTerimaBarang.UoMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUoMNull()
            Me(Me.tabledtPOPendingBasedOnTerimaBarang.UoMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDiskonNull() As Boolean
            Return Me.IsNull(Me.tabledtPOPendingBasedOnTerimaBarang.DiskonColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDiskonNull()
            Me(Me.tabledtPOPendingBasedOnTerimaBarang.DiskonColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_GetCustomerReceivableAgingRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_GetCustomerReceivableAging As sp_GetCustomerReceivableAgingDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_GetCustomerReceivableAging = CType(Me.Table,sp_GetCustomerReceivableAgingDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cust_id() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_GetCustomerReceivableAging.cust_idColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'cust_id' in table 'sp_GetCustomerReceivableAging' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_GetCustomerReceivableAging.cust_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nama() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_GetCustomerReceivableAging.namaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nama' in table 'sp_GetCustomerReceivableAging' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_GetCustomerReceivableAging.namaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property saldo_awal() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_GetCustomerReceivableAging.saldo_awalColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'saldo_awal' in table 'sp_GetCustomerReceivableAging' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_GetCustomerReceivableAging.saldo_awalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nilai_project() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_GetCustomerReceivableAging.nilai_projectColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nilai_project' in table 'sp_GetCustomerReceivableAging' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_GetCustomerReceivableAging.nilai_projectColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property penjualan() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_GetCustomerReceivableAging.penjualanColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'penjualan' in table 'sp_GetCustomerReceivableAging' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_GetCustomerReceivableAging.penjualanColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property total_invoice() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_GetCustomerReceivableAging.total_invoiceColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'total_invoice' in table 'sp_GetCustomerReceivableAging' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_GetCustomerReceivableAging.total_invoiceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property invoice_terbayarkan() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_GetCustomerReceivableAging.invoice_terbayarkanColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'invoice_terbayarkan' in table 'sp_GetCustomerReceivableAgin"& _ 
                            "g' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_GetCustomerReceivableAging.invoice_terbayarkanColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property potongan() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_GetCustomerReceivableAging.potonganColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'potongan' in table 'sp_GetCustomerReceivableAging' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_GetCustomerReceivableAging.potonganColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sisa_invoice() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_GetCustomerReceivableAging.sisa_invoiceColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'sisa_invoice' in table 'sp_GetCustomerReceivableAging' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_GetCustomerReceivableAging.sisa_invoiceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _0_30() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_GetCustomerReceivableAging._0_30Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column '0-30' in table 'sp_GetCustomerReceivableAging' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_GetCustomerReceivableAging._0_30Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _30_60() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_GetCustomerReceivableAging._30_60Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column '30-60' in table 'sp_GetCustomerReceivableAging' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_GetCustomerReceivableAging._30_60Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property __60() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesp_GetCustomerReceivableAging.__60Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column '>60' in table 'sp_GetCustomerReceivableAging' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_GetCustomerReceivableAging.__60Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iscust_idNull() As Boolean
            Return Me.IsNull(Me.tablesp_GetCustomerReceivableAging.cust_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setcust_idNull()
            Me(Me.tablesp_GetCustomerReceivableAging.cust_idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnamaNull() As Boolean
            Return Me.IsNull(Me.tablesp_GetCustomerReceivableAging.namaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnamaNull()
            Me(Me.tablesp_GetCustomerReceivableAging.namaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Issaldo_awalNull() As Boolean
            Return Me.IsNull(Me.tablesp_GetCustomerReceivableAging.saldo_awalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setsaldo_awalNull()
            Me(Me.tablesp_GetCustomerReceivableAging.saldo_awalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isnilai_projectNull() As Boolean
            Return Me.IsNull(Me.tablesp_GetCustomerReceivableAging.nilai_projectColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setnilai_projectNull()
            Me(Me.tablesp_GetCustomerReceivableAging.nilai_projectColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspenjualanNull() As Boolean
            Return Me.IsNull(Me.tablesp_GetCustomerReceivableAging.penjualanColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpenjualanNull()
            Me(Me.tablesp_GetCustomerReceivableAging.penjualanColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Istotal_invoiceNull() As Boolean
            Return Me.IsNull(Me.tablesp_GetCustomerReceivableAging.total_invoiceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Settotal_invoiceNull()
            Me(Me.tablesp_GetCustomerReceivableAging.total_invoiceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isinvoice_terbayarkanNull() As Boolean
            Return Me.IsNull(Me.tablesp_GetCustomerReceivableAging.invoice_terbayarkanColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setinvoice_terbayarkanNull()
            Me(Me.tablesp_GetCustomerReceivableAging.invoice_terbayarkanColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspotonganNull() As Boolean
            Return Me.IsNull(Me.tablesp_GetCustomerReceivableAging.potonganColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpotonganNull()
            Me(Me.tablesp_GetCustomerReceivableAging.potonganColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Issisa_invoiceNull() As Boolean
            Return Me.IsNull(Me.tablesp_GetCustomerReceivableAging.sisa_invoiceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setsisa_invoiceNull()
            Me(Me.tablesp_GetCustomerReceivableAging.sisa_invoiceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_0_30Null() As Boolean
            Return Me.IsNull(Me.tablesp_GetCustomerReceivableAging._0_30Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_0_30Null()
            Me(Me.tablesp_GetCustomerReceivableAging._0_30Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_30_60Null() As Boolean
            Return Me.IsNull(Me.tablesp_GetCustomerReceivableAging._30_60Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_30_60Null()
            Me(Me.tablesp_GetCustomerReceivableAging._30_60Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is__60Null() As Boolean
            Return Me.IsNull(Me.tablesp_GetCustomerReceivableAging.__60Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set__60Null()
            Me(Me.tablesp_GetCustomerReceivableAging.__60Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtRetrieveReportFormPenawaranMarketingHdrRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtRetrieveReportFormPenawaranMarketingHdr As dtRetrieveReportFormPenawaranMarketingHdrDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtRetrieveReportFormPenawaranMarketingHdr = CType(Me.Table,dtRetrieveReportFormPenawaranMarketingHdrDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PHM_No() As String
            Get
                Return CType(Me(Me.tabledtRetrieveReportFormPenawaranMarketingHdr.PHM_NoColumn),String)
            End Get
            Set
                Me(Me.tabledtRetrieveReportFormPenawaranMarketingHdr.PHM_NoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PHM_Date() As Date
            Get
                Return CType(Me(Me.tabledtRetrieveReportFormPenawaranMarketingHdr.PHM_DateColumn),Date)
            End Get
            Set
                Me(Me.tabledtRetrieveReportFormPenawaranMarketingHdr.PHM_DateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CustName() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieveReportFormPenawaranMarketingHdr.CustNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CustName' in table 'dtRetrieveReportFormPenawaranMarketingH"& _ 
                            "dr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieveReportFormPenawaranMarketingHdr.CustNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MICE_Main() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieveReportFormPenawaranMarketingHdr.MICE_MainColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MICE_Main' in table 'dtRetrieveReportFormPenawaranMarketing"& _ 
                            "Hdr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieveReportFormPenawaranMarketingHdr.MICE_MainColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MarkUp_Pct() As Decimal
            Get
                Return CType(Me(Me.tabledtRetrieveReportFormPenawaranMarketingHdr.MarkUp_PctColumn),Decimal)
            End Get
            Set
                Me(Me.tabledtRetrieveReportFormPenawaranMarketingHdr.MarkUp_PctColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MICE_Supporting() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieveReportFormPenawaranMarketingHdr.MICE_SupportingColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MICE_Supporting' in table 'dtRetrieveReportFormPenawaranMar"& _ 
                            "ketingHdr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieveReportFormPenawaranMarketingHdr.MICE_SupportingColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalJasa() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieveReportFormPenawaranMarketingHdr.TotalJasaColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalJasa' in table 'dtRetrieveReportFormPenawaranMarketing"& _ 
                            "Hdr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieveReportFormPenawaranMarketingHdr.TotalJasaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AdminQC_Amt() As Decimal
            Get
                Return CType(Me(Me.tabledtRetrieveReportFormPenawaranMarketingHdr.AdminQC_AmtColumn),Decimal)
            End Get
            Set
                Me(Me.tabledtRetrieveReportFormPenawaranMarketingHdr.AdminQC_AmtColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Remarks() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieveReportFormPenawaranMarketingHdr.RemarksColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Remarks' in table 'dtRetrieveReportFormPenawaranMarketingHd"& _ 
                            "r' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieveReportFormPenawaranMarketingHdr.RemarksColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DiscAmt() As Decimal
            Get
                Return CType(Me(Me.tabledtRetrieveReportFormPenawaranMarketingHdr.DiscAmtColumn),Decimal)
            End Get
            Set
                Me(Me.tabledtRetrieveReportFormPenawaranMarketingHdr.DiscAmtColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Survey_Remark() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieveReportFormPenawaranMarketingHdr.Survey_RemarkColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Survey_Remark' in table 'dtRetrieveReportFormPenawaranMarke"& _ 
                            "tingHdr' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieveReportFormPenawaranMarketingHdr.Survey_RemarkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustNameNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieveReportFormPenawaranMarketingHdr.CustNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustNameNull()
            Me(Me.tabledtRetrieveReportFormPenawaranMarketingHdr.CustNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMICE_MainNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieveReportFormPenawaranMarketingHdr.MICE_MainColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMICE_MainNull()
            Me(Me.tabledtRetrieveReportFormPenawaranMarketingHdr.MICE_MainColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMICE_SupportingNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieveReportFormPenawaranMarketingHdr.MICE_SupportingColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMICE_SupportingNull()
            Me(Me.tabledtRetrieveReportFormPenawaranMarketingHdr.MICE_SupportingColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalJasaNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieveReportFormPenawaranMarketingHdr.TotalJasaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalJasaNull()
            Me(Me.tabledtRetrieveReportFormPenawaranMarketingHdr.TotalJasaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRemarksNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieveReportFormPenawaranMarketingHdr.RemarksColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRemarksNull()
            Me(Me.tabledtRetrieveReportFormPenawaranMarketingHdr.RemarksColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSurvey_RemarkNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieveReportFormPenawaranMarketingHdr.Survey_RemarkColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSurvey_RemarkNull()
            Me(Me.tabledtRetrieveReportFormPenawaranMarketingHdr.Survey_RemarkColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtRetrieveReportFormPenawaranMarketingDtlRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtRetrieveReportFormPenawaranMarketingDtl As dtRetrieveReportFormPenawaranMarketingDtlDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtRetrieveReportFormPenawaranMarketingDtl = CType(Me.Table,dtRetrieveReportFormPenawaranMarketingDtlDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Seq() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieveReportFormPenawaranMarketingDtl.SeqColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Seq' in table 'dtRetrieveReportFormPenawaranMarketingDtl' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieveReportFormPenawaranMarketingDtl.SeqColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Item_Id() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieveReportFormPenawaranMarketingDtl.Item_IdColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Item_Id' in table 'dtRetrieveReportFormPenawaranMarketingDt"& _ 
                            "l' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieveReportFormPenawaranMarketingDtl.Item_IdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Item_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieveReportFormPenawaranMarketingDtl.Item_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Item_Name' in table 'dtRetrieveReportFormPenawaranMarketing"& _ 
                            "Dtl' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieveReportFormPenawaranMarketingDtl.Item_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Item_Category() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieveReportFormPenawaranMarketingDtl.Item_CategoryColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Item_Category' in table 'dtRetrieveReportFormPenawaranMarke"& _ 
                            "tingDtl' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieveReportFormPenawaranMarketingDtl.Item_CategoryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UoM() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieveReportFormPenawaranMarketingDtl.UoMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UoM' in table 'dtRetrieveReportFormPenawaranMarketingDtl' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieveReportFormPenawaranMarketingDtl.UoMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Qty() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieveReportFormPenawaranMarketingDtl.QtyColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Qty' in table 'dtRetrieveReportFormPenawaranMarketingDtl' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieveReportFormPenawaranMarketingDtl.QtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Price_Marketing() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieveReportFormPenawaranMarketingDtl.Price_MarketingColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Price_Marketing' in table 'dtRetrieveReportFormPenawaranMar"& _ 
                            "ketingDtl' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieveReportFormPenawaranMarketingDtl.Price_MarketingColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubTotal() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieveReportFormPenawaranMarketingDtl.SubTotalColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SubTotal' in table 'dtRetrieveReportFormPenawaranMarketingD"& _ 
                            "tl' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieveReportFormPenawaranMarketingDtl.SubTotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSeqNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieveReportFormPenawaranMarketingDtl.SeqColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSeqNull()
            Me(Me.tabledtRetrieveReportFormPenawaranMarketingDtl.SeqColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItem_IdNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieveReportFormPenawaranMarketingDtl.Item_IdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItem_IdNull()
            Me(Me.tabledtRetrieveReportFormPenawaranMarketingDtl.Item_IdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItem_NameNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieveReportFormPenawaranMarketingDtl.Item_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItem_NameNull()
            Me(Me.tabledtRetrieveReportFormPenawaranMarketingDtl.Item_NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItem_CategoryNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieveReportFormPenawaranMarketingDtl.Item_CategoryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItem_CategoryNull()
            Me(Me.tabledtRetrieveReportFormPenawaranMarketingDtl.Item_CategoryColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUoMNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieveReportFormPenawaranMarketingDtl.UoMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUoMNull()
            Me(Me.tabledtRetrieveReportFormPenawaranMarketingDtl.UoMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQtyNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieveReportFormPenawaranMarketingDtl.QtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQtyNull()
            Me(Me.tabledtRetrieveReportFormPenawaranMarketingDtl.QtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrice_MarketingNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieveReportFormPenawaranMarketingDtl.Price_MarketingColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrice_MarketingNull()
            Me(Me.tabledtRetrieveReportFormPenawaranMarketingDtl.Price_MarketingColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubTotalNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieveReportFormPenawaranMarketingDtl.SubTotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubTotalNull()
            Me(Me.tabledtRetrieveReportFormPenawaranMarketingDtl.SubTotalColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtRetrieveReportFormPenawaranMarketingJasaRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtRetrieveReportFormPenawaranMarketingJasa As dtRetrieveReportFormPenawaranMarketingJasaDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtRetrieveReportFormPenawaranMarketingJasa = CType(Me.Table,dtRetrieveReportFormPenawaranMarketingJasaDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Jasa_ID() As String
            Get
                Return CType(Me(Me.tabledtRetrieveReportFormPenawaranMarketingJasa.Jasa_IDColumn),String)
            End Get
            Set
                Me(Me.tabledtRetrieveReportFormPenawaranMarketingJasa.Jasa_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Jasa_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRetrieveReportFormPenawaranMarketingJasa.Jasa_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Jasa_Name' in table 'dtRetrieveReportFormPenawaranMarketing"& _ 
                            "Jasa' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRetrieveReportFormPenawaranMarketingJasa.Jasa_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Jlh_Hari() As Integer
            Get
                Return CType(Me(Me.tabledtRetrieveReportFormPenawaranMarketingJasa.Jlh_HariColumn),Integer)
            End Get
            Set
                Me(Me.tabledtRetrieveReportFormPenawaranMarketingJasa.Jlh_HariColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ongkos() As Decimal
            Get
                Return CType(Me(Me.tabledtRetrieveReportFormPenawaranMarketingJasa.OngkosColumn),Decimal)
            End Get
            Set
                Me(Me.tabledtRetrieveReportFormPenawaranMarketingJasa.OngkosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubTotal() As Decimal
            Get
                Return CType(Me(Me.tabledtRetrieveReportFormPenawaranMarketingJasa.SubTotalColumn),Decimal)
            End Get
            Set
                Me(Me.tabledtRetrieveReportFormPenawaranMarketingJasa.SubTotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Remarks() As String
            Get
                Return CType(Me(Me.tabledtRetrieveReportFormPenawaranMarketingJasa.RemarksColumn),String)
            End Get
            Set
                Me(Me.tabledtRetrieveReportFormPenawaranMarketingJasa.RemarksColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJasa_NameNull() As Boolean
            Return Me.IsNull(Me.tabledtRetrieveReportFormPenawaranMarketingJasa.Jasa_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJasa_NameNull()
            Me(Me.tabledtRetrieveReportFormPenawaranMarketingJasa.Jasa_NameColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtPersediaanBarangRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtPersediaanBarang As dtPersediaanBarangDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtPersediaanBarang = CType(Me.Table,dtPersediaanBarangDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Period() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPersediaanBarang.PeriodColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Period' in table 'dtPersediaanBarang' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPersediaanBarang.PeriodColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Warehouse_ID() As String
            Get
                Return CType(Me(Me.tabledtPersediaanBarang.Warehouse_IDColumn),String)
            End Get
            Set
                Me(Me.tabledtPersediaanBarang.Warehouse_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Warehouse_name() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPersediaanBarang.Warehouse_nameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Warehouse_name' in table 'dtPersediaanBarang' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPersediaanBarang.Warehouse_nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Item_Id() As String
            Get
                Return CType(Me(Me.tabledtPersediaanBarang.Item_IdColumn),String)
            End Get
            Set
                Me(Me.tabledtPersediaanBarang.Item_IdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Item_name() As String
            Get
                Return CType(Me(Me.tabledtPersediaanBarang.Item_nameColumn),String)
            End Get
            Set
                Me(Me.tabledtPersediaanBarang.Item_nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UoM() As String
            Get
                Return CType(Me(Me.tabledtPersediaanBarang.UoMColumn),String)
            End Get
            Set
                Me(Me.tabledtPersediaanBarang.UoMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Current_Stock() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtPersediaanBarang.Current_StockColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Current_Stock' in table 'dtPersediaanBarang' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPersediaanBarang.Current_StockColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Min_Stock() As Decimal
            Get
                Return CType(Me(Me.tabledtPersediaanBarang.Min_StockColumn),Decimal)
            End Get
            Set
                Me(Me.tabledtPersediaanBarang.Min_StockColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TB_Amount() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtPersediaanBarang.TB_AmountColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TB_Amount' in table 'dtPersediaanBarang' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPersediaanBarang.TB_AmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TB_Qty() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledtPersediaanBarang.TB_QtyColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TB_Qty' in table 'dtPersediaanBarang' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPersediaanBarang.TB_QtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StockBB_Price() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtPersediaanBarang.StockBB_PriceColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StockBB_Price' in table 'dtPersediaanBarang' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPersediaanBarang.StockBB_PriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StockBB_Qty() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtPersediaanBarang.StockBB_QtyColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StockBB_Qty' in table 'dtPersediaanBarang' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPersediaanBarang.StockBB_QtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPeriodNull() As Boolean
            Return Me.IsNull(Me.tabledtPersediaanBarang.PeriodColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPeriodNull()
            Me(Me.tabledtPersediaanBarang.PeriodColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWarehouse_nameNull() As Boolean
            Return Me.IsNull(Me.tabledtPersediaanBarang.Warehouse_nameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWarehouse_nameNull()
            Me(Me.tabledtPersediaanBarang.Warehouse_nameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCurrent_StockNull() As Boolean
            Return Me.IsNull(Me.tabledtPersediaanBarang.Current_StockColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCurrent_StockNull()
            Me(Me.tabledtPersediaanBarang.Current_StockColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTB_AmountNull() As Boolean
            Return Me.IsNull(Me.tabledtPersediaanBarang.TB_AmountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTB_AmountNull()
            Me(Me.tabledtPersediaanBarang.TB_AmountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTB_QtyNull() As Boolean
            Return Me.IsNull(Me.tabledtPersediaanBarang.TB_QtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTB_QtyNull()
            Me(Me.tabledtPersediaanBarang.TB_QtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStockBB_PriceNull() As Boolean
            Return Me.IsNull(Me.tabledtPersediaanBarang.StockBB_PriceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStockBB_PriceNull()
            Me(Me.tabledtPersediaanBarang.StockBB_PriceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStockBB_QtyNull() As Boolean
            Return Me.IsNull(Me.tabledtPersediaanBarang.StockBB_QtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStockBB_QtyNull()
            Me(Me.tabledtPersediaanBarang.StockBB_QtyColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtPenjualanTokoPerBarangDailyRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtPenjualanTokoPerBarangDaily As dtPenjualanTokoPerBarangDailyDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtPenjualanTokoPerBarangDaily = CType(Me.Table,dtPenjualanTokoPerBarangDailyDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PT_Date() As Date
            Get
                Return CType(Me(Me.tabledtPenjualanTokoPerBarangDaily.PT_DateColumn),Date)
            End Get
            Set
                Me(Me.tabledtPenjualanTokoPerBarangDaily.PT_DateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Item_ID() As String
            Get
                Return CType(Me(Me.tabledtPenjualanTokoPerBarangDaily.Item_IDColumn),String)
            End Get
            Set
                Me(Me.tabledtPenjualanTokoPerBarangDaily.Item_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Item_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPenjualanTokoPerBarangDaily.Item_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Item_Name' in table 'dtPenjualanTokoPerBarangDaily' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPenjualanTokoPerBarangDaily.Item_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UoM() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPenjualanTokoPerBarangDaily.UoMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UoM' in table 'dtPenjualanTokoPerBarangDaily' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPenjualanTokoPerBarangDaily.UoMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Qty() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledtPenjualanTokoPerBarangDaily.QtyColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Qty' in table 'dtPenjualanTokoPerBarangDaily' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPenjualanTokoPerBarangDaily.QtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Qty_MinRetur() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledtPenjualanTokoPerBarangDaily.Qty_MinReturColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Qty_MinRetur' in table 'dtPenjualanTokoPerBarangDaily' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPenjualanTokoPerBarangDaily.Qty_MinReturColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Amount() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtPenjualanTokoPerBarangDaily.AmountColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Amount' in table 'dtPenjualanTokoPerBarangDaily' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPenjualanTokoPerBarangDaily.AmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Amount_MinRetur() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtPenjualanTokoPerBarangDaily.Amount_MinReturColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Amount_MinRetur' in table 'dtPenjualanTokoPerBarangDaily' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPenjualanTokoPerBarangDaily.Amount_MinReturColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItem_NameNull() As Boolean
            Return Me.IsNull(Me.tabledtPenjualanTokoPerBarangDaily.Item_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItem_NameNull()
            Me(Me.tabledtPenjualanTokoPerBarangDaily.Item_NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUoMNull() As Boolean
            Return Me.IsNull(Me.tabledtPenjualanTokoPerBarangDaily.UoMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUoMNull()
            Me(Me.tabledtPenjualanTokoPerBarangDaily.UoMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQtyNull() As Boolean
            Return Me.IsNull(Me.tabledtPenjualanTokoPerBarangDaily.QtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQtyNull()
            Me(Me.tabledtPenjualanTokoPerBarangDaily.QtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQty_MinReturNull() As Boolean
            Return Me.IsNull(Me.tabledtPenjualanTokoPerBarangDaily.Qty_MinReturColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQty_MinReturNull()
            Me(Me.tabledtPenjualanTokoPerBarangDaily.Qty_MinReturColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAmountNull() As Boolean
            Return Me.IsNull(Me.tabledtPenjualanTokoPerBarangDaily.AmountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAmountNull()
            Me(Me.tabledtPenjualanTokoPerBarangDaily.AmountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAmount_MinReturNull() As Boolean
            Return Me.IsNull(Me.tabledtPenjualanTokoPerBarangDaily.Amount_MinReturColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAmount_MinReturNull()
            Me(Me.tabledtPenjualanTokoPerBarangDaily.Amount_MinReturColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtPenjualanTokoPerBarangMonthlyRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtPenjualanTokoPerBarangMonthly As dtPenjualanTokoPerBarangMonthlyDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtPenjualanTokoPerBarangMonthly = CType(Me.Table,dtPenjualanTokoPerBarangMonthlyDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PT_Year() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledtPenjualanTokoPerBarangMonthly.PT_YearColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PT_Year' in table 'dtPenjualanTokoPerBarangMonthly' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPenjualanTokoPerBarangMonthly.PT_YearColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PT_Month() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledtPenjualanTokoPerBarangMonthly.PT_MonthColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PT_Month' in table 'dtPenjualanTokoPerBarangMonthly' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPenjualanTokoPerBarangMonthly.PT_MonthColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Item_ID() As String
            Get
                Return CType(Me(Me.tabledtPenjualanTokoPerBarangMonthly.Item_IDColumn),String)
            End Get
            Set
                Me(Me.tabledtPenjualanTokoPerBarangMonthly.Item_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Item_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPenjualanTokoPerBarangMonthly.Item_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Item_Name' in table 'dtPenjualanTokoPerBarangMonthly' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPenjualanTokoPerBarangMonthly.Item_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UoM() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPenjualanTokoPerBarangMonthly.UoMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UoM' in table 'dtPenjualanTokoPerBarangMonthly' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPenjualanTokoPerBarangMonthly.UoMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Qty() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledtPenjualanTokoPerBarangMonthly.QtyColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Qty' in table 'dtPenjualanTokoPerBarangMonthly' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPenjualanTokoPerBarangMonthly.QtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Qty_MinRetur() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledtPenjualanTokoPerBarangMonthly.Qty_MinReturColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Qty_MinRetur' in table 'dtPenjualanTokoPerBarangMonthly' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPenjualanTokoPerBarangMonthly.Qty_MinReturColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Amount() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtPenjualanTokoPerBarangMonthly.AmountColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Amount' in table 'dtPenjualanTokoPerBarangMonthly' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPenjualanTokoPerBarangMonthly.AmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Amount_MinRetur() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtPenjualanTokoPerBarangMonthly.Amount_MinReturColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Amount_MinRetur' in table 'dtPenjualanTokoPerBarangMonthly'"& _ 
                            " is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPenjualanTokoPerBarangMonthly.Amount_MinReturColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPT_YearNull() As Boolean
            Return Me.IsNull(Me.tabledtPenjualanTokoPerBarangMonthly.PT_YearColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPT_YearNull()
            Me(Me.tabledtPenjualanTokoPerBarangMonthly.PT_YearColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPT_MonthNull() As Boolean
            Return Me.IsNull(Me.tabledtPenjualanTokoPerBarangMonthly.PT_MonthColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPT_MonthNull()
            Me(Me.tabledtPenjualanTokoPerBarangMonthly.PT_MonthColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItem_NameNull() As Boolean
            Return Me.IsNull(Me.tabledtPenjualanTokoPerBarangMonthly.Item_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItem_NameNull()
            Me(Me.tabledtPenjualanTokoPerBarangMonthly.Item_NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUoMNull() As Boolean
            Return Me.IsNull(Me.tabledtPenjualanTokoPerBarangMonthly.UoMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUoMNull()
            Me(Me.tabledtPenjualanTokoPerBarangMonthly.UoMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQtyNull() As Boolean
            Return Me.IsNull(Me.tabledtPenjualanTokoPerBarangMonthly.QtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQtyNull()
            Me(Me.tabledtPenjualanTokoPerBarangMonthly.QtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQty_MinReturNull() As Boolean
            Return Me.IsNull(Me.tabledtPenjualanTokoPerBarangMonthly.Qty_MinReturColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQty_MinReturNull()
            Me(Me.tabledtPenjualanTokoPerBarangMonthly.Qty_MinReturColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAmountNull() As Boolean
            Return Me.IsNull(Me.tabledtPenjualanTokoPerBarangMonthly.AmountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAmountNull()
            Me(Me.tabledtPenjualanTokoPerBarangMonthly.AmountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAmount_MinReturNull() As Boolean
            Return Me.IsNull(Me.tabledtPenjualanTokoPerBarangMonthly.Amount_MinReturColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAmount_MinReturNull()
            Me(Me.tabledtPenjualanTokoPerBarangMonthly.Amount_MinReturColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtPenjualanTokoPerCustomerDailyRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtPenjualanTokoPerCustomerDaily As dtPenjualanTokoPerCustomerDailyDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtPenjualanTokoPerCustomerDaily = CType(Me.Table,dtPenjualanTokoPerCustomerDailyDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PT_Date() As Date
            Get
                Return CType(Me(Me.tabledtPenjualanTokoPerCustomerDaily.PT_DateColumn),Date)
            End Get
            Set
                Me(Me.tabledtPenjualanTokoPerCustomerDaily.PT_DateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cust_ID() As String
            Get
                Return CType(Me(Me.tabledtPenjualanTokoPerCustomerDaily.Cust_IDColumn),String)
            End Get
            Set
                Me(Me.tabledtPenjualanTokoPerCustomerDaily.Cust_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nama() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPenjualanTokoPerCustomerDaily.NamaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Nama' in table 'dtPenjualanTokoPerCustomerDaily' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPenjualanTokoPerCustomerDaily.NamaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Item_ID() As String
            Get
                Return CType(Me(Me.tabledtPenjualanTokoPerCustomerDaily.Item_IDColumn),String)
            End Get
            Set
                Me(Me.tabledtPenjualanTokoPerCustomerDaily.Item_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Item_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPenjualanTokoPerCustomerDaily.Item_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Item_Name' in table 'dtPenjualanTokoPerCustomerDaily' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPenjualanTokoPerCustomerDaily.Item_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UoM() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPenjualanTokoPerCustomerDaily.UoMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UoM' in table 'dtPenjualanTokoPerCustomerDaily' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPenjualanTokoPerCustomerDaily.UoMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Qty() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledtPenjualanTokoPerCustomerDaily.QtyColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Qty' in table 'dtPenjualanTokoPerCustomerDaily' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPenjualanTokoPerCustomerDaily.QtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Qty_MinRetur() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledtPenjualanTokoPerCustomerDaily.Qty_MinReturColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Qty_MinRetur' in table 'dtPenjualanTokoPerCustomerDaily' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPenjualanTokoPerCustomerDaily.Qty_MinReturColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Amount() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtPenjualanTokoPerCustomerDaily.AmountColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Amount' in table 'dtPenjualanTokoPerCustomerDaily' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPenjualanTokoPerCustomerDaily.AmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Amount_MinRetur() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtPenjualanTokoPerCustomerDaily.Amount_MinReturColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Amount_MinRetur' in table 'dtPenjualanTokoPerCustomerDaily'"& _ 
                            " is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPenjualanTokoPerCustomerDaily.Amount_MinReturColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNamaNull() As Boolean
            Return Me.IsNull(Me.tabledtPenjualanTokoPerCustomerDaily.NamaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNamaNull()
            Me(Me.tabledtPenjualanTokoPerCustomerDaily.NamaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItem_NameNull() As Boolean
            Return Me.IsNull(Me.tabledtPenjualanTokoPerCustomerDaily.Item_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItem_NameNull()
            Me(Me.tabledtPenjualanTokoPerCustomerDaily.Item_NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUoMNull() As Boolean
            Return Me.IsNull(Me.tabledtPenjualanTokoPerCustomerDaily.UoMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUoMNull()
            Me(Me.tabledtPenjualanTokoPerCustomerDaily.UoMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQtyNull() As Boolean
            Return Me.IsNull(Me.tabledtPenjualanTokoPerCustomerDaily.QtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQtyNull()
            Me(Me.tabledtPenjualanTokoPerCustomerDaily.QtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQty_MinReturNull() As Boolean
            Return Me.IsNull(Me.tabledtPenjualanTokoPerCustomerDaily.Qty_MinReturColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQty_MinReturNull()
            Me(Me.tabledtPenjualanTokoPerCustomerDaily.Qty_MinReturColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAmountNull() As Boolean
            Return Me.IsNull(Me.tabledtPenjualanTokoPerCustomerDaily.AmountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAmountNull()
            Me(Me.tabledtPenjualanTokoPerCustomerDaily.AmountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAmount_MinReturNull() As Boolean
            Return Me.IsNull(Me.tabledtPenjualanTokoPerCustomerDaily.Amount_MinReturColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAmount_MinReturNull()
            Me(Me.tabledtPenjualanTokoPerCustomerDaily.Amount_MinReturColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtPenjualanTokoPerCustomerMonthlyRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtPenjualanTokoPerCustomerMonthly As dtPenjualanTokoPerCustomerMonthlyDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtPenjualanTokoPerCustomerMonthly = CType(Me.Table,dtPenjualanTokoPerCustomerMonthlyDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PT_Year() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledtPenjualanTokoPerCustomerMonthly.PT_YearColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PT_Year' in table 'dtPenjualanTokoPerCustomerMonthly' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPenjualanTokoPerCustomerMonthly.PT_YearColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PT_Month() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledtPenjualanTokoPerCustomerMonthly.PT_MonthColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PT_Month' in table 'dtPenjualanTokoPerCustomerMonthly' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPenjualanTokoPerCustomerMonthly.PT_MonthColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cust_ID() As String
            Get
                Return CType(Me(Me.tabledtPenjualanTokoPerCustomerMonthly.Cust_IDColumn),String)
            End Get
            Set
                Me(Me.tabledtPenjualanTokoPerCustomerMonthly.Cust_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nama() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPenjualanTokoPerCustomerMonthly.NamaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Nama' in table 'dtPenjualanTokoPerCustomerMonthly' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPenjualanTokoPerCustomerMonthly.NamaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Item_ID() As String
            Get
                Return CType(Me(Me.tabledtPenjualanTokoPerCustomerMonthly.Item_IDColumn),String)
            End Get
            Set
                Me(Me.tabledtPenjualanTokoPerCustomerMonthly.Item_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Item_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPenjualanTokoPerCustomerMonthly.Item_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Item_Name' in table 'dtPenjualanTokoPerCustomerMonthly' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPenjualanTokoPerCustomerMonthly.Item_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UoM() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPenjualanTokoPerCustomerMonthly.UoMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UoM' in table 'dtPenjualanTokoPerCustomerMonthly' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPenjualanTokoPerCustomerMonthly.UoMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Qty() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledtPenjualanTokoPerCustomerMonthly.QtyColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Qty' in table 'dtPenjualanTokoPerCustomerMonthly' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPenjualanTokoPerCustomerMonthly.QtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Qty_MinRetur() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledtPenjualanTokoPerCustomerMonthly.Qty_MinReturColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Qty_MinRetur' in table 'dtPenjualanTokoPerCustomerMonthly' "& _ 
                            "is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPenjualanTokoPerCustomerMonthly.Qty_MinReturColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Amount() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtPenjualanTokoPerCustomerMonthly.AmountColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Amount' in table 'dtPenjualanTokoPerCustomerMonthly' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPenjualanTokoPerCustomerMonthly.AmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Amount_MinRetur() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtPenjualanTokoPerCustomerMonthly.Amount_MinReturColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Amount_MinRetur' in table 'dtPenjualanTokoPerCustomerMonthl"& _ 
                            "y' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPenjualanTokoPerCustomerMonthly.Amount_MinReturColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPT_YearNull() As Boolean
            Return Me.IsNull(Me.tabledtPenjualanTokoPerCustomerMonthly.PT_YearColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPT_YearNull()
            Me(Me.tabledtPenjualanTokoPerCustomerMonthly.PT_YearColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPT_MonthNull() As Boolean
            Return Me.IsNull(Me.tabledtPenjualanTokoPerCustomerMonthly.PT_MonthColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPT_MonthNull()
            Me(Me.tabledtPenjualanTokoPerCustomerMonthly.PT_MonthColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNamaNull() As Boolean
            Return Me.IsNull(Me.tabledtPenjualanTokoPerCustomerMonthly.NamaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNamaNull()
            Me(Me.tabledtPenjualanTokoPerCustomerMonthly.NamaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItem_NameNull() As Boolean
            Return Me.IsNull(Me.tabledtPenjualanTokoPerCustomerMonthly.Item_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItem_NameNull()
            Me(Me.tabledtPenjualanTokoPerCustomerMonthly.Item_NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUoMNull() As Boolean
            Return Me.IsNull(Me.tabledtPenjualanTokoPerCustomerMonthly.UoMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUoMNull()
            Me(Me.tabledtPenjualanTokoPerCustomerMonthly.UoMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQtyNull() As Boolean
            Return Me.IsNull(Me.tabledtPenjualanTokoPerCustomerMonthly.QtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQtyNull()
            Me(Me.tabledtPenjualanTokoPerCustomerMonthly.QtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQty_MinReturNull() As Boolean
            Return Me.IsNull(Me.tabledtPenjualanTokoPerCustomerMonthly.Qty_MinReturColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQty_MinReturNull()
            Me(Me.tabledtPenjualanTokoPerCustomerMonthly.Qty_MinReturColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAmountNull() As Boolean
            Return Me.IsNull(Me.tabledtPenjualanTokoPerCustomerMonthly.AmountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAmountNull()
            Me(Me.tabledtPenjualanTokoPerCustomerMonthly.AmountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAmount_MinReturNull() As Boolean
            Return Me.IsNull(Me.tabledtPenjualanTokoPerCustomerMonthly.Amount_MinReturColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAmount_MinReturNull()
            Me(Me.tabledtPenjualanTokoPerCustomerMonthly.Amount_MinReturColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtPenjualanInstalasiDailyRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtPenjualanInstalasiDaily As dtPenjualanInstalasiDailyDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtPenjualanInstalasiDaily = CType(Me.Table,dtPenjualanInstalasiDailyDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tgl_Faktur() As Date
            Get
                Return CType(Me(Me.tabledtPenjualanInstalasiDaily.Tgl_FakturColumn),Date)
            End Get
            Set
                Me(Me.tabledtPenjualanInstalasiDaily.Tgl_FakturColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cust_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPenjualanInstalasiDaily.Cust_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cust_ID' in table 'dtPenjualanInstalasiDaily' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPenjualanInstalasiDaily.Cust_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nama() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPenjualanInstalasiDaily.NamaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Nama' in table 'dtPenjualanInstalasiDaily' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPenjualanInstalasiDaily.NamaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Faktur_Tipe() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPenjualanInstalasiDaily.Faktur_TipeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Faktur_Tipe' in table 'dtPenjualanInstalasiDaily' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPenjualanInstalasiDaily.Faktur_TipeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Project_No() As String
            Get
                Return CType(Me(Me.tabledtPenjualanInstalasiDaily.Project_NoColumn),String)
            End Get
            Set
                Me(Me.tabledtPenjualanInstalasiDaily.Project_NoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Project_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPenjualanInstalasiDaily.Project_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Project_Name' in table 'dtPenjualanInstalasiDaily' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPenjualanInstalasiDaily.Project_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DPP() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtPenjualanInstalasiDaily.DPPColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DPP' in table 'dtPenjualanInstalasiDaily' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPenjualanInstalasiDaily.DPPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Jumlah_Uang() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtPenjualanInstalasiDaily.Jumlah_UangColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Jumlah_Uang' in table 'dtPenjualanInstalasiDaily' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPenjualanInstalasiDaily.Jumlah_UangColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCust_IDNull() As Boolean
            Return Me.IsNull(Me.tabledtPenjualanInstalasiDaily.Cust_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCust_IDNull()
            Me(Me.tabledtPenjualanInstalasiDaily.Cust_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNamaNull() As Boolean
            Return Me.IsNull(Me.tabledtPenjualanInstalasiDaily.NamaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNamaNull()
            Me(Me.tabledtPenjualanInstalasiDaily.NamaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFaktur_TipeNull() As Boolean
            Return Me.IsNull(Me.tabledtPenjualanInstalasiDaily.Faktur_TipeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFaktur_TipeNull()
            Me(Me.tabledtPenjualanInstalasiDaily.Faktur_TipeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProject_NameNull() As Boolean
            Return Me.IsNull(Me.tabledtPenjualanInstalasiDaily.Project_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProject_NameNull()
            Me(Me.tabledtPenjualanInstalasiDaily.Project_NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDPPNull() As Boolean
            Return Me.IsNull(Me.tabledtPenjualanInstalasiDaily.DPPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDPPNull()
            Me(Me.tabledtPenjualanInstalasiDaily.DPPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJumlah_UangNull() As Boolean
            Return Me.IsNull(Me.tabledtPenjualanInstalasiDaily.Jumlah_UangColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJumlah_UangNull()
            Me(Me.tabledtPenjualanInstalasiDaily.Jumlah_UangColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtPenjualanInstalasiMonthlyRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtPenjualanInstalasiMonthly As dtPenjualanInstalasiMonthlyDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtPenjualanInstalasiMonthly = CType(Me.Table,dtPenjualanInstalasiMonthlyDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Faktur_Year() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledtPenjualanInstalasiMonthly.Faktur_YearColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Faktur_Year' in table 'dtPenjualanInstalasiMonthly' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPenjualanInstalasiMonthly.Faktur_YearColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Faktur_Month() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledtPenjualanInstalasiMonthly.Faktur_MonthColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Faktur_Month' in table 'dtPenjualanInstalasiMonthly' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPenjualanInstalasiMonthly.Faktur_MonthColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cust_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPenjualanInstalasiMonthly.Cust_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cust_ID' in table 'dtPenjualanInstalasiMonthly' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPenjualanInstalasiMonthly.Cust_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nama() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPenjualanInstalasiMonthly.NamaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Nama' in table 'dtPenjualanInstalasiMonthly' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPenjualanInstalasiMonthly.NamaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Faktur_Tipe() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPenjualanInstalasiMonthly.Faktur_TipeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Faktur_Tipe' in table 'dtPenjualanInstalasiMonthly' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPenjualanInstalasiMonthly.Faktur_TipeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Project_No() As String
            Get
                Return CType(Me(Me.tabledtPenjualanInstalasiMonthly.Project_NoColumn),String)
            End Get
            Set
                Me(Me.tabledtPenjualanInstalasiMonthly.Project_NoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Project_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtPenjualanInstalasiMonthly.Project_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Project_Name' in table 'dtPenjualanInstalasiMonthly' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPenjualanInstalasiMonthly.Project_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DPP() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtPenjualanInstalasiMonthly.DPPColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DPP' in table 'dtPenjualanInstalasiMonthly' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPenjualanInstalasiMonthly.DPPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Jumlah_Uang() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtPenjualanInstalasiMonthly.Jumlah_UangColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Jumlah_Uang' in table 'dtPenjualanInstalasiMonthly' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtPenjualanInstalasiMonthly.Jumlah_UangColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFaktur_YearNull() As Boolean
            Return Me.IsNull(Me.tabledtPenjualanInstalasiMonthly.Faktur_YearColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFaktur_YearNull()
            Me(Me.tabledtPenjualanInstalasiMonthly.Faktur_YearColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFaktur_MonthNull() As Boolean
            Return Me.IsNull(Me.tabledtPenjualanInstalasiMonthly.Faktur_MonthColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFaktur_MonthNull()
            Me(Me.tabledtPenjualanInstalasiMonthly.Faktur_MonthColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCust_IDNull() As Boolean
            Return Me.IsNull(Me.tabledtPenjualanInstalasiMonthly.Cust_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCust_IDNull()
            Me(Me.tabledtPenjualanInstalasiMonthly.Cust_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNamaNull() As Boolean
            Return Me.IsNull(Me.tabledtPenjualanInstalasiMonthly.NamaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNamaNull()
            Me(Me.tabledtPenjualanInstalasiMonthly.NamaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFaktur_TipeNull() As Boolean
            Return Me.IsNull(Me.tabledtPenjualanInstalasiMonthly.Faktur_TipeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFaktur_TipeNull()
            Me(Me.tabledtPenjualanInstalasiMonthly.Faktur_TipeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProject_NameNull() As Boolean
            Return Me.IsNull(Me.tabledtPenjualanInstalasiMonthly.Project_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProject_NameNull()
            Me(Me.tabledtPenjualanInstalasiMonthly.Project_NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDPPNull() As Boolean
            Return Me.IsNull(Me.tabledtPenjualanInstalasiMonthly.DPPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDPPNull()
            Me(Me.tabledtPenjualanInstalasiMonthly.DPPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJumlah_UangNull() As Boolean
            Return Me.IsNull(Me.tabledtPenjualanInstalasiMonthly.Jumlah_UangColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJumlah_UangNull()
            Me(Me.tabledtPenjualanInstalasiMonthly.Jumlah_UangColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtReportQuestionnaireRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtReportQuestionnaireRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtReportQuestionnaireRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtReportQuestionnaireRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtReportOrderPabrikasiRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtReportOrderPabrikasiRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtReportOrderPabrikasiRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtReportOrderPabrikasiRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtRetrieve_Report_ProspekOrderRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtRetrieve_Report_ProspekOrderRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtRetrieve_Report_ProspekOrderRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtRetrieve_Report_ProspekOrderRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtManifoldDataRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtManifoldDataRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtManifoldDataRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtManifoldDataRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtPipeToKitchenRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtPipeToKitchenRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtPipeToKitchenRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtPipeToKitchenRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtSupportingMaterialRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtSupportingMaterialRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtSupportingMaterialRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtSupportingMaterialRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtTitikApiRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtTitikApiRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtTitikApiRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtTitikApiRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Trans_MoURowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Trans_MoURow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Trans_MoURow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Trans_MoURow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_retrieve_DPPbyIDRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_retrieve_DPPbyIDRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_retrieve_DPPbyIDRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_retrieve_DPPbyIDRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtInvoicePiutangRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtInvoicePiutangRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtInvoicePiutangRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtInvoicePiutangRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtDaftarPelunasanHutangRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtDaftarPelunasanHutangRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtDaftarPelunasanHutangRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtDaftarPelunasanHutangRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtGLDetailRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtGLDetailRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtGLDetailRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtGLDetailRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtReportPORowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtReportPORow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtReportPORow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtReportPORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtPembayaranKartuHutangDSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtPembayaranKartuHutangDSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtPembayaranKartuHutangDSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtPembayaranKartuHutangDSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtReportOrderMaintenanceRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtReportOrderMaintenanceRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtReportOrderMaintenanceRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtReportOrderMaintenanceRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtReportBPBRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtReportBPBRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtReportBPBRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtReportBPBRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtRetrieveReportRekapPemakaianBahanPerSPKRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtRetrieveReportRekapPemakaianBahanPerSPKRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtRetrieveReportRekapPemakaianBahanPerSPKRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtRetrieveReportRekapPemakaianBahanPerSPKRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtRetrieveReportRekapPemakaianBahanPerProjectRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtRetrieveReportRekapPemakaianBahanPerProjectRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtRetrieveReportRekapPemakaianBahanPerProjectRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtRetrieveReportRekapPemakaianBahanPerProjectRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtPOItemByPONoRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtPOItemByPONoRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtPOItemByPONoRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtPOItemByPONoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtPOJasaByPONoRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtPOJasaByPONoRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtPOJasaByPONoRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtPOJasaByPONoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtRetrieveReportSPKFormRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtRetrieveReportSPKFormRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtRetrieveReportSPKFormRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtRetrieveReportSPKFormRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtRetrieveReportProgressProjectPerSPKRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtRetrieveReportProgressProjectPerSPKRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtRetrieveReportProgressProjectPerSPKRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtRetrieveReportProgressProjectPerSPKRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtRetrieveReportRekapProjectRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtRetrieveReportRekapProjectRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtRetrieveReportRekapProjectRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtRetrieveReportRekapProjectRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtRetrieveReportRekapProgressProjectPerSPKRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtRetrieveReportRekapProgressProjectPerSPKRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtRetrieveReportRekapProgressProjectPerSPKRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtRetrieveReportRekapProgressProjectPerSPKRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_getPembelianItemRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_getPembelianItemRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_getPembelianItemRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_getPembelianItemRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtPOPendingBasedOnTerimaBarangRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtPOPendingBasedOnTerimaBarangRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtPOPendingBasedOnTerimaBarangRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtPOPendingBasedOnTerimaBarangRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_GetCustomerReceivableAgingRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_GetCustomerReceivableAgingRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_GetCustomerReceivableAgingRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_GetCustomerReceivableAgingRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtRetrieveReportFormPenawaranMarketingHdrRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtRetrieveReportFormPenawaranMarketingHdrRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtRetrieveReportFormPenawaranMarketingHdrRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtRetrieveReportFormPenawaranMarketingHdrRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtRetrieveReportFormPenawaranMarketingDtlRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtRetrieveReportFormPenawaranMarketingDtlRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtRetrieveReportFormPenawaranMarketingDtlRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtRetrieveReportFormPenawaranMarketingDtlRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtRetrieveReportFormPenawaranMarketingJasaRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtRetrieveReportFormPenawaranMarketingJasaRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtRetrieveReportFormPenawaranMarketingJasaRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtRetrieveReportFormPenawaranMarketingJasaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtPersediaanBarangRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtPersediaanBarangRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtPersediaanBarangRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtPersediaanBarangRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtPenjualanTokoPerBarangDailyRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtPenjualanTokoPerBarangDailyRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtPenjualanTokoPerBarangDailyRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtPenjualanTokoPerBarangDailyRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtPenjualanTokoPerBarangMonthlyRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtPenjualanTokoPerBarangMonthlyRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtPenjualanTokoPerBarangMonthlyRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtPenjualanTokoPerBarangMonthlyRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtPenjualanTokoPerCustomerDailyRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtPenjualanTokoPerCustomerDailyRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtPenjualanTokoPerCustomerDailyRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtPenjualanTokoPerCustomerDailyRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtPenjualanTokoPerCustomerMonthlyRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtPenjualanTokoPerCustomerMonthlyRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtPenjualanTokoPerCustomerMonthlyRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtPenjualanTokoPerCustomerMonthlyRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtPenjualanInstalasiDailyRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtPenjualanInstalasiDailyRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtPenjualanInstalasiDailyRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtPenjualanInstalasiDailyRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtPenjualanInstalasiMonthlyRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtPenjualanInstalasiMonthlyRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtPenjualanInstalasiMonthlyRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtPenjualanInstalasiMonthlyRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace dsReportTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class dtReportQuestionnaireTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "dtReportQuestionnaire"
            tableMapping.ColumnMappings.Add("Quest_ID", "Quest_ID")
            tableMapping.ColumnMappings.Add("Description", "Description")
            tableMapping.ColumnMappings.Add("Category", "Category")
            tableMapping.ColumnMappings.Add("Nama", "Nama")
            tableMapping.ColumnMappings.Add("Contact_Person", "Contact_Person")
            tableMapping.ColumnMappings.Add("Respondent_Name", "Respondent_Name")
            tableMapping.ColumnMappings.Add("Quest_Dt", "Quest_Dt")
            tableMapping.ColumnMappings.Add("AverageSection1", "AverageSection1")
            tableMapping.ColumnMappings.Add("AverageSection2", "AverageSection2")
            tableMapping.ColumnMappings.Add("AverageSection3", "AverageSection3")
            tableMapping.ColumnMappings.Add("AverageSection4", "AverageSection4")
            tableMapping.ColumnMappings.Add("AverageSection5", "AverageSection5")
            tableMapping.ColumnMappings.Add("Average", "Average")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MIS.My.MySettings.Default.ConnStr
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_Retrieve_Trans_Questionnaire_Report"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Category", Global.System.Data.SqlDbType.VarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Type", Global.System.Data.SqlDbType.VarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Supp_ID", Global.System.Data.SqlDbType.[Char], 5, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateFrom", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 23, 3, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateTo", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 23, 3, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsReport.dtReportQuestionnaireDataTable, ByVal Category As String, ByVal Type As String, ByVal Supp_ID As String, ByVal DateFrom As Global.System.Nullable(Of Date), ByVal DateTo As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Category Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Category,String)
            End If
            If (Type Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(Type,String)
            End If
            If (Supp_ID Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(Supp_ID,String)
            End If
            If (DateFrom.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(DateFrom.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (DateTo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(DateTo.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal Category As String, ByVal Type As String, ByVal Supp_ID As String, ByVal DateFrom As Global.System.Nullable(Of Date), ByVal DateTo As Global.System.Nullable(Of Date)) As dsReport.dtReportQuestionnaireDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Category Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Category,String)
            End If
            If (Type Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(Type,String)
            End If
            If (Supp_ID Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(Supp_ID,String)
            End If
            If (DateFrom.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(DateFrom.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (DateTo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(DateTo.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As dsReport.dtReportQuestionnaireDataTable = New dsReport.dtReportQuestionnaireDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class dtReportOrderPabrikasiTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "dtReportOrderPabrikasi"
            tableMapping.ColumnMappings.Add("OP_No", "OP_No")
            tableMapping.ColumnMappings.Add("OP_Date", "OP_Date")
            tableMapping.ColumnMappings.Add("Item_ID", "Item_ID")
            tableMapping.ColumnMappings.Add("Item_Name", "Item_Name")
            tableMapping.ColumnMappings.Add("Qty", "Qty")
            tableMapping.ColumnMappings.Add("ST_No", "ST_No")
            tableMapping.ColumnMappings.Add("ST_Date", "ST_Date")
            tableMapping.ColumnMappings.Add("Qty_Jadi", "Qty_Jadi")
            tableMapping.ColumnMappings.Add("Remarks", "Remarks")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MIS.My.MySettings.Default.MICConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_Retrieve_Trans_OrderPabrikasi_Report"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Report_Type", Global.System.Data.SqlDbType.VarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@No", Global.System.Data.SqlDbType.NChar, 9, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Start_Date", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 23, 3, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@End_Date", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 23, 3, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsReport.dtReportOrderPabrikasiDataTable, ByVal Report_Type As String, ByVal No As String, ByVal Start_Date As Global.System.Nullable(Of Date), ByVal End_Date As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Report_Type Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Report_Type,String)
            End If
            If (No Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(No,String)
            End If
            If (Start_Date.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(Start_Date.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (End_Date.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(End_Date.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal Report_Type As String, ByVal No As String, ByVal Start_Date As Global.System.Nullable(Of Date), ByVal End_Date As Global.System.Nullable(Of Date)) As dsReport.dtReportOrderPabrikasiDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Report_Type Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Report_Type,String)
            End If
            If (No Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(No,String)
            End If
            If (Start_Date.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(Start_Date.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (End_Date.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(End_Date.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As dsReport.dtReportOrderPabrikasiDataTable = New dsReport.dtReportOrderPabrikasiDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class dtRetrieve_Report_ProspekOrderTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "dtRetrieve_Report_ProspekOrder"
            tableMapping.ColumnMappings.Add("Survey_Date", "Survey_Date")
            tableMapping.ColumnMappings.Add("Survey_No", "Survey_No")
            tableMapping.ColumnMappings.Add("Nama", "Nama")
            tableMapping.ColumnMappings.Add("PHP_Date", "PHP_Date")
            tableMapping.ColumnMappings.Add("PHP_No", "PHP_No")
            tableMapping.ColumnMappings.Add("Total_PHP", "Total_PHP")
            tableMapping.ColumnMappings.Add("PHM_Date", "PHM_Date")
            tableMapping.ColumnMappings.Add("PHM_No", "PHM_No")
            tableMapping.ColumnMappings.Add("Total_PHM", "Total_PHM")
            tableMapping.ColumnMappings.Add("SPK_Date", "SPK_Date")
            tableMapping.ColumnMappings.Add("SPK_No", "SPK_No")
            tableMapping.ColumnMappings.Add("MoU_No", "MoU_No")
            tableMapping.ColumnMappings.Add("Nilai_Project", "Nilai_Project")
            tableMapping.ColumnMappings.Add("MarketingName", "MarketingName")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MIS.My.MySettings.Default.MICConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_Retrieve_Report_ProspekOrder"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BeginTrans", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 23, 3, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EndTrans", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 23, 3, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsReport.dtRetrieve_Report_ProspekOrderDataTable, ByVal BeginTrans As Global.System.Nullable(Of Date), ByVal EndTrans As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (BeginTrans.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(BeginTrans.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (EndTrans.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(EndTrans.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal BeginTrans As Global.System.Nullable(Of Date), ByVal EndTrans As Global.System.Nullable(Of Date)) As dsReport.dtRetrieve_Report_ProspekOrderDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (BeginTrans.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(BeginTrans.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (EndTrans.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(EndTrans.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As dsReport.dtRetrieve_Report_ProspekOrderDataTable = New dsReport.dtRetrieve_Report_ProspekOrderDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class dtManifoldDataTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "dtManifoldData"
            tableMapping.ColumnMappings.Add("Item_ID", "Item_ID")
            tableMapping.ColumnMappings.Add("Item_Name", "Item_Name")
            tableMapping.ColumnMappings.Add("UOM", "UOM")
            tableMapping.ColumnMappings.Add("Item_Size", "Item_Size")
            tableMapping.ColumnMappings.Add("Item_Type", "Item_Type")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MIS.My.MySettings.Default.MIC
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_Retrieve_Master_Item_Hdr_Manifold"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsReport.dtManifoldDataDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsReport.dtManifoldDataDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsReport.dtManifoldDataDataTable = New dsReport.dtManifoldDataDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class dtPipeToKitchenTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "dtPipeToKitchen"
            tableMapping.ColumnMappings.Add("Item_ID", "Item_ID")
            tableMapping.ColumnMappings.Add("Item_Name", "Item_Name")
            tableMapping.ColumnMappings.Add("UOM", "UOM")
            tableMapping.ColumnMappings.Add("Item_Size", "Item_Size")
            tableMapping.ColumnMappings.Add("Item_Type", "Item_Type")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MIS.My.MySettings.Default.MIC
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_Retrieve_Master_Item_Hdr_PipeToKitchen"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsReport.dtPipeToKitchenDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsReport.dtPipeToKitchenDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsReport.dtPipeToKitchenDataTable = New dsReport.dtPipeToKitchenDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class dtSupportingMaterialTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "dtSupportingMaterial"
            tableMapping.ColumnMappings.Add("Item_ID", "Item_ID")
            tableMapping.ColumnMappings.Add("Item_Name", "Item_Name")
            tableMapping.ColumnMappings.Add("UOM", "UOM")
            tableMapping.ColumnMappings.Add("Item_Size", "Item_Size")
            tableMapping.ColumnMappings.Add("Item_Type", "Item_Type")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MIS.My.MySettings.Default.MIC
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_Retrieve_Master_Item_Hdr_SupportingMaterial"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsReport.dtSupportingMaterialDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsReport.dtSupportingMaterialDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsReport.dtSupportingMaterialDataTable = New dsReport.dtSupportingMaterialDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class dtTitikApiTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "dtTitikApi"
            tableMapping.ColumnMappings.Add("Item_ID", "Item_ID")
            tableMapping.ColumnMappings.Add("Item_Name", "Item_Name")
            tableMapping.ColumnMappings.Add("UOM", "UOM")
            tableMapping.ColumnMappings.Add("Item_Size", "Item_Size")
            tableMapping.ColumnMappings.Add("Item_Type", "Item_Type")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MIS.My.MySettings.Default.MIC
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_Retrieve_Master_Item_Hdr_TitikApi"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsReport.dtTitikApiDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsReport.dtTitikApiDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsReport.dtTitikApiDataTable = New dsReport.dtTitikApiDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Trans_MoUTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Trans_MoU"
            tableMapping.ColumnMappings.Add("MoU_ID", "MoU_ID")
            tableMapping.ColumnMappings.Add("PHM_No", "PHM_No")
            tableMapping.ColumnMappings.Add("SeqNum", "SeqNum")
            tableMapping.ColumnMappings.Add("Mou_Date", "Mou_Date")
            tableMapping.ColumnMappings.Add("Contract_date", "Contract_date")
            tableMapping.ColumnMappings.Add("Company", "Company")
            tableMapping.ColumnMappings.Add("Pihak1_name", "Pihak1_name")
            tableMapping.ColumnMappings.Add("Pihak1_Jabatan", "Pihak1_Jabatan")
            tableMapping.ColumnMappings.Add("Pihak1_Company", "Pihak1_Company")
            tableMapping.ColumnMappings.Add("Pihak1_Alamat", "Pihak1_Alamat")
            tableMapping.ColumnMappings.Add("Pihak2_nama", "Pihak2_nama")
            tableMapping.ColumnMappings.Add("Pihak2_Jabatan", "Pihak2_Jabatan")
            tableMapping.ColumnMappings.Add("Pihak2_Company", "Pihak2_Company")
            tableMapping.ColumnMappings.Add("Pihak2_Alamat", "Pihak2_Alamat")
            tableMapping.ColumnMappings.Add("Pasal11_Pekerjaan", "Pasal11_Pekerjaan")
            tableMapping.ColumnMappings.Add("Pasal13_Kerjaan", "Pasal13_Kerjaan")
            tableMapping.ColumnMappings.Add("Pasal13_meliputi", "Pasal13_meliputi")
            tableMapping.ColumnMappings.Add("Pasal14_garansi", "Pasal14_garansi")
            tableMapping.ColumnMappings.Add("Pasal41_DP", "Pasal41_DP")
            tableMapping.ColumnMappings.Add("Pasal51_sebesar", "Pasal51_sebesar")
            tableMapping.ColumnMappings.Add("Pasal61_wktperngerjaan", "Pasal61_wktperngerjaan")
            tableMapping.ColumnMappings.Add("Pasal61_From", "Pasal61_From")
            tableMapping.ColumnMappings.Add("Pasal61_To", "Pasal61_To")
            tableMapping.ColumnMappings.Add("Pasal61_untuk", "Pasal61_untuk")
            tableMapping.ColumnMappings.Add("Pasal71_hari", "Pasal71_hari")
            tableMapping.ColumnMappings.Add("Print_Total", "Print_Total")
            tableMapping.ColumnMappings.Add("Status_ID", "Status_ID")
            tableMapping.ColumnMappings.Add("id_created", "id_created")
            tableMapping.ColumnMappings.Add("dt_created", "dt_created")
            tableMapping.ColumnMappings.Add("id_lastupdated", "id_lastupdated")
            tableMapping.ColumnMappings.Add("dt_lastupdated", "dt_lastupdated")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [Trans_MoU] WHERE (([MoU_ID] = @Original_MoU_ID) AND ([PHM_No] = @Ori"& _ 
                "ginal_PHM_No) AND ([SeqNum] = @Original_SeqNum) AND ([Mou_Date] = @Original_Mou_"& _ 
                "Date) AND ([Contract_date] = @Original_Contract_date) AND ([Company] = @Original"& _ 
                "_Company) AND ([Pihak1_name] = @Original_Pihak1_name) AND ([Pihak1_Jabatan] = @O"& _ 
                "riginal_Pihak1_Jabatan) AND ([Pihak1_Company] = @Original_Pihak1_Company) AND (["& _ 
                "Pihak1_Alamat] = @Original_Pihak1_Alamat) AND ([Pihak2_nama] = @Original_Pihak2_"& _ 
                "nama) AND ([Pihak2_Jabatan] = @Original_Pihak2_Jabatan) AND ([Pihak2_Company] = "& _ 
                "@Original_Pihak2_Company) AND ([Pihak2_Alamat] = @Original_Pihak2_Alamat) AND (["& _ 
                "Pasal11_Pekerjaan] = @Original_Pasal11_Pekerjaan) AND ([Pasal13_Kerjaan] = @Orig"& _ 
                "inal_Pasal13_Kerjaan) AND ([Pasal13_meliputi] = @Original_Pasal13_meliputi) AND "& _ 
                "([Pasal14_garansi] = @Original_Pasal14_garansi) AND ([Pasal41_DP] = @Original_Pa"& _ 
                "sal41_DP) AND ([Pasal51_sebesar] = @Original_Pasal51_sebesar) AND ([Pasal61_wktp"& _ 
                "erngerjaan] = @Original_Pasal61_wktperngerjaan) AND ([Pasal61_From] = @Original_"& _ 
                "Pasal61_From) AND ([Pasal61_To] = @Original_Pasal61_To) AND ([Pasal61_untuk] = @"& _ 
                "Original_Pasal61_untuk) AND ([Pasal71_hari] = @Original_Pasal71_hari) AND ([Prin"& _ 
                "t_Total] = @Original_Print_Total) AND ([Status_ID] = @Original_Status_ID) AND (["& _ 
                "id_created] = @Original_id_created) AND ([dt_created] = @Original_dt_created) AN"& _ 
                "D ([id_lastupdated] = @Original_id_lastupdated) AND ([dt_lastupdated] = @Origina"& _ 
                "l_dt_lastupdated))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MoU_ID", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MoU_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PHM_No", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PHM_No", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SeqNum", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SeqNum", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Mou_Date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Mou_Date", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Contract_date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Contract_date", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Company", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Company", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Pihak1_name", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pihak1_name", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Pihak1_Jabatan", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pihak1_Jabatan", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Pihak1_Company", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pihak1_Company", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Pihak1_Alamat", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pihak1_Alamat", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Pihak2_nama", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pihak2_nama", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Pihak2_Jabatan", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pihak2_Jabatan", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Pihak2_Company", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pihak2_Company", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Pihak2_Alamat", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pihak2_Alamat", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Pasal11_Pekerjaan", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pasal11_Pekerjaan", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Pasal13_Kerjaan", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pasal13_Kerjaan", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Pasal13_meliputi", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pasal13_meliputi", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Pasal14_garansi", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pasal14_garansi", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Pasal41_DP", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "Pasal41_DP", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Pasal51_sebesar", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "Pasal51_sebesar", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Pasal61_wktperngerjaan", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pasal61_wktperngerjaan", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Pasal61_From", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pasal61_From", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Pasal61_To", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pasal61_To", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Pasal61_untuk", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pasal61_untuk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Pasal71_hari", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pasal71_hari", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Print_Total", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Print_Total", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Status_ID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Status_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_id_created", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "id_created", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_dt_created", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dt_created", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_id_lastupdated", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "id_lastupdated", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_dt_lastupdated", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dt_lastupdated", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [Trans_MoU] ([MoU_ID], [PHM_No], [SeqNum], [Mou_Date], [Contract_date"& _ 
                "], [Company], [Pihak1_name], [Pihak1_Jabatan], [Pihak1_Company], [Pihak1_Alamat]"& _ 
                ", [Pihak2_nama], [Pihak2_Jabatan], [Pihak2_Company], [Pihak2_Alamat], [Pasal11_P"& _ 
                "ekerjaan], [Pasal13_Kerjaan], [Pasal13_meliputi], [Pasal14_garansi], [Pasal41_DP"& _ 
                "], [Pasal51_sebesar], [Pasal61_wktperngerjaan], [Pasal61_From], [Pasal61_To], [P"& _ 
                "asal61_untuk], [Pasal71_hari], [Print_Total], [Status_ID], [id_created], [dt_cre"& _ 
                "ated], [id_lastupdated], [dt_lastupdated]) VALUES (@MoU_ID, @PHM_No, @SeqNum, @M"& _ 
                "ou_Date, @Contract_date, @Company, @Pihak1_name, @Pihak1_Jabatan, @Pihak1_Compan"& _ 
                "y, @Pihak1_Alamat, @Pihak2_nama, @Pihak2_Jabatan, @Pihak2_Company, @Pihak2_Alama"& _ 
                "t, @Pasal11_Pekerjaan, @Pasal13_Kerjaan, @Pasal13_meliputi, @Pasal14_garansi, @P"& _ 
                "asal41_DP, @Pasal51_sebesar, @Pasal61_wktperngerjaan, @Pasal61_From, @Pasal61_To"& _ 
                ", @Pasal61_untuk, @Pasal71_hari, @Print_Total, @Status_ID, @id_created, @dt_crea"& _ 
                "ted, @id_lastupdated, @dt_lastupdated);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT MoU_ID, PHM_No, SeqNum, Mou_Date"& _ 
                ", Contract_date, Company, Pihak1_name, Pihak1_Jabatan, Pihak1_Company, Pihak1_Al"& _ 
                "amat, Pihak2_nama, Pihak2_Jabatan, Pihak2_Company, Pihak2_Alamat, Pasal11_Pekerj"& _ 
                "aan, Pasal13_Kerjaan, Pasal13_meliputi, Pasal14_garansi, Pasal41_DP, Pasal51_seb"& _ 
                "esar, Pasal61_wktperngerjaan, Pasal61_From, Pasal61_To, Pasal61_untuk, Pasal71_h"& _ 
                "ari, Print_Total, Status_ID, id_created, dt_created, id_lastupdated, dt_lastupda"& _ 
                "ted FROM Trans_MoU WHERE (MoU_ID = @MoU_ID) AND (PHM_No = @PHM_No) AND (SeqNum ="& _ 
                " @SeqNum)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MoU_ID", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MoU_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PHM_No", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PHM_No", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SeqNum", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SeqNum", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Mou_Date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Mou_Date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Contract_date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Contract_date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Company", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Company", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Pihak1_name", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pihak1_name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Pihak1_Jabatan", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pihak1_Jabatan", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Pihak1_Company", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pihak1_Company", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Pihak1_Alamat", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pihak1_Alamat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Pihak2_nama", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pihak2_nama", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Pihak2_Jabatan", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pihak2_Jabatan", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Pihak2_Company", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pihak2_Company", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Pihak2_Alamat", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pihak2_Alamat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Pasal11_Pekerjaan", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pasal11_Pekerjaan", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Pasal13_Kerjaan", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pasal13_Kerjaan", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Pasal13_meliputi", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pasal13_meliputi", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Pasal14_garansi", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pasal14_garansi", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Pasal41_DP", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "Pasal41_DP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Pasal51_sebesar", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "Pasal51_sebesar", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Pasal61_wktperngerjaan", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pasal61_wktperngerjaan", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Pasal61_From", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pasal61_From", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Pasal61_To", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pasal61_To", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Pasal61_untuk", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pasal61_untuk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Pasal71_hari", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pasal71_hari", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Print_Total", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Print_Total", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Status_ID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Status_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@id_created", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "id_created", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dt_created", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dt_created", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@id_lastupdated", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "id_lastupdated", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dt_lastupdated", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dt_lastupdated", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [Trans_MoU] SET [MoU_ID] = @MoU_ID, [PHM_No] = @PHM_No, [SeqNum] = @SeqNum"& _ 
                ", [Mou_Date] = @Mou_Date, [Contract_date] = @Contract_date, [Company] = @Company"& _ 
                ", [Pihak1_name] = @Pihak1_name, [Pihak1_Jabatan] = @Pihak1_Jabatan, [Pihak1_Comp"& _ 
                "any] = @Pihak1_Company, [Pihak1_Alamat] = @Pihak1_Alamat, [Pihak2_nama] = @Pihak"& _ 
                "2_nama, [Pihak2_Jabatan] = @Pihak2_Jabatan, [Pihak2_Company] = @Pihak2_Company, "& _ 
                "[Pihak2_Alamat] = @Pihak2_Alamat, [Pasal11_Pekerjaan] = @Pasal11_Pekerjaan, [Pas"& _ 
                "al13_Kerjaan] = @Pasal13_Kerjaan, [Pasal13_meliputi] = @Pasal13_meliputi, [Pasal"& _ 
                "14_garansi] = @Pasal14_garansi, [Pasal41_DP] = @Pasal41_DP, [Pasal51_sebesar] = "& _ 
                "@Pasal51_sebesar, [Pasal61_wktperngerjaan] = @Pasal61_wktperngerjaan, [Pasal61_F"& _ 
                "rom] = @Pasal61_From, [Pasal61_To] = @Pasal61_To, [Pasal61_untuk] = @Pasal61_unt"& _ 
                "uk, [Pasal71_hari] = @Pasal71_hari, [Print_Total] = @Print_Total, [Status_ID] = "& _ 
                "@Status_ID, [id_created] = @id_created, [dt_created] = @dt_created, [id_lastupda"& _ 
                "ted] = @id_lastupdated, [dt_lastupdated] = @dt_lastupdated WHERE (([MoU_ID] = @O"& _ 
                "riginal_MoU_ID) AND ([PHM_No] = @Original_PHM_No) AND ([SeqNum] = @Original_SeqN"& _ 
                "um) AND ([Mou_Date] = @Original_Mou_Date) AND ([Contract_date] = @Original_Contr"& _ 
                "act_date) AND ([Company] = @Original_Company) AND ([Pihak1_name] = @Original_Pih"& _ 
                "ak1_name) AND ([Pihak1_Jabatan] = @Original_Pihak1_Jabatan) AND ([Pihak1_Company"& _ 
                "] = @Original_Pihak1_Company) AND ([Pihak1_Alamat] = @Original_Pihak1_Alamat) AN"& _ 
                "D ([Pihak2_nama] = @Original_Pihak2_nama) AND ([Pihak2_Jabatan] = @Original_Piha"& _ 
                "k2_Jabatan) AND ([Pihak2_Company] = @Original_Pihak2_Company) AND ([Pihak2_Alama"& _ 
                "t] = @Original_Pihak2_Alamat) AND ([Pasal11_Pekerjaan] = @Original_Pasal11_Peker"& _ 
                "jaan) AND ([Pasal13_Kerjaan] = @Original_Pasal13_Kerjaan) AND ([Pasal13_meliputi"& _ 
                "] = @Original_Pasal13_meliputi) AND ([Pasal14_garansi] = @Original_Pasal14_garan"& _ 
                "si) AND ([Pasal41_DP] = @Original_Pasal41_DP) AND ([Pasal51_sebesar] = @Original"& _ 
                "_Pasal51_sebesar) AND ([Pasal61_wktperngerjaan] = @Original_Pasal61_wktperngerja"& _ 
                "an) AND ([Pasal61_From] = @Original_Pasal61_From) AND ([Pasal61_To] = @Original_"& _ 
                "Pasal61_To) AND ([Pasal61_untuk] = @Original_Pasal61_untuk) AND ([Pasal71_hari] "& _ 
                "= @Original_Pasal71_hari) AND ([Print_Total] = @Original_Print_Total) AND ([Stat"& _ 
                "us_ID] = @Original_Status_ID) AND ([id_created] = @Original_id_created) AND ([dt"& _ 
                "_created] = @Original_dt_created) AND ([id_lastupdated] = @Original_id_lastupdat"& _ 
                "ed) AND ([dt_lastupdated] = @Original_dt_lastupdated));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT MoU_ID, PHM_No, "& _ 
                "SeqNum, Mou_Date, Contract_date, Company, Pihak1_name, Pihak1_Jabatan, Pihak1_Co"& _ 
                "mpany, Pihak1_Alamat, Pihak2_nama, Pihak2_Jabatan, Pihak2_Company, Pihak2_Alamat"& _ 
                ", Pasal11_Pekerjaan, Pasal13_Kerjaan, Pasal13_meliputi, Pasal14_garansi, Pasal41"& _ 
                "_DP, Pasal51_sebesar, Pasal61_wktperngerjaan, Pasal61_From, Pasal61_To, Pasal61_"& _ 
                "untuk, Pasal71_hari, Print_Total, Status_ID, id_created, dt_created, id_lastupda"& _ 
                "ted, dt_lastupdated FROM Trans_MoU WHERE (MoU_ID = @MoU_ID) AND (PHM_No = @PHM_N"& _ 
                "o) AND (SeqNum = @SeqNum)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MoU_ID", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MoU_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PHM_No", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PHM_No", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SeqNum", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SeqNum", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Mou_Date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Mou_Date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Contract_date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Contract_date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Company", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Company", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Pihak1_name", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pihak1_name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Pihak1_Jabatan", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pihak1_Jabatan", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Pihak1_Company", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pihak1_Company", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Pihak1_Alamat", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pihak1_Alamat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Pihak2_nama", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pihak2_nama", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Pihak2_Jabatan", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pihak2_Jabatan", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Pihak2_Company", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pihak2_Company", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Pihak2_Alamat", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pihak2_Alamat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Pasal11_Pekerjaan", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pasal11_Pekerjaan", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Pasal13_Kerjaan", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pasal13_Kerjaan", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Pasal13_meliputi", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pasal13_meliputi", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Pasal14_garansi", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pasal14_garansi", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Pasal41_DP", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "Pasal41_DP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Pasal51_sebesar", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "Pasal51_sebesar", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Pasal61_wktperngerjaan", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pasal61_wktperngerjaan", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Pasal61_From", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pasal61_From", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Pasal61_To", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pasal61_To", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Pasal61_untuk", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pasal61_untuk", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Pasal71_hari", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pasal71_hari", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Print_Total", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Print_Total", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Status_ID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Status_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@id_created", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "id_created", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dt_created", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dt_created", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@id_lastupdated", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "id_lastupdated", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dt_lastupdated", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dt_lastupdated", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MoU_ID", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MoU_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PHM_No", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PHM_No", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SeqNum", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SeqNum", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Mou_Date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Mou_Date", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Contract_date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Contract_date", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Company", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Company", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Pihak1_name", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pihak1_name", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Pihak1_Jabatan", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pihak1_Jabatan", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Pihak1_Company", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pihak1_Company", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Pihak1_Alamat", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pihak1_Alamat", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Pihak2_nama", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pihak2_nama", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Pihak2_Jabatan", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pihak2_Jabatan", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Pihak2_Company", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pihak2_Company", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Pihak2_Alamat", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pihak2_Alamat", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Pasal11_Pekerjaan", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pasal11_Pekerjaan", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Pasal13_Kerjaan", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pasal13_Kerjaan", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Pasal13_meliputi", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pasal13_meliputi", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Pasal14_garansi", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pasal14_garansi", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Pasal41_DP", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "Pasal41_DP", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Pasal51_sebesar", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "Pasal51_sebesar", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Pasal61_wktperngerjaan", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pasal61_wktperngerjaan", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Pasal61_From", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pasal61_From", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Pasal61_To", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pasal61_To", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Pasal61_untuk", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pasal61_untuk", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Pasal71_hari", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pasal71_hari", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Print_Total", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Print_Total", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Status_ID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Status_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_id_created", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "id_created", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_dt_created", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dt_created", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_id_lastupdated", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "id_lastupdated", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_dt_lastupdated", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dt_lastupdated", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MIS.My.MySettings.Default.ConnStr
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "Select * from Trans_MoU"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsReport.Trans_MoUDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsReport.Trans_MoUDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsReport.Trans_MoUDataTable = New dsReport.Trans_MoUDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsReport.Trans_MoUDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsReport) As Integer
            Return Me.Adapter.Update(dataSet, "Trans_MoU")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_MoU_ID As String,  _
                    ByVal Original_PHM_No As String,  _
                    ByVal Original_SeqNum As Integer,  _
                    ByVal Original_Mou_Date As Date,  _
                    ByVal Original_Contract_date As Date,  _
                    ByVal Original_Company As String,  _
                    ByVal Original_Pihak1_name As String,  _
                    ByVal Original_Pihak1_Jabatan As String,  _
                    ByVal Original_Pihak1_Company As String,  _
                    ByVal Original_Pihak1_Alamat As String,  _
                    ByVal Original_Pihak2_nama As String,  _
                    ByVal Original_Pihak2_Jabatan As String,  _
                    ByVal Original_Pihak2_Company As String,  _
                    ByVal Original_Pihak2_Alamat As String,  _
                    ByVal Original_Pasal11_Pekerjaan As String,  _
                    ByVal Original_Pasal13_Kerjaan As String,  _
                    ByVal Original_Pasal13_meliputi As String,  _
                    ByVal Original_Pasal14_garansi As String,  _
                    ByVal Original_Pasal41_DP As Decimal,  _
                    ByVal Original_Pasal51_sebesar As Decimal,  _
                    ByVal Original_Pasal61_wktperngerjaan As String,  _
                    ByVal Original_Pasal61_From As Date,  _
                    ByVal Original_Pasal61_To As Date,  _
                    ByVal Original_Pasal61_untuk As String,  _
                    ByVal Original_Pasal71_hari As Integer,  _
                    ByVal Original_Print_Total As Integer,  _
                    ByVal Original_Status_ID As String,  _
                    ByVal Original_id_created As String,  _
                    ByVal Original_dt_created As Date,  _
                    ByVal Original_id_lastupdated As String,  _
                    ByVal Original_dt_lastupdated As Date) As Integer
            If (Original_MoU_ID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MoU_ID")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_MoU_ID,String)
            End If
            If (Original_PHM_No Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PHM_No")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_PHM_No,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_SeqNum,Integer)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_Mou_Date,Date)
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_Contract_date,Date)
            If (Original_Company Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Company")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_Company,String)
            End If
            If (Original_Pihak1_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Pihak1_name")
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_Pihak1_name,String)
            End If
            If (Original_Pihak1_Jabatan Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Pihak1_Jabatan")
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_Pihak1_Jabatan,String)
            End If
            If (Original_Pihak1_Company Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Pihak1_Company")
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_Pihak1_Company,String)
            End If
            If (Original_Pihak1_Alamat Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Pihak1_Alamat")
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_Pihak1_Alamat,String)
            End If
            If (Original_Pihak2_nama Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Pihak2_nama")
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_Pihak2_nama,String)
            End If
            If (Original_Pihak2_Jabatan Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Pihak2_Jabatan")
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_Pihak2_Jabatan,String)
            End If
            If (Original_Pihak2_Company Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Pihak2_Company")
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_Pihak2_Company,String)
            End If
            If (Original_Pihak2_Alamat Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Pihak2_Alamat")
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_Pihak2_Alamat,String)
            End If
            If (Original_Pasal11_Pekerjaan Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Pasal11_Pekerjaan")
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_Pasal11_Pekerjaan,String)
            End If
            If (Original_Pasal13_Kerjaan Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Pasal13_Kerjaan")
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_Pasal13_Kerjaan,String)
            End If
            If (Original_Pasal13_meliputi Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Pasal13_meliputi")
            Else
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_Pasal13_meliputi,String)
            End If
            If (Original_Pasal14_garansi Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Pasal14_garansi")
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_Pasal14_garansi,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_Pasal41_DP,Decimal)
            Me.Adapter.DeleteCommand.Parameters(19).Value = CType(Original_Pasal51_sebesar,Decimal)
            If (Original_Pasal61_wktperngerjaan Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Pasal61_wktperngerjaan")
            Else
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_Pasal61_wktperngerjaan,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(21).Value = CType(Original_Pasal61_From,Date)
            Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_Pasal61_To,Date)
            If (Original_Pasal61_untuk Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Pasal61_untuk")
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(Original_Pasal61_untuk,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_Pasal71_hari,Integer)
            Me.Adapter.DeleteCommand.Parameters(25).Value = CType(Original_Print_Total,Integer)
            If (Original_Status_ID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Status_ID")
            Else
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_Status_ID,String)
            End If
            If (Original_id_created Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_id_created")
            Else
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(Original_id_created,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_dt_created,Date)
            If (Original_id_lastupdated Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_id_lastupdated")
            Else
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(Original_id_lastupdated,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(30).Value = CType(Original_dt_lastupdated,Date)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal MoU_ID As String,  _
                    ByVal PHM_No As String,  _
                    ByVal SeqNum As Integer,  _
                    ByVal Mou_Date As Date,  _
                    ByVal Contract_date As Date,  _
                    ByVal Company As String,  _
                    ByVal Pihak1_name As String,  _
                    ByVal Pihak1_Jabatan As String,  _
                    ByVal Pihak1_Company As String,  _
                    ByVal Pihak1_Alamat As String,  _
                    ByVal Pihak2_nama As String,  _
                    ByVal Pihak2_Jabatan As String,  _
                    ByVal Pihak2_Company As String,  _
                    ByVal Pihak2_Alamat As String,  _
                    ByVal Pasal11_Pekerjaan As String,  _
                    ByVal Pasal13_Kerjaan As String,  _
                    ByVal Pasal13_meliputi As String,  _
                    ByVal Pasal14_garansi As String,  _
                    ByVal Pasal41_DP As Decimal,  _
                    ByVal Pasal51_sebesar As Decimal,  _
                    ByVal Pasal61_wktperngerjaan As String,  _
                    ByVal Pasal61_From As Date,  _
                    ByVal Pasal61_To As Date,  _
                    ByVal Pasal61_untuk As String,  _
                    ByVal Pasal71_hari As Integer,  _
                    ByVal Print_Total As Integer,  _
                    ByVal Status_ID As String,  _
                    ByVal id_created As String,  _
                    ByVal dt_created As Date,  _
                    ByVal id_lastupdated As String,  _
                    ByVal dt_lastupdated As Date) As Integer
            If (MoU_ID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MoU_ID")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(MoU_ID,String)
            End If
            If (PHM_No Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PHM_No")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(PHM_No,String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(SeqNum,Integer)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(Mou_Date,Date)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(Contract_date,Date)
            If (Company Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Company")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Company,String)
            End If
            If (Pihak1_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Pihak1_name")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Pihak1_name,String)
            End If
            If (Pihak1_Jabatan Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Pihak1_Jabatan")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Pihak1_Jabatan,String)
            End If
            If (Pihak1_Company Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Pihak1_Company")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(Pihak1_Company,String)
            End If
            If (Pihak1_Alamat Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Pihak1_Alamat")
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(Pihak1_Alamat,String)
            End If
            If (Pihak2_nama Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Pihak2_nama")
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(Pihak2_nama,String)
            End If
            If (Pihak2_Jabatan Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Pihak2_Jabatan")
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(Pihak2_Jabatan,String)
            End If
            If (Pihak2_Company Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Pihak2_Company")
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(Pihak2_Company,String)
            End If
            If (Pihak2_Alamat Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Pihak2_Alamat")
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(Pihak2_Alamat,String)
            End If
            If (Pasal11_Pekerjaan Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Pasal11_Pekerjaan")
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(Pasal11_Pekerjaan,String)
            End If
            If (Pasal13_Kerjaan Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Pasal13_Kerjaan")
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(Pasal13_Kerjaan,String)
            End If
            If (Pasal13_meliputi Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Pasal13_meliputi")
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(Pasal13_meliputi,String)
            End If
            If (Pasal14_garansi Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Pasal14_garansi")
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(Pasal14_garansi,String)
            End If
            Me.Adapter.InsertCommand.Parameters(18).Value = CType(Pasal41_DP,Decimal)
            Me.Adapter.InsertCommand.Parameters(19).Value = CType(Pasal51_sebesar,Decimal)
            If (Pasal61_wktperngerjaan Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Pasal61_wktperngerjaan")
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(Pasal61_wktperngerjaan,String)
            End If
            Me.Adapter.InsertCommand.Parameters(21).Value = CType(Pasal61_From,Date)
            Me.Adapter.InsertCommand.Parameters(22).Value = CType(Pasal61_To,Date)
            If (Pasal61_untuk Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Pasal61_untuk")
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(Pasal61_untuk,String)
            End If
            Me.Adapter.InsertCommand.Parameters(24).Value = CType(Pasal71_hari,Integer)
            Me.Adapter.InsertCommand.Parameters(25).Value = CType(Print_Total,Integer)
            If (Status_ID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Status_ID")
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(Status_ID,String)
            End If
            If (id_created Is Nothing) Then
                Throw New Global.System.ArgumentNullException("id_created")
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(id_created,String)
            End If
            Me.Adapter.InsertCommand.Parameters(28).Value = CType(dt_created,Date)
            If (id_lastupdated Is Nothing) Then
                Throw New Global.System.ArgumentNullException("id_lastupdated")
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(id_lastupdated,String)
            End If
            Me.Adapter.InsertCommand.Parameters(30).Value = CType(dt_lastupdated,Date)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal MoU_ID As String,  _
                    ByVal PHM_No As String,  _
                    ByVal SeqNum As Integer,  _
                    ByVal Mou_Date As Date,  _
                    ByVal Contract_date As Date,  _
                    ByVal Company As String,  _
                    ByVal Pihak1_name As String,  _
                    ByVal Pihak1_Jabatan As String,  _
                    ByVal Pihak1_Company As String,  _
                    ByVal Pihak1_Alamat As String,  _
                    ByVal Pihak2_nama As String,  _
                    ByVal Pihak2_Jabatan As String,  _
                    ByVal Pihak2_Company As String,  _
                    ByVal Pihak2_Alamat As String,  _
                    ByVal Pasal11_Pekerjaan As String,  _
                    ByVal Pasal13_Kerjaan As String,  _
                    ByVal Pasal13_meliputi As String,  _
                    ByVal Pasal14_garansi As String,  _
                    ByVal Pasal41_DP As Decimal,  _
                    ByVal Pasal51_sebesar As Decimal,  _
                    ByVal Pasal61_wktperngerjaan As String,  _
                    ByVal Pasal61_From As Date,  _
                    ByVal Pasal61_To As Date,  _
                    ByVal Pasal61_untuk As String,  _
                    ByVal Pasal71_hari As Integer,  _
                    ByVal Print_Total As Integer,  _
                    ByVal Status_ID As String,  _
                    ByVal id_created As String,  _
                    ByVal dt_created As Date,  _
                    ByVal id_lastupdated As String,  _
                    ByVal dt_lastupdated As Date,  _
                    ByVal Original_MoU_ID As String,  _
                    ByVal Original_PHM_No As String,  _
                    ByVal Original_SeqNum As Integer,  _
                    ByVal Original_Mou_Date As Date,  _
                    ByVal Original_Contract_date As Date,  _
                    ByVal Original_Company As String,  _
                    ByVal Original_Pihak1_name As String,  _
                    ByVal Original_Pihak1_Jabatan As String,  _
                    ByVal Original_Pihak1_Company As String,  _
                    ByVal Original_Pihak1_Alamat As String,  _
                    ByVal Original_Pihak2_nama As String,  _
                    ByVal Original_Pihak2_Jabatan As String,  _
                    ByVal Original_Pihak2_Company As String,  _
                    ByVal Original_Pihak2_Alamat As String,  _
                    ByVal Original_Pasal11_Pekerjaan As String,  _
                    ByVal Original_Pasal13_Kerjaan As String,  _
                    ByVal Original_Pasal13_meliputi As String,  _
                    ByVal Original_Pasal14_garansi As String,  _
                    ByVal Original_Pasal41_DP As Decimal,  _
                    ByVal Original_Pasal51_sebesar As Decimal,  _
                    ByVal Original_Pasal61_wktperngerjaan As String,  _
                    ByVal Original_Pasal61_From As Date,  _
                    ByVal Original_Pasal61_To As Date,  _
                    ByVal Original_Pasal61_untuk As String,  _
                    ByVal Original_Pasal71_hari As Integer,  _
                    ByVal Original_Print_Total As Integer,  _
                    ByVal Original_Status_ID As String,  _
                    ByVal Original_id_created As String,  _
                    ByVal Original_dt_created As Date,  _
                    ByVal Original_id_lastupdated As String,  _
                    ByVal Original_dt_lastupdated As Date) As Integer
            If (MoU_ID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MoU_ID")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(MoU_ID,String)
            End If
            If (PHM_No Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PHM_No")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(PHM_No,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(SeqNum,Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Mou_Date,Date)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Contract_date,Date)
            If (Company Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Company")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Company,String)
            End If
            If (Pihak1_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Pihak1_name")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Pihak1_name,String)
            End If
            If (Pihak1_Jabatan Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Pihak1_Jabatan")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Pihak1_Jabatan,String)
            End If
            If (Pihak1_Company Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Pihak1_Company")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Pihak1_Company,String)
            End If
            If (Pihak1_Alamat Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Pihak1_Alamat")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Pihak1_Alamat,String)
            End If
            If (Pihak2_nama Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Pihak2_nama")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Pihak2_nama,String)
            End If
            If (Pihak2_Jabatan Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Pihak2_Jabatan")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Pihak2_Jabatan,String)
            End If
            If (Pihak2_Company Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Pihak2_Company")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Pihak2_Company,String)
            End If
            If (Pihak2_Alamat Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Pihak2_Alamat")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Pihak2_Alamat,String)
            End If
            If (Pasal11_Pekerjaan Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Pasal11_Pekerjaan")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Pasal11_Pekerjaan,String)
            End If
            If (Pasal13_Kerjaan Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Pasal13_Kerjaan")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Pasal13_Kerjaan,String)
            End If
            If (Pasal13_meliputi Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Pasal13_meliputi")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Pasal13_meliputi,String)
            End If
            If (Pasal14_garansi Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Pasal14_garansi")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Pasal14_garansi,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Pasal41_DP,Decimal)
            Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Pasal51_sebesar,Decimal)
            If (Pasal61_wktperngerjaan Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Pasal61_wktperngerjaan")
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Pasal61_wktperngerjaan,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Pasal61_From,Date)
            Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Pasal61_To,Date)
            If (Pasal61_untuk Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Pasal61_untuk")
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Pasal61_untuk,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Pasal71_hari,Integer)
            Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Print_Total,Integer)
            If (Status_ID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Status_ID")
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Status_ID,String)
            End If
            If (id_created Is Nothing) Then
                Throw New Global.System.ArgumentNullException("id_created")
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(id_created,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(28).Value = CType(dt_created,Date)
            If (id_lastupdated Is Nothing) Then
                Throw New Global.System.ArgumentNullException("id_lastupdated")
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(id_lastupdated,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(30).Value = CType(dt_lastupdated,Date)
            If (Original_MoU_ID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MoU_ID")
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_MoU_ID,String)
            End If
            If (Original_PHM_No Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PHM_No")
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_PHM_No,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_SeqNum,Integer)
            Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_Mou_Date,Date)
            Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_Contract_date,Date)
            If (Original_Company Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Company")
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_Company,String)
            End If
            If (Original_Pihak1_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Pihak1_name")
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_Pihak1_name,String)
            End If
            If (Original_Pihak1_Jabatan Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Pihak1_Jabatan")
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Original_Pihak1_Jabatan,String)
            End If
            If (Original_Pihak1_Company Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Pihak1_Company")
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_Pihak1_Company,String)
            End If
            If (Original_Pihak1_Alamat Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Pihak1_Alamat")
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(Original_Pihak1_Alamat,String)
            End If
            If (Original_Pihak2_nama Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Pihak2_nama")
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original_Pihak2_nama,String)
            End If
            If (Original_Pihak2_Jabatan Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Pihak2_Jabatan")
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(Original_Pihak2_Jabatan,String)
            End If
            If (Original_Pihak2_Company Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Pihak2_Company")
            Else
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(Original_Pihak2_Company,String)
            End If
            If (Original_Pihak2_Alamat Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Pihak2_Alamat")
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(Original_Pihak2_Alamat,String)
            End If
            If (Original_Pasal11_Pekerjaan Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Pasal11_Pekerjaan")
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(Original_Pasal11_Pekerjaan,String)
            End If
            If (Original_Pasal13_Kerjaan Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Pasal13_Kerjaan")
            Else
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(Original_Pasal13_Kerjaan,String)
            End If
            If (Original_Pasal13_meliputi Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Pasal13_meliputi")
            Else
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(Original_Pasal13_meliputi,String)
            End If
            If (Original_Pasal14_garansi Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Pasal14_garansi")
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(Original_Pasal14_garansi,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(49).Value = CType(Original_Pasal41_DP,Decimal)
            Me.Adapter.UpdateCommand.Parameters(50).Value = CType(Original_Pasal51_sebesar,Decimal)
            If (Original_Pasal61_wktperngerjaan Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Pasal61_wktperngerjaan")
            Else
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(Original_Pasal61_wktperngerjaan,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(52).Value = CType(Original_Pasal61_From,Date)
            Me.Adapter.UpdateCommand.Parameters(53).Value = CType(Original_Pasal61_To,Date)
            If (Original_Pasal61_untuk Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Pasal61_untuk")
            Else
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(Original_Pasal61_untuk,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(55).Value = CType(Original_Pasal71_hari,Integer)
            Me.Adapter.UpdateCommand.Parameters(56).Value = CType(Original_Print_Total,Integer)
            If (Original_Status_ID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Status_ID")
            Else
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(Original_Status_ID,String)
            End If
            If (Original_id_created Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_id_created")
            Else
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(Original_id_created,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(59).Value = CType(Original_dt_created,Date)
            If (Original_id_lastupdated Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_id_lastupdated")
            Else
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(Original_id_lastupdated,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(61).Value = CType(Original_dt_lastupdated,Date)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal Mou_Date As Date,  _
                    ByVal Contract_date As Date,  _
                    ByVal Company As String,  _
                    ByVal Pihak1_name As String,  _
                    ByVal Pihak1_Jabatan As String,  _
                    ByVal Pihak1_Company As String,  _
                    ByVal Pihak1_Alamat As String,  _
                    ByVal Pihak2_nama As String,  _
                    ByVal Pihak2_Jabatan As String,  _
                    ByVal Pihak2_Company As String,  _
                    ByVal Pihak2_Alamat As String,  _
                    ByVal Pasal11_Pekerjaan As String,  _
                    ByVal Pasal13_Kerjaan As String,  _
                    ByVal Pasal13_meliputi As String,  _
                    ByVal Pasal14_garansi As String,  _
                    ByVal Pasal41_DP As Decimal,  _
                    ByVal Pasal51_sebesar As Decimal,  _
                    ByVal Pasal61_wktperngerjaan As String,  _
                    ByVal Pasal61_From As Date,  _
                    ByVal Pasal61_To As Date,  _
                    ByVal Pasal61_untuk As String,  _
                    ByVal Pasal71_hari As Integer,  _
                    ByVal Print_Total As Integer,  _
                    ByVal Status_ID As String,  _
                    ByVal id_created As String,  _
                    ByVal dt_created As Date,  _
                    ByVal id_lastupdated As String,  _
                    ByVal dt_lastupdated As Date,  _
                    ByVal Original_MoU_ID As String,  _
                    ByVal Original_PHM_No As String,  _
                    ByVal Original_SeqNum As Integer,  _
                    ByVal Original_Mou_Date As Date,  _
                    ByVal Original_Contract_date As Date,  _
                    ByVal Original_Company As String,  _
                    ByVal Original_Pihak1_name As String,  _
                    ByVal Original_Pihak1_Jabatan As String,  _
                    ByVal Original_Pihak1_Company As String,  _
                    ByVal Original_Pihak1_Alamat As String,  _
                    ByVal Original_Pihak2_nama As String,  _
                    ByVal Original_Pihak2_Jabatan As String,  _
                    ByVal Original_Pihak2_Company As String,  _
                    ByVal Original_Pihak2_Alamat As String,  _
                    ByVal Original_Pasal11_Pekerjaan As String,  _
                    ByVal Original_Pasal13_Kerjaan As String,  _
                    ByVal Original_Pasal13_meliputi As String,  _
                    ByVal Original_Pasal14_garansi As String,  _
                    ByVal Original_Pasal41_DP As Decimal,  _
                    ByVal Original_Pasal51_sebesar As Decimal,  _
                    ByVal Original_Pasal61_wktperngerjaan As String,  _
                    ByVal Original_Pasal61_From As Date,  _
                    ByVal Original_Pasal61_To As Date,  _
                    ByVal Original_Pasal61_untuk As String,  _
                    ByVal Original_Pasal71_hari As Integer,  _
                    ByVal Original_Print_Total As Integer,  _
                    ByVal Original_Status_ID As String,  _
                    ByVal Original_id_created As String,  _
                    ByVal Original_dt_created As Date,  _
                    ByVal Original_id_lastupdated As String,  _
                    ByVal Original_dt_lastupdated As Date) As Integer
            Return Me.Update(Original_MoU_ID, Original_PHM_No, Original_SeqNum, Mou_Date, Contract_date, Company, Pihak1_name, Pihak1_Jabatan, Pihak1_Company, Pihak1_Alamat, Pihak2_nama, Pihak2_Jabatan, Pihak2_Company, Pihak2_Alamat, Pasal11_Pekerjaan, Pasal13_Kerjaan, Pasal13_meliputi, Pasal14_garansi, Pasal41_DP, Pasal51_sebesar, Pasal61_wktperngerjaan, Pasal61_From, Pasal61_To, Pasal61_untuk, Pasal71_hari, Print_Total, Status_ID, id_created, dt_created, id_lastupdated, dt_lastupdated, Original_MoU_ID, Original_PHM_No, Original_SeqNum, Original_Mou_Date, Original_Contract_date, Original_Company, Original_Pihak1_name, Original_Pihak1_Jabatan, Original_Pihak1_Company, Original_Pihak1_Alamat, Original_Pihak2_nama, Original_Pihak2_Jabatan, Original_Pihak2_Company, Original_Pihak2_Alamat, Original_Pasal11_Pekerjaan, Original_Pasal13_Kerjaan, Original_Pasal13_meliputi, Original_Pasal14_garansi, Original_Pasal41_DP, Original_Pasal51_sebesar, Original_Pasal61_wktperngerjaan, Original_Pasal61_From, Original_Pasal61_To, Original_Pasal61_untuk, Original_Pasal71_hari, Original_Print_Total, Original_Status_ID, Original_id_created, Original_dt_created, Original_id_lastupdated, Original_dt_lastupdated)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_retrieve_DPPbyIDTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_retrieve_DPPbyID"
            tableMapping.ColumnMappings.Add("DPP_No", "DPP_No")
            tableMapping.ColumnMappings.Add("faktur_no", "faktur_no")
            tableMapping.ColumnMappings.Add("tgl_faktur", "tgl_faktur")
            tableMapping.ColumnMappings.Add("tgl_jatuhtempo", "tgl_jatuhtempo")
            tableMapping.ColumnMappings.Add("project_no", "project_no")
            tableMapping.ColumnMappings.Add("customer_name", "customer_name")
            tableMapping.ColumnMappings.Add("salesman", "salesman")
            tableMapping.ColumnMappings.Add("jumlah_uang", "jumlah_uang")
            tableMapping.ColumnMappings.Add("outstanding", "outstanding")
            tableMapping.ColumnMappings.Add("cust_id", "cust_id")
            tableMapping.ColumnMappings.Add("employee_id", "employee_id")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MIS.My.MySettings.Default.ConnStr
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_retrieve_DPPbyID"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DPP", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsReport.sp_retrieve_DPPbyIDDataTable, ByVal DPP As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (DPP Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DPP,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal DPP As String) As dsReport.sp_retrieve_DPPbyIDDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (DPP Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DPP,String)
            End If
            Dim dataTable As dsReport.sp_retrieve_DPPbyIDDataTable = New dsReport.sp_retrieve_DPPbyIDDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class dtInvoicePiutangTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "dtInvoicePiutang"
            tableMapping.ColumnMappings.Add("Faktur_No", "Faktur_No")
            tableMapping.ColumnMappings.Add("Tgl_Faktur", "Tgl_Faktur")
            tableMapping.ColumnMappings.Add("Tgl_JatuhTempo", "Tgl_JatuhTempo")
            tableMapping.ColumnMappings.Add("Faktur_Tipe", "Faktur_Tipe")
            tableMapping.ColumnMappings.Add("Cust_ID", "Cust_ID")
            tableMapping.ColumnMappings.Add("Employee_ID", "Employee_ID")
            tableMapping.ColumnMappings.Add("Project_No", "Project_No")
            tableMapping.ColumnMappings.Add("Jumlah_Uang", "Jumlah_Uang")
            tableMapping.ColumnMappings.Add("Keterangan", "Keterangan")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MIS.My.MySettings.Default.ConnStr
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_Retreive_Trans_Invoice_PiutangRpt"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Faktur", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsReport.dtInvoicePiutangDataTable, ByVal Faktur As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Faktur Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Faktur,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal Faktur As String) As dsReport.dtInvoicePiutangDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Faktur Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Faktur,String)
            End If
            Dim dataTable As dsReport.dtInvoicePiutangDataTable = New dsReport.dtInvoicePiutangDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class dtDaftarPelunasanHutangTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "dtDaftarPelunasanHutang"
            tableMapping.ColumnMappings.Add("DPH_No", "DPH_No")
            tableMapping.ColumnMappings.Add("Supp_ID", "Supp_ID")
            tableMapping.ColumnMappings.Add("Nama", "Nama")
            tableMapping.ColumnMappings.Add("Tgl_Terima_Barang", "Tgl_Terima_Barang")
            tableMapping.ColumnMappings.Add("Faktur_no", "Faktur_no")
            tableMapping.ColumnMappings.Add("SuratJalan_no", "SuratJalan_no")
            tableMapping.ColumnMappings.Add("No_BST", "No_BST")
            tableMapping.ColumnMappings.Add("Jatuh_Tempo", "Jatuh_Tempo")
            tableMapping.ColumnMappings.Add("Outstanding", "Outstanding")
            tableMapping.ColumnMappings.Add("NilaiPO", "NilaiPO")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MIS.My.MySettings.Default.ConnStr
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_GetDaftarPelunasanHutangPrint"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DPH", Global.System.Data.SqlDbType.VarChar, 9, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsReport.dtDaftarPelunasanHutangDataTable, ByVal DPH As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (DPH Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DPH,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal DPH As String) As dsReport.dtDaftarPelunasanHutangDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (DPH Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DPH,String)
            End If
            Dim dataTable As dsReport.dtDaftarPelunasanHutangDataTable = New dsReport.dtDaftarPelunasanHutangDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class dtGLDetailTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "dtGLDetail"
            tableMapping.ColumnMappings.Add("journalDate", "journalDate")
            tableMapping.ColumnMappings.Add("accountid", "accountid")
            tableMapping.ColumnMappings.Add("account_name", "account_name")
            tableMapping.ColumnMappings.Add("notes", "notes")
            tableMapping.ColumnMappings.Add("journalID", "journalID")
            tableMapping.ColumnMappings.Add("refno", "refno")
            tableMapping.ColumnMappings.Add("saldoawal", "saldoawal")
            tableMapping.ColumnMappings.Add("amountDR", "amountDR")
            tableMapping.ColumnMappings.Add("amountCR", "amountCR")
            tableMapping.ColumnMappings.Add("saldoakhir", "saldoakhir")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MIS.My.MySettings.Default.MICConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select journalDate ,accountid , account_name ,notes ,a.journalID , refno  , '' as"& _ 
                " saldoawal , amountDR , amountCR , '' as saldoakhir "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                        fr"& _ 
                "om journalitem a left join journal b "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                        on a.journalID = "& _ 
                "b.journalID "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                        left join master_COA c on a.accountID = c."& _ 
                "account_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                        order by accountid asc "
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsReport.dtGLDetailDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsReport.dtGLDetailDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsReport.dtGLDetailDataTable = New dsReport.dtGLDetailDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class dtReportPOTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "dtReportPO"
            tableMapping.ColumnMappings.Add("PO_Date", "PO_Date")
            tableMapping.ColumnMappings.Add("Supplier_ID", "Supplier_ID")
            tableMapping.ColumnMappings.Add("Nama", "Nama")
            tableMapping.ColumnMappings.Add("TB_No", "TB_No")
            tableMapping.ColumnMappings.Add("PO_No", "PO_No")
            tableMapping.ColumnMappings.Add("TB_Date", "TB_Date")
            tableMapping.ColumnMappings.Add("Warehouse_ID", "Warehouse_ID")
            tableMapping.ColumnMappings.Add("Warehouse_Name", "Warehouse_Name")
            tableMapping.ColumnMappings.Add("Item_ID", "Item_ID")
            tableMapping.ColumnMappings.Add("Item_Name", "Item_Name")
            tableMapping.ColumnMappings.Add("UoM", "UoM")
            tableMapping.ColumnMappings.Add("Qty_Rec", "Qty_Rec")
            tableMapping.ColumnMappings.Add("Price", "Price")
            tableMapping.ColumnMappings.Add("Diskon", "Diskon")
            tableMapping.ColumnMappings.Add("SubTotal", "SubTotal")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MIS.My.MySettings.Default.ConnStr
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_Retrieve_Trans_PO_BasedOnTerimaBrg"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PODate_Fr", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PODate_To", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TBDate_Fr", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TBDate_To", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsReport.dtReportPODataTable, ByVal PODate_Fr As String, ByVal PODate_To As String, ByVal TBDate_Fr As String, ByVal TBDate_To As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (PODate_Fr Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(PODate_Fr,String)
            End If
            If (PODate_To Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(PODate_To,String)
            End If
            If (TBDate_Fr Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(TBDate_Fr,String)
            End If
            If (TBDate_To Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(TBDate_To,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal PODate_Fr As String, ByVal PODate_To As String, ByVal TBDate_Fr As String, ByVal TBDate_To As String) As dsReport.dtReportPODataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (PODate_Fr Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(PODate_Fr,String)
            End If
            If (PODate_To Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(PODate_To,String)
            End If
            If (TBDate_Fr Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(TBDate_Fr,String)
            End If
            If (TBDate_To Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(TBDate_To,String)
            End If
            Dim dataTable As dsReport.dtReportPODataTable = New dsReport.dtReportPODataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class dtPembayaranKartuHutangDSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "dtPembayaranKartuHutangDS"
            tableMapping.ColumnMappings.Add("Tanggal", "Tanggal")
            tableMapping.ColumnMappings.Add("TB_no", "TB_no")
            tableMapping.ColumnMappings.Add("Doc_No", "Doc_No")
            tableMapping.ColumnMappings.Add("saldoawal", "saldoawal")
            tableMapping.ColumnMappings.Add("jumlah_bayar", "jumlah_bayar")
            tableMapping.ColumnMappings.Add("retur", "retur")
            tableMapping.ColumnMappings.Add("potongan", "potongan")
            tableMapping.ColumnMappings.Add("saldoakhir", "saldoakhir")
            tableMapping.ColumnMappings.Add("keterangan", "keterangan")
            tableMapping.ColumnMappings.Add("nama", "nama")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MIS.My.MySettings.Default.ConnStr
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_getPembayaranKartuHutangDS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsReport.dtPembayaranKartuHutangDSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsReport.dtPembayaranKartuHutangDSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsReport.dtPembayaranKartuHutangDSDataTable = New dsReport.dtPembayaranKartuHutangDSDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class dtReportOrderMaintenanceTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "dtReportOrderMaintenance"
            tableMapping.ColumnMappings.Add("OrderMaint_No", "OrderMaint_No")
            tableMapping.ColumnMappings.Add("OrderMaint_dt", "OrderMaint_dt")
            tableMapping.ColumnMappings.Add("Customer", "Customer")
            tableMapping.ColumnMappings.Add("Project_No", "Project_No")
            tableMapping.ColumnMappings.Add("Location", "Location")
            tableMapping.ColumnMappings.Add("PIC", "PIC")
            tableMapping.ColumnMappings.Add("Telepon", "Telepon")
            tableMapping.ColumnMappings.Add("Status", "Status")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MIS.My.MySettings.Default.ConnStr
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_Retrieve_Trans_OrderMaintenance_ForReport"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateFrom", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateTo", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsReport.dtReportOrderMaintenanceDataTable, ByVal DateFrom As String, ByVal DateTo As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (DateFrom Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DateFrom,String)
            End If
            If (DateTo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(DateTo,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal DateFrom As String, ByVal DateTo As String) As dsReport.dtReportOrderMaintenanceDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (DateFrom Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DateFrom,String)
            End If
            If (DateTo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(DateTo,String)
            End If
            Dim dataTable As dsReport.dtReportOrderMaintenanceDataTable = New dsReport.dtReportOrderMaintenanceDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class dtReportBPBTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "dtReportBPB"
            tableMapping.ColumnMappings.Add("BPB_No", "BPB_No")
            tableMapping.ColumnMappings.Add("BPB_Date", "BPB_Date")
            tableMapping.ColumnMappings.Add("Category", "Category")
            tableMapping.ColumnMappings.Add("Ref_No", "Ref_No")
            tableMapping.ColumnMappings.Add("Account_ID", "Account_ID")
            tableMapping.ColumnMappings.Add("Required_Date", "Required_Date")
            tableMapping.ColumnMappings.Add("Status", "Status")
            tableMapping.ColumnMappings.Add("Item_ID", "Item_ID")
            tableMapping.ColumnMappings.Add("Item_Name", "Item_Name")
            tableMapping.ColumnMappings.Add("Qty_Required", "Qty_Required")
            tableMapping.ColumnMappings.Add("Qty_Approved", "Qty_Approved")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MIS.My.MySettings.Default.ConnStr
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_Retrieve_Trans_BPB_ForReport"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateFrom", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateTo", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsReport.dtReportBPBDataTable, ByVal DateFrom As String, ByVal DateTo As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (DateFrom Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DateFrom,String)
            End If
            If (DateTo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(DateTo,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal DateFrom As String, ByVal DateTo As String) As dsReport.dtReportBPBDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (DateFrom Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DateFrom,String)
            End If
            If (DateTo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(DateTo,String)
            End If
            Dim dataTable As dsReport.dtReportBPBDataTable = New dsReport.dtReportBPBDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class dtRetrieveReportRekapPemakaianBahanPerSPKTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "dtRetrieveReportRekapPemakaianBahanPerSPK"
            tableMapping.ColumnMappings.Add("Project_No", "Project_No")
            tableMapping.ColumnMappings.Add("SPK_No", "SPK_No")
            tableMapping.ColumnMappings.Add("SPK_Date", "SPK_Date")
            tableMapping.ColumnMappings.Add("Cust_ID", "Cust_ID")
            tableMapping.ColumnMappings.Add("Nama", "Nama")
            tableMapping.ColumnMappings.Add("Item_ID", "Item_ID")
            tableMapping.ColumnMappings.Add("Item_Name", "Item_Name")
            tableMapping.ColumnMappings.Add("UOM", "UOM")
            tableMapping.ColumnMappings.Add("BPB_Date", "BPB_Date")
            tableMapping.ColumnMappings.Add("QtyPHM", "QtyPHM")
            tableMapping.ColumnMappings.Add("Qty_Approved", "Qty_Approved")
            tableMapping.ColumnMappings.Add("Qty_Pakai", "Qty_Pakai")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MIS.My.MySettings.Default.ConnStr
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_Retrieve_Report_RekapPemakaianBahanPerSPK"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Project_No", Global.System.Data.SqlDbType.VarChar, 11, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPK_No", Global.System.Data.SqlDbType.VarChar, 11, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsReport.dtRetrieveReportRekapPemakaianBahanPerSPKDataTable, ByVal Project_No As String, ByVal SPK_No As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Project_No Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Project_No,String)
            End If
            If (SPK_No Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(SPK_No,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal Project_No As String, ByVal SPK_No As String) As dsReport.dtRetrieveReportRekapPemakaianBahanPerSPKDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Project_No Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Project_No,String)
            End If
            If (SPK_No Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(SPK_No,String)
            End If
            Dim dataTable As dsReport.dtRetrieveReportRekapPemakaianBahanPerSPKDataTable = New dsReport.dtRetrieveReportRekapPemakaianBahanPerSPKDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class dtRetrieveReportRekapPemakaianBahanPerProjectTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MIS.My.MySettings.Default.ConnStr
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_Retrieve_Report_RekapPemakaianBahanPerProject"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProjectNo", Global.System.Data.SqlDbType.VarChar, 11, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BeginPeriod", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EndPeriod", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal ProjectNo As String, ByVal BeginPeriod As String, ByVal EndPeriod As String) As dsReport.dtRetrieveReportRekapPemakaianBahanPerProjectDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (ProjectNo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(ProjectNo,String)
            End If
            If (BeginPeriod Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(BeginPeriod,String)
            End If
            If (EndPeriod Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(EndPeriod,String)
            End If
            Dim dataTable As dsReport.dtRetrieveReportRekapPemakaianBahanPerProjectDataTable = New dsReport.dtRetrieveReportRekapPemakaianBahanPerProjectDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class dtPOItemByPONoTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "dtPOItemByPONo"
            tableMapping.ColumnMappings.Add("PO_No", "PO_No")
            tableMapping.ColumnMappings.Add("PR_No", "PR_No")
            tableMapping.ColumnMappings.Add("Item_ID", "Item_ID")
            tableMapping.ColumnMappings.Add("Qty", "Qty")
            tableMapping.ColumnMappings.Add("UoM", "UoM")
            tableMapping.ColumnMappings.Add("Price", "Price")
            tableMapping.ColumnMappings.Add("Diskon", "Diskon")
            tableMapping.ColumnMappings.Add("SubTotal", "SubTotal")
            tableMapping.ColumnMappings.Add("Remarks", "Remarks")
            tableMapping.ColumnMappings.Add("PO_Date", "PO_Date")
            tableMapping.ColumnMappings.Add("Supplier_ID", "Supplier_ID")
            tableMapping.ColumnMappings.Add("RecGood_Date", "RecGood_Date")
            tableMapping.ColumnMappings.Add("Remarks_Hdr", "Remarks_Hdr")
            tableMapping.ColumnMappings.Add("SubTotal_Hdr", "SubTotal_Hdr")
            tableMapping.ColumnMappings.Add("Grand_Total", "Grand_Total")
            tableMapping.ColumnMappings.Add("Status_ID", "Status_ID")
            tableMapping.ColumnMappings.Add("Supplier_Name", "Supplier_Name")
            tableMapping.ColumnMappings.Add("Item_Name", "Item_Name")
            tableMapping.ColumnMappings.Add("Status_Name", "Status_Name")
            tableMapping.ColumnMappings.Add("Uang_Muka", "Uang_Muka")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MIS.My.MySettings.Default.ConnStr
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_Retrieve_Trans_PO_Item_ByPONo"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PO_No", Global.System.Data.SqlDbType.NChar, 9, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsReport.dtPOItemByPONoDataTable, ByVal PO_No As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (PO_No Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(PO_No,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal PO_No As String) As dsReport.dtPOItemByPONoDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (PO_No Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(PO_No,String)
            End If
            Dim dataTable As dsReport.dtPOItemByPONoDataTable = New dsReport.dtPOItemByPONoDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class dtPOJasaByPONoTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "dtPOJasaByPONo"
            tableMapping.ColumnMappings.Add("PO_No", "PO_No")
            tableMapping.ColumnMappings.Add("PR_No", "PR_No")
            tableMapping.ColumnMappings.Add("Jasa_ID", "Jasa_ID")
            tableMapping.ColumnMappings.Add("Price", "Price")
            tableMapping.ColumnMappings.Add("Remarks", "Remarks")
            tableMapping.ColumnMappings.Add("PO_Date", "PO_Date")
            tableMapping.ColumnMappings.Add("Supplier_ID", "Supplier_ID")
            tableMapping.ColumnMappings.Add("RecGood_Date", "RecGood_Date")
            tableMapping.ColumnMappings.Add("Remarks_Hdr", "Remarks_Hdr")
            tableMapping.ColumnMappings.Add("SubTotal_Hdr", "SubTotal_Hdr")
            tableMapping.ColumnMappings.Add("Grand_Total", "Grand_Total")
            tableMapping.ColumnMappings.Add("Status_ID", "Status_ID")
            tableMapping.ColumnMappings.Add("Supplier_Name", "Supplier_Name")
            tableMapping.ColumnMappings.Add("Jasa_Name", "Jasa_Name")
            tableMapping.ColumnMappings.Add("Status_Name", "Status_Name")
            tableMapping.ColumnMappings.Add("Uang_Muka", "Uang_Muka")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MIS.My.MySettings.Default.ConnStr
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_Retrieve_Trans_PO_Jasa_ByPONo"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PO_No", Global.System.Data.SqlDbType.NChar, 9, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsReport.dtPOJasaByPONoDataTable, ByVal PO_No As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (PO_No Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(PO_No,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal PO_No As String) As dsReport.dtPOJasaByPONoDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (PO_No Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(PO_No,String)
            End If
            Dim dataTable As dsReport.dtPOJasaByPONoDataTable = New dsReport.dtPOJasaByPONoDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class dtRetrieveReportSPKFormTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "dtRetrieveReportSPKForm"
            tableMapping.ColumnMappings.Add("SPK_Date", "SPK_Date")
            tableMapping.ColumnMappings.Add("SPK_No", "SPK_No")
            tableMapping.ColumnMappings.Add("Project_No", "Project_No")
            tableMapping.ColumnMappings.Add("Project_Name", "Project_Name")
            tableMapping.ColumnMappings.Add("CustName", "CustName")
            tableMapping.ColumnMappings.Add("Cust_HP", "Cust_HP")
            tableMapping.ColumnMappings.Add("Contact_Person", "Contact_Person")
            tableMapping.ColumnMappings.Add("Teknisi_ID", "Teknisi_ID")
            tableMapping.ColumnMappings.Add("TeknisiName", "TeknisiName")
            tableMapping.ColumnMappings.Add("Jasa_ID", "Jasa_ID")
            tableMapping.ColumnMappings.Add("Jasa_Name", "Jasa_Name")
            tableMapping.ColumnMappings.Add("Start_Dt", "Start_Dt")
            tableMapping.ColumnMappings.Add("TotalHour", "TotalHour")
            tableMapping.ColumnMappings.Add("Remarks", "Remarks")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MIS.My.MySettings.Default.ConnStr
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_Retrieve_Report_SPKForm"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPK_No", Global.System.Data.SqlDbType.VarChar, 11, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsReport.dtRetrieveReportSPKFormDataTable, ByVal SPK_No As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (SPK_No Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(SPK_No,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal SPK_No As String) As dsReport.dtRetrieveReportSPKFormDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (SPK_No Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(SPK_No,String)
            End If
            Dim dataTable As dsReport.dtRetrieveReportSPKFormDataTable = New dsReport.dtRetrieveReportSPKFormDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class dtRetrieveReportProgressProjectPerSPKTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MIS.My.MySettings.Default.ConnStr
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_Retrieve_Report_ProgressProjectPerSPK"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Project_No", Global.System.Data.SqlDbType.VarChar, 11, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPK_No", Global.System.Data.SqlDbType.VarChar, 11, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@isEfficient", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@isComplete", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal Project_No As String, ByVal SPK_No As String, ByVal isEfficient As Global.System.Nullable(Of Integer), ByVal isComplete As Global.System.Nullable(Of Integer)) As dsReport.dtRetrieveReportProgressProjectPerSPKDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Project_No Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Project_No,String)
            End If
            If (SPK_No Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(SPK_No,String)
            End If
            If (isEfficient.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(isEfficient.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (isComplete.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(isComplete.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As dsReport.dtRetrieveReportProgressProjectPerSPKDataTable = New dsReport.dtRetrieveReportProgressProjectPerSPKDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class dtRetrieveReportRekapProjectTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MIS.My.MySettings.Default.ConnStr
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_Retrieve_Report_RekapProject"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BeginTrans", Global.System.Data.SqlDbType.VarChar, 8, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EndTrans", Global.System.Data.SqlDbType.VarChar, 8, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CustID", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@isEfficient", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@isComplete", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal BeginTrans As String, ByVal EndTrans As String, ByVal CustID As String, ByVal isEfficient As Global.System.Nullable(Of Integer), ByVal isComplete As Global.System.Nullable(Of Integer)) As dsReport.dtRetrieveReportRekapProjectDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (BeginTrans Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(BeginTrans,String)
            End If
            If (EndTrans Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(EndTrans,String)
            End If
            If (CustID Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(CustID,String)
            End If
            If (isEfficient.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(isEfficient.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (isComplete.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(isComplete.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As dsReport.dtRetrieveReportRekapProjectDataTable = New dsReport.dtRetrieveReportRekapProjectDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class dtRetrieveReportRekapProgressProjectPerSPKTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MIS.My.MySettings.Default.ConnStr
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_Retrieve_Report_RekapProgressProjectPerSPK"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Project_No", Global.System.Data.SqlDbType.VarChar, 11, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPK_No", Global.System.Data.SqlDbType.VarChar, 11, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@isEfficient", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal Project_No As String, ByVal SPK_No As String, ByVal isEfficient As Global.System.Nullable(Of Integer)) As dsReport.dtRetrieveReportRekapProgressProjectPerSPKDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Project_No Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Project_No,String)
            End If
            If (SPK_No Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(SPK_No,String)
            End If
            If (isEfficient.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(isEfficient.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As dsReport.dtRetrieveReportRekapProgressProjectPerSPKDataTable = New dsReport.dtRetrieveReportRekapProgressProjectPerSPKDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_getPembelianItemTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_getPembelianItem"
            tableMapping.ColumnMappings.Add("PO_Date", "PO_Date")
            tableMapping.ColumnMappings.Add("Supplier_ID", "Supplier_ID")
            tableMapping.ColumnMappings.Add("Nama", "Nama")
            tableMapping.ColumnMappings.Add("TB_No", "TB_No")
            tableMapping.ColumnMappings.Add("PO_No", "PO_No")
            tableMapping.ColumnMappings.Add("TB_Date", "TB_Date")
            tableMapping.ColumnMappings.Add("Warehouse_name", "Warehouse_name")
            tableMapping.ColumnMappings.Add("item_id", "item_id")
            tableMapping.ColumnMappings.Add("item_name", "item_name")
            tableMapping.ColumnMappings.Add("Uom", "Uom")
            tableMapping.ColumnMappings.Add("qty", "qty")
            tableMapping.ColumnMappings.Add("price", "price")
            tableMapping.ColumnMappings.Add("subtotal", "subtotal")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MIS.My.MySettings.Default.MICConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_getPembelianItem"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@supp1", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@supp2", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@podt1", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 23, 3, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@podt2", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 23, 3, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tbdt1", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 23, 3, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tbdt2", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 23, 3, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@item1", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@item2", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@warehouse1", Global.System.Data.SqlDbType.NChar, 5, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@warehouse2", Global.System.Data.SqlDbType.NChar, 5, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsReport.sp_getPembelianItemDataTable, ByVal supp1 As String, ByVal supp2 As String, ByVal podt1 As Global.System.Nullable(Of Date), ByVal podt2 As Global.System.Nullable(Of Date), ByVal tbdt1 As Global.System.Nullable(Of Date), ByVal tbdt2 As Global.System.Nullable(Of Date), ByVal item1 As String, ByVal item2 As String, ByVal warehouse1 As String, ByVal warehouse2 As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (supp1 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(supp1,String)
            End If
            If (supp2 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(supp2,String)
            End If
            If (podt1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(podt1.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (podt2.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(podt2.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (tbdt1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(tbdt1.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (tbdt2.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(tbdt2.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (item1 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(7).Value = CType(item1,String)
            End If
            If (item2 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(8).Value = CType(item2,String)
            End If
            If (warehouse1 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(9).Value = CType(warehouse1,String)
            End If
            If (warehouse2 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(10).Value = CType(warehouse2,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal supp1 As String, ByVal supp2 As String, ByVal podt1 As Global.System.Nullable(Of Date), ByVal podt2 As Global.System.Nullable(Of Date), ByVal tbdt1 As Global.System.Nullable(Of Date), ByVal tbdt2 As Global.System.Nullable(Of Date), ByVal item1 As String, ByVal item2 As String, ByVal warehouse1 As String, ByVal warehouse2 As String) As dsReport.sp_getPembelianItemDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (supp1 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(supp1,String)
            End If
            If (supp2 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(supp2,String)
            End If
            If (podt1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(podt1.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (podt2.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(podt2.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (tbdt1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(tbdt1.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (tbdt2.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(tbdt2.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (item1 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(7).Value = CType(item1,String)
            End If
            If (item2 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(8).Value = CType(item2,String)
            End If
            If (warehouse1 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(9).Value = CType(warehouse1,String)
            End If
            If (warehouse2 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(10).Value = CType(warehouse2,String)
            End If
            Dim dataTable As dsReport.sp_getPembelianItemDataTable = New dsReport.sp_getPembelianItemDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class dtPOPendingBasedOnTerimaBarangTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "dtPOPendingBasedOnTerimaBarang"
            tableMapping.ColumnMappings.Add("PO_Date", "PO_Date")
            tableMapping.ColumnMappings.Add("Supplier_ID", "Supplier_ID")
            tableMapping.ColumnMappings.Add("Nama", "Nama")
            tableMapping.ColumnMappings.Add("TB_No", "TB_No")
            tableMapping.ColumnMappings.Add("PO_No", "PO_No")
            tableMapping.ColumnMappings.Add("TB_Date", "TB_Date")
            tableMapping.ColumnMappings.Add("Warehouse_ID", "Warehouse_ID")
            tableMapping.ColumnMappings.Add("Warehouse_Name", "Warehouse_Name")
            tableMapping.ColumnMappings.Add("Item_ID", "Item_ID")
            tableMapping.ColumnMappings.Add("Item_Name", "Item_Name")
            tableMapping.ColumnMappings.Add("UoM", "UoM")
            tableMapping.ColumnMappings.Add("Qty_Rec", "Qty_Rec")
            tableMapping.ColumnMappings.Add("Price", "Price")
            tableMapping.ColumnMappings.Add("Diskon", "Diskon")
            tableMapping.ColumnMappings.Add("SubTotal", "SubTotal")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MIS.My.MySettings.Default.MICConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_Retrieve_Trans_PO_BasedOnTerimaBrg"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PODate_Fr", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PODate_To", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TBDate_Fr", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TBDate_To", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ItemID_Fr", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ItemID_To", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SuppID_Fr", Global.System.Data.SqlDbType.VarChar, 5, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SuppID_To", Global.System.Data.SqlDbType.VarChar, 5, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WarehouseID_Fr", Global.System.Data.SqlDbType.[Char], 5, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WarehouseID_To", Global.System.Data.SqlDbType.[Char], 5, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PONo_Fr", Global.System.Data.SqlDbType.[Char], 10, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PONo_To", Global.System.Data.SqlDbType.[Char], 10, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TBNo_Fr", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TBNo_To", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsReport.dtPOPendingBasedOnTerimaBarangDataTable, ByVal PODate_Fr As String, ByVal PODate_To As String, ByVal TBDate_Fr As String, ByVal TBDate_To As String, ByVal ItemID_Fr As String, ByVal ItemID_To As String, ByVal SuppID_Fr As String, ByVal SuppID_To As String, ByVal WarehouseID_Fr As String, ByVal WarehouseID_To As String, ByVal PONo_Fr As String, ByVal PONo_To As String, ByVal TBNo_Fr As String, ByVal TBNo_To As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (PODate_Fr Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(PODate_Fr,String)
            End If
            If (PODate_To Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(PODate_To,String)
            End If
            If (TBDate_Fr Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(TBDate_Fr,String)
            End If
            If (TBDate_To Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(TBDate_To,String)
            End If
            If (ItemID_Fr Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(ItemID_Fr,String)
            End If
            If (ItemID_To Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(ItemID_To,String)
            End If
            If (SuppID_Fr Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(7).Value = CType(SuppID_Fr,String)
            End If
            If (SuppID_To Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(8).Value = CType(SuppID_To,String)
            End If
            If (WarehouseID_Fr Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(9).Value = CType(WarehouseID_Fr,String)
            End If
            If (WarehouseID_To Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(10).Value = CType(WarehouseID_To,String)
            End If
            If (PONo_Fr Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(11).Value = CType(PONo_Fr,String)
            End If
            If (PONo_To Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(12).Value = CType(PONo_To,String)
            End If
            If (TBNo_Fr Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(13).Value = CType(TBNo_Fr,String)
            End If
            If (TBNo_To Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(14).Value = CType(TBNo_To,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal PODate_Fr As String, ByVal PODate_To As String, ByVal TBDate_Fr As String, ByVal TBDate_To As String, ByVal ItemID_Fr As String, ByVal ItemID_To As String, ByVal SuppID_Fr As String, ByVal SuppID_To As String, ByVal WarehouseID_Fr As String, ByVal WarehouseID_To As String, ByVal PONo_Fr As String, ByVal PONo_To As String, ByVal TBNo_Fr As String, ByVal TBNo_To As String) As dsReport.dtPOPendingBasedOnTerimaBarangDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (PODate_Fr Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(PODate_Fr,String)
            End If
            If (PODate_To Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(PODate_To,String)
            End If
            If (TBDate_Fr Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(TBDate_Fr,String)
            End If
            If (TBDate_To Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(TBDate_To,String)
            End If
            If (ItemID_Fr Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(ItemID_Fr,String)
            End If
            If (ItemID_To Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(ItemID_To,String)
            End If
            If (SuppID_Fr Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(7).Value = CType(SuppID_Fr,String)
            End If
            If (SuppID_To Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(8).Value = CType(SuppID_To,String)
            End If
            If (WarehouseID_Fr Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(9).Value = CType(WarehouseID_Fr,String)
            End If
            If (WarehouseID_To Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(10).Value = CType(WarehouseID_To,String)
            End If
            If (PONo_Fr Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(11).Value = CType(PONo_Fr,String)
            End If
            If (PONo_To Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(12).Value = CType(PONo_To,String)
            End If
            If (TBNo_Fr Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(13).Value = CType(TBNo_Fr,String)
            End If
            If (TBNo_To Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(14).Value = CType(TBNo_To,String)
            End If
            Dim dataTable As dsReport.dtPOPendingBasedOnTerimaBarangDataTable = New dsReport.dtPOPendingBasedOnTerimaBarangDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_GetCustomerReceivableAgingTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_GetCustomerReceivableAging"
            tableMapping.ColumnMappings.Add("cust_id", "cust_id")
            tableMapping.ColumnMappings.Add("nama", "nama")
            tableMapping.ColumnMappings.Add("saldo_awal", "saldo_awal")
            tableMapping.ColumnMappings.Add("nilai_project", "nilai_project")
            tableMapping.ColumnMappings.Add("penjualan", "penjualan")
            tableMapping.ColumnMappings.Add("total_invoice", "total_invoice")
            tableMapping.ColumnMappings.Add("invoice_terbayarkan", "invoice_terbayarkan")
            tableMapping.ColumnMappings.Add("potongan", "potongan")
            tableMapping.ColumnMappings.Add("sisa_invoice", "sisa_invoice")
            tableMapping.ColumnMappings.Add("0-30", "0-30")
            tableMapping.ColumnMappings.Add("30-60", "30-60")
            tableMapping.ColumnMappings.Add(">60", ">60")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MIS.My.MySettings.Default.MICConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_GetCustomerReceivableAging"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@period", Global.System.Data.SqlDbType.VarChar, 6, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsReport.sp_GetCustomerReceivableAgingDataTable, ByVal period As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (period Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(period,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal period As String) As dsReport.sp_GetCustomerReceivableAgingDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (period Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(period,String)
            End If
            Dim dataTable As dsReport.sp_GetCustomerReceivableAgingDataTable = New dsReport.sp_GetCustomerReceivableAgingDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class dtRetrieveReportFormPenawaranMarketingHdrTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "dtRetrieveReportFormPenawaranMarketingHdr"
            tableMapping.ColumnMappings.Add("PHM_No", "PHM_No")
            tableMapping.ColumnMappings.Add("PHM_Date", "PHM_Date")
            tableMapping.ColumnMappings.Add("CustName", "CustName")
            tableMapping.ColumnMappings.Add("MICE_Main", "MICE_Main")
            tableMapping.ColumnMappings.Add("MarkUp_Pct", "MarkUp_Pct")
            tableMapping.ColumnMappings.Add("MICE_Supporting", "MICE_Supporting")
            tableMapping.ColumnMappings.Add("TotalJasa", "TotalJasa")
            tableMapping.ColumnMappings.Add("AdminQC_Amt", "AdminQC_Amt")
            tableMapping.ColumnMappings.Add("Remarks", "Remarks")
            tableMapping.ColumnMappings.Add("DiscAmt", "DiscAmt")
            tableMapping.ColumnMappings.Add("Survey_Remark", "Survey_Remark")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MIS.My.MySettings.Default.MICConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_Retrieve_Report_FormPenawaranMarketingHdr"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PHM_No", Global.System.Data.SqlDbType.VarChar, 9, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Seq", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsReport.dtRetrieveReportFormPenawaranMarketingHdrDataTable, ByVal PHM_No As String, ByVal Seq As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (PHM_No Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(PHM_No,String)
            End If
            If (Seq.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(Seq.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal PHM_No As String, ByVal Seq As Global.System.Nullable(Of Integer)) As dsReport.dtRetrieveReportFormPenawaranMarketingHdrDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (PHM_No Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(PHM_No,String)
            End If
            If (Seq.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(Seq.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As dsReport.dtRetrieveReportFormPenawaranMarketingHdrDataTable = New dsReport.dtRetrieveReportFormPenawaranMarketingHdrDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class dtRetrieveReportFormPenawaranMarketingDtlTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "dtRetrieveReportFormPenawaranMarketingDtl"
            tableMapping.ColumnMappings.Add("Seq", "Seq")
            tableMapping.ColumnMappings.Add("Item_Id", "Item_Id")
            tableMapping.ColumnMappings.Add("Item_Name", "Item_Name")
            tableMapping.ColumnMappings.Add("Item_Category", "Item_Category")
            tableMapping.ColumnMappings.Add("UoM", "UoM")
            tableMapping.ColumnMappings.Add("Qty", "Qty")
            tableMapping.ColumnMappings.Add("Price_Marketing", "Price_Marketing")
            tableMapping.ColumnMappings.Add("SubTotal", "SubTotal")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MIS.My.MySettings.Default.MICConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_Retrieve_Report_FormPenawaranMarketingDtl"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PHM_No", Global.System.Data.SqlDbType.VarChar, 9, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Seq", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsReport.dtRetrieveReportFormPenawaranMarketingDtlDataTable, ByVal PHM_No As String, ByVal Seq As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (PHM_No Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(PHM_No,String)
            End If
            If (Seq.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(Seq.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal PHM_No As String, ByVal Seq As Global.System.Nullable(Of Integer)) As dsReport.dtRetrieveReportFormPenawaranMarketingDtlDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (PHM_No Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(PHM_No,String)
            End If
            If (Seq.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(Seq.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As dsReport.dtRetrieveReportFormPenawaranMarketingDtlDataTable = New dsReport.dtRetrieveReportFormPenawaranMarketingDtlDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class dtRetrieveReportFormPenawaranMarketingJasaTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "dtRetrieveReportFormPenawaranMarketingJasa"
            tableMapping.ColumnMappings.Add("Jasa_ID", "Jasa_ID")
            tableMapping.ColumnMappings.Add("Jasa_Name", "Jasa_Name")
            tableMapping.ColumnMappings.Add("Jlh_Hari", "Jlh_Hari")
            tableMapping.ColumnMappings.Add("Ongkos", "Ongkos")
            tableMapping.ColumnMappings.Add("SubTotal", "SubTotal")
            tableMapping.ColumnMappings.Add("Remarks", "Remarks")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MIS.My.MySettings.Default.MICConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_Retrieve_Report_FormPenawaranMarketingJasa"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PHM_No", Global.System.Data.SqlDbType.VarChar, 9, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Seq", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsReport.dtRetrieveReportFormPenawaranMarketingJasaDataTable, ByVal PHM_No As String, ByVal Seq As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (PHM_No Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(PHM_No,String)
            End If
            If (Seq.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(Seq.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal PHM_No As String, ByVal Seq As Global.System.Nullable(Of Integer)) As dsReport.dtRetrieveReportFormPenawaranMarketingJasaDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (PHM_No Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(PHM_No,String)
            End If
            If (Seq.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(Seq.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As dsReport.dtRetrieveReportFormPenawaranMarketingJasaDataTable = New dsReport.dtRetrieveReportFormPenawaranMarketingJasaDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class dtPersediaanBarangTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "dtPersediaanBarang"
            tableMapping.ColumnMappings.Add("Period", "Period")
            tableMapping.ColumnMappings.Add("Warehouse_ID", "Warehouse_ID")
            tableMapping.ColumnMappings.Add("Warehouse_name", "Warehouse_name")
            tableMapping.ColumnMappings.Add("Item_Id", "Item_Id")
            tableMapping.ColumnMappings.Add("Item_name", "Item_name")
            tableMapping.ColumnMappings.Add("UoM", "UoM")
            tableMapping.ColumnMappings.Add("Current_Stock", "Current_Stock")
            tableMapping.ColumnMappings.Add("Min_Stock", "Min_Stock")
            tableMapping.ColumnMappings.Add("TB_Amount", "TB_Amount")
            tableMapping.ColumnMappings.Add("TB_Qty", "TB_Qty")
            tableMapping.ColumnMappings.Add("StockBB_Price", "StockBB_Price")
            tableMapping.ColumnMappings.Add("StockBB_Qty", "StockBB_Qty")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MIS.My.MySettings.Default.MIC_DB2005
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_Retrieve_CurrentStock_ForReport"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Period", Global.System.Data.SqlDbType.[Char], 6, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Warehouse_ID", Global.System.Data.SqlDbType.NChar, 5, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsReport.dtPersediaanBarangDataTable, ByVal Period As String, ByVal Warehouse_ID As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Period Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Period,String)
            End If
            If (Warehouse_ID Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(Warehouse_ID,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal Period As String, ByVal Warehouse_ID As String) As dsReport.dtPersediaanBarangDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Period Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Period,String)
            End If
            If (Warehouse_ID Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(Warehouse_ID,String)
            End If
            Dim dataTable As dsReport.dtPersediaanBarangDataTable = New dsReport.dtPersediaanBarangDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class dtPenjualanTokoPerBarangDailyTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "dtPenjualanTokoPerBarangDaily"
            tableMapping.ColumnMappings.Add("PT_Date", "PT_Date")
            tableMapping.ColumnMappings.Add("Item_ID", "Item_ID")
            tableMapping.ColumnMappings.Add("Item_Name", "Item_Name")
            tableMapping.ColumnMappings.Add("UoM", "UoM")
            tableMapping.ColumnMappings.Add("Qty", "Qty")
            tableMapping.ColumnMappings.Add("Qty_MinRetur", "Qty_MinRetur")
            tableMapping.ColumnMappings.Add("Amount", "Amount")
            tableMapping.ColumnMappings.Add("Amount_MinRetur", "Amount_MinRetur")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MIS.My.MySettings.Default.MIC_DB2005
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_Retrieve_Trans_PenjualanToko_ForDailyReport_ByItemID"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateFrom", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateTo", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsReport.dtPenjualanTokoPerBarangDailyDataTable, ByVal DateFrom As String, ByVal DateTo As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (DateFrom Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DateFrom,String)
            End If
            If (DateTo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(DateTo,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal DateFrom As String, ByVal DateTo As String) As dsReport.dtPenjualanTokoPerBarangDailyDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (DateFrom Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DateFrom,String)
            End If
            If (DateTo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(DateTo,String)
            End If
            Dim dataTable As dsReport.dtPenjualanTokoPerBarangDailyDataTable = New dsReport.dtPenjualanTokoPerBarangDailyDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class dtPenjualanTokoPerBarangMonthlyTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "dtPenjualanTokoPerBarangMonthly"
            tableMapping.ColumnMappings.Add("PT_Year", "PT_Year")
            tableMapping.ColumnMappings.Add("PT_Month", "PT_Month")
            tableMapping.ColumnMappings.Add("Item_ID", "Item_ID")
            tableMapping.ColumnMappings.Add("Item_Name", "Item_Name")
            tableMapping.ColumnMappings.Add("UoM", "UoM")
            tableMapping.ColumnMappings.Add("Qty", "Qty")
            tableMapping.ColumnMappings.Add("Qty_MinRetur", "Qty_MinRetur")
            tableMapping.ColumnMappings.Add("Amount", "Amount")
            tableMapping.ColumnMappings.Add("Amount_MinRetur", "Amount_MinRetur")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MIS.My.MySettings.Default.MIC_DB2005
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_Retrieve_Trans_PenjualanToko_ForMonthlyReport_ByItemID"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateFrom", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateTo", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsReport.dtPenjualanTokoPerBarangMonthlyDataTable, ByVal DateFrom As String, ByVal DateTo As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (DateFrom Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DateFrom,String)
            End If
            If (DateTo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(DateTo,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal DateFrom As String, ByVal DateTo As String) As dsReport.dtPenjualanTokoPerBarangMonthlyDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (DateFrom Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DateFrom,String)
            End If
            If (DateTo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(DateTo,String)
            End If
            Dim dataTable As dsReport.dtPenjualanTokoPerBarangMonthlyDataTable = New dsReport.dtPenjualanTokoPerBarangMonthlyDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class dtPenjualanTokoPerCustomerDailyTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "dtPenjualanTokoPerCustomerDaily"
            tableMapping.ColumnMappings.Add("PT_Date", "PT_Date")
            tableMapping.ColumnMappings.Add("Cust_ID", "Cust_ID")
            tableMapping.ColumnMappings.Add("Nama", "Nama")
            tableMapping.ColumnMappings.Add("Item_ID", "Item_ID")
            tableMapping.ColumnMappings.Add("Item_Name", "Item_Name")
            tableMapping.ColumnMappings.Add("UoM", "UoM")
            tableMapping.ColumnMappings.Add("Qty", "Qty")
            tableMapping.ColumnMappings.Add("Qty_MinRetur", "Qty_MinRetur")
            tableMapping.ColumnMappings.Add("Amount", "Amount")
            tableMapping.ColumnMappings.Add("Amount_MinRetur", "Amount_MinRetur")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MIS.My.MySettings.Default.MIC_DB2005
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_Retrieve_Trans_PenjualanToko_ForDailyReport_ByCustomer"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateFrom", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateTo", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsReport.dtPenjualanTokoPerCustomerDailyDataTable, ByVal DateFrom As String, ByVal DateTo As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (DateFrom Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DateFrom,String)
            End If
            If (DateTo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(DateTo,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal DateFrom As String, ByVal DateTo As String) As dsReport.dtPenjualanTokoPerCustomerDailyDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (DateFrom Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DateFrom,String)
            End If
            If (DateTo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(DateTo,String)
            End If
            Dim dataTable As dsReport.dtPenjualanTokoPerCustomerDailyDataTable = New dsReport.dtPenjualanTokoPerCustomerDailyDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class dtPenjualanTokoPerCustomerMonthlyTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "dtPenjualanTokoPerCustomerMonthly"
            tableMapping.ColumnMappings.Add("PT_Year", "PT_Year")
            tableMapping.ColumnMappings.Add("PT_Month", "PT_Month")
            tableMapping.ColumnMappings.Add("Cust_ID", "Cust_ID")
            tableMapping.ColumnMappings.Add("Nama", "Nama")
            tableMapping.ColumnMappings.Add("Item_ID", "Item_ID")
            tableMapping.ColumnMappings.Add("Item_Name", "Item_Name")
            tableMapping.ColumnMappings.Add("UoM", "UoM")
            tableMapping.ColumnMappings.Add("Qty", "Qty")
            tableMapping.ColumnMappings.Add("Qty_MinRetur", "Qty_MinRetur")
            tableMapping.ColumnMappings.Add("Amount", "Amount")
            tableMapping.ColumnMappings.Add("Amount_MinRetur", "Amount_MinRetur")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MIS.My.MySettings.Default.MIC_DB2005
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_Retrieve_Trans_PenjualanToko_ForMonthlyReport_ByCustomer"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateFrom", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateTo", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsReport.dtPenjualanTokoPerCustomerMonthlyDataTable, ByVal DateFrom As String, ByVal DateTo As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (DateFrom Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DateFrom,String)
            End If
            If (DateTo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(DateTo,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal DateFrom As String, ByVal DateTo As String) As dsReport.dtPenjualanTokoPerCustomerMonthlyDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (DateFrom Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DateFrom,String)
            End If
            If (DateTo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(DateTo,String)
            End If
            Dim dataTable As dsReport.dtPenjualanTokoPerCustomerMonthlyDataTable = New dsReport.dtPenjualanTokoPerCustomerMonthlyDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class dtPenjualanInstalasiDailyTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "dtPenjualanInstalasiDaily"
            tableMapping.ColumnMappings.Add("Tgl_Faktur", "Tgl_Faktur")
            tableMapping.ColumnMappings.Add("Cust_ID", "Cust_ID")
            tableMapping.ColumnMappings.Add("Nama", "Nama")
            tableMapping.ColumnMappings.Add("Faktur_Tipe", "Faktur_Tipe")
            tableMapping.ColumnMappings.Add("Project_No", "Project_No")
            tableMapping.ColumnMappings.Add("Project_Name", "Project_Name")
            tableMapping.ColumnMappings.Add("DPP", "DPP")
            tableMapping.ColumnMappings.Add("Jumlah_Uang", "Jumlah_Uang")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MIS.My.MySettings.Default.MIC_DB2005
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_Retrieve_Trans_Penjualan_BasedOn_InvoicePiutang_ForDailyReport"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateFrom", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateTo", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsReport.dtPenjualanInstalasiDailyDataTable, ByVal DateFrom As String, ByVal DateTo As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (DateFrom Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DateFrom,String)
            End If
            If (DateTo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(DateTo,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal DateFrom As String, ByVal DateTo As String) As dsReport.dtPenjualanInstalasiDailyDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (DateFrom Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DateFrom,String)
            End If
            If (DateTo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(DateTo,String)
            End If
            Dim dataTable As dsReport.dtPenjualanInstalasiDailyDataTable = New dsReport.dtPenjualanInstalasiDailyDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class dtPenjualanInstalasiMonthlyTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "dtPenjualanInstalasiMonthly"
            tableMapping.ColumnMappings.Add("Faktur_Year", "Faktur_Year")
            tableMapping.ColumnMappings.Add("Faktur_Month", "Faktur_Month")
            tableMapping.ColumnMappings.Add("Cust_ID", "Cust_ID")
            tableMapping.ColumnMappings.Add("Nama", "Nama")
            tableMapping.ColumnMappings.Add("Faktur_Tipe", "Faktur_Tipe")
            tableMapping.ColumnMappings.Add("Project_No", "Project_No")
            tableMapping.ColumnMappings.Add("Project_Name", "Project_Name")
            tableMapping.ColumnMappings.Add("DPP", "DPP")
            tableMapping.ColumnMappings.Add("Jumlah_Uang", "Jumlah_Uang")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MIS.My.MySettings.Default.MIC_DB2005
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_Retrieve_Trans_Penjualan_BasedOn_InvoicePiutang_ForMonthlyReport"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateFrom", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateTo", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsReport.dtPenjualanInstalasiMonthlyDataTable, ByVal DateFrom As String, ByVal DateTo As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (DateFrom Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DateFrom,String)
            End If
            If (DateTo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(DateTo,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal DateFrom As String, ByVal DateTo As String) As dsReport.dtPenjualanInstalasiMonthlyDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (DateFrom Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DateFrom,String)
            End If
            If (DateTo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(DateTo,String)
            End If
            Dim dataTable As dsReport.dtPenjualanInstalasiMonthlyDataTable = New dsReport.dtPenjualanInstalasiMonthlyDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
End Namespace
